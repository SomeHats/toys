{"mappings":"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","sources":["src/lib/assert.ts","src/webgl/webgl-main.ts","src/webgl/test.vert","src/webgl/test.frag"],"sourcesContent":["export function fail(message: string): never {\n  throw new Error(message);\n}\n\nexport function assert(value: unknown, message?: string): asserts value {\n  if (!value) {\n    fail(message || 'Assertion Error');\n  }\n}\n","import { assert } from '../lib/assert';\nimport testVert from './test.vert';\nimport testFrag from './test.frag';\nimport AABB from '../lib/geom/AABB';\nimport { times, random } from '../lib/utils';\nimport Vector2 from '../lib/geom/Vector2';\nimport { Triangle } from 'three';\n\nconst canvas = document.createElement('canvas');\ncanvas.width = document.body.clientWidth * window.devicePixelRatio;\ncanvas.height = document.body.clientHeight * window.devicePixelRatio;\ncanvas.style.width = `${document.body.clientWidth}px`;\ncanvas.style.height = `${document.body.clientHeight}px`;\ndocument.body.appendChild(canvas);\n\nconst gl = canvas.getContext('webgl');\nassert(gl);\n\nenum ShaderType {\n  Fragment = WebGLRenderingContext.FRAGMENT_SHADER,\n  Vertex = WebGLRenderingContext.VERTEX_SHADER,\n}\n\nfunction createShader(\n  gl: WebGLRenderingContext,\n  type: ShaderType,\n  source: string,\n): WebGLShader {\n  const shader = gl.createShader(type);\n  assert(shader);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success: boolean = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (!success) {\n    console.log(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n    throw new Error('compile error');\n  }\n  return shader;\n}\n\nfunction createProgram(\n  gl: WebGLRenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader,\n): WebGLProgram {\n  const program = gl.createProgram();\n  assert(program);\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  const success: boolean = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (!success) {\n    console.log(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n    throw 'link error';\n  }\n  return program;\n}\n\nconst vertexShader = createShader(gl, ShaderType.Vertex, testVert);\nconst fragmentShader = createShader(gl, ShaderType.Fragment, testFrag);\nconst program = createProgram(gl, vertexShader, fragmentShader);\n\nconst positionAttributeLocation = gl.getAttribLocation(program, 'a_position');\nconst colorAttributeLocation = gl.getAttribLocation(program, 'a_color');\nconst resolutionUniformLocation = gl.getUniformLocation(\n  program,\n  'u_resolution',\n);\n\nconst positionBuffer = gl.createBuffer();\nassert(positionBuffer);\n\n// 2d points\nconst positions = [10, 20, 80, 20, 10, 30, 10, 30, 80, 20, 80, 30];\ngl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\ngl.viewport(0, 0, canvas.width, canvas.height);\n\n// Clear the canvas\ngl.clearColor(0, 0, 0, 0);\ngl.clear(gl.COLOR_BUFFER_BIT);\n\n// Tell it to use our program (pair of shaders)\ngl.useProgram(program);\n\n// set the resolution\ngl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\n\ngl.enableVertexAttribArray(positionAttributeLocation);\n\n// Bind the position buffer.\ngl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n// Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\ngl.vertexAttribPointer(\n  positionAttributeLocation,\n  2, // size = 2 components per iteration\n  gl.FLOAT, // type = the data is 32bit floats\n  false, // normalize = dont normalize the data\n  0, // stride = 0 = move forward size * sizeof(type) each iteration to get the next position\n  0, // offset = start at the beginning of the buffer\n);\n\nconst rectCount = 100;\nconst vertexBuffer = new Float32Array(rectCount * 12);\n\nfunction setRectangle(gl: WebGLRenderingContext, idx: number, rect: AABB) {\n  vertexBuffer.set(\n    [\n      rect.left,\n      rect.top,\n      rect.right,\n      rect.top,\n      rect.left,\n      rect.bottom,\n      rect.left,\n      rect.bottom,\n      rect.right,\n      rect.top,\n      rect.right,\n      rect.bottom,\n    ],\n    idx * 12,\n  );\n}\n\ntimes(rectCount, (idx) => {\n  const rect = new AABB(\n    new Vector2(random(gl.canvas.width), random(gl.canvas.height)),\n    new Vector2(random(200), random(200)),\n  );\n\n  setRectangle(gl, idx, rect);\n});\n\ngl.bufferData(gl.ARRAY_BUFFER, vertexBuffer, gl.STATIC_DRAW);\n\n// Set a random color.\n// gl.uniform4f(\n//   colorUniformLocation,\n//   Math.random(),\n//   Math.random(),\n//   Math.random(),\n//   1,\n// );\n\n// Draw the rectangle.\ngl.drawArrays(gl.TRIANGLES, 0, rectCount * 6);\n\nexport {};\n","// an attribute will receive data from a buffer\nattribute vec2 a_position;\nattribute vec4 a_color;\n\nvarying vec4 v_color;\n\nuniform vec2 u_resolution;\n\n// all shaders have a main function\nvoid main() {\n  // convert the position from pixels to 0.0 to 1.0\n  vec2 zeroToOne = a_position / u_resolution;\n \n  // convert from 0->1 to 0->2\n  vec2 zeroToTwo = zeroToOne * 2.0;\n \n  // convert from 0->2 to -1->+1 (clip space)\n  vec2 clipSpace = zeroToTwo - 1.0;\n \n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n\n  // Convert from clip space to color space.\n  // Clip space goes -1.0 to +1.0\n  // Color space goes from 0.0 to 1.0\n  v_color = a_color;\n}","precision mediump float;\n \nuniform vec4 u_color;\nvarying vec4 v_color;\n\nvoid main() {\n  gl_FragColor = v_color;\n}"],"names":["$52750c4f2800ba92$export$b8795f4f643ce74f","value","message","Error","$52750c4f2800ba92$export$62d771998a1345d1","$5ea1224942b1bcc0$var$canvas","document","createElement","width","body","clientWidth","window","devicePixelRatio","height","clientHeight","style","concat","appendChild","ShaderType","$5ea1224942b1bcc0$var$gl","getContext","$5ea1224942b1bcc0$var$createShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","$5ea1224942b1bcc0$var$ShaderType","WebGLRenderingContext","FRAGMENT_SHADER","VERTEX_SHADER","$5ea1224942b1bcc0$var$vertexShader","Vertex","$parcel$interopDefault","$5ea1224942b1bcc0$var$fragmentShader","Fragment","$5ea1224942b1bcc0$var$program","vertexShader","fragmentShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","$5ea1224942b1bcc0$var$createProgram","$5ea1224942b1bcc0$var$positionAttributeLocation","getAttribLocation","$5ea1224942b1bcc0$var$resolutionUniformLocation","getUniformLocation","$5ea1224942b1bcc0$var$positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","viewport","clearColor","clear","COLOR_BUFFER_BIT","useProgram","uniform2f","canvas","enableVertexAttribArray","vertexAttribPointer","FLOAT","$5ea1224942b1bcc0$var$vertexBuffer","$5ea1224942b1bcc0$var$rectCount","$8pNpe","times","idx","rect","set","left","top","right","bottom","$5ea1224942b1bcc0$var$setRectangle","$7B1qO","default","$54lVR","random","drawArrays","TRIANGLES"],"version":3,"file":"index.06699956.js.map"}