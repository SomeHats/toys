import{q as I,c as i,b as c}from"./chunk_assert.0ed02936.js";import{V as h}from"./chunk_Vector2.5cb4ef59.js";import{u as l}from"./chunk_client.eaa7f0af.js";import{r as d}from"./chunk_index.9ef61b8f.js";const m=10,f=I,g=()=>null;class C{constructor({onTap:t=f,onDragStart:s=g}){this.state={type:"idle"},this.lastEvent=null,this.onTap=t,this.onDragStart=s}isGestureInProgress(){return this.state.type!=="idle"}onPointerDown(t,...s){var e,n;switch(this.lastEvent=t,this.state.type){case"idle":{const r=this.onDragStart(t,...s);if(!r)return;r.pointerCapture&&t.currentTarget.setPointerCapture(t.pointerId),(e=r.couldBeTap)==null||e?this.state={type:"dragUnconfirmed",pointerId:t.pointerId,startPosition:h.fromEvent(t),dragHandler:r,args:s}:(this.state={type:"dragConfirmed",pointerId:t.pointerId,dragHandler:r},(n=r.onConfirm)==null||n.call(r,t));return}case"dragUnconfirmed":case"dragConfirmed":return;default:i(this.state)}}onPointerMove(t){var s,e;switch(this.lastEvent=t,this.state.type){case"idle":return;case"dragUnconfirmed":if(this.state.pointerId!==t.pointerId)return;this.state.dragHandler.onMove(t),this.state.startPosition.distanceTo(h.fromEvent(t))>=m&&((e=(s=this.state.dragHandler).onConfirm)==null||e.call(s,t),this.state={type:"dragConfirmed",pointerId:this.state.pointerId,dragHandler:this.state.dragHandler});return;case"dragConfirmed":if(this.state.pointerId!==t.pointerId)return;this.state.dragHandler.onMove(t);return;default:i(this.state)}}onPointerUp(t){switch(this.lastEvent=t,this.state.type){case"idle":return;case"dragUnconfirmed":if(this.state.pointerId!==t.pointerId)return;this.state.dragHandler.pointerCapture&&t.currentTarget.releasePointerCapture(t.pointerId),this.state.dragHandler.onCancel(t),this.onTap(t,...this.state.args),this.state={type:"idle"};return;case"dragConfirmed":if(this.state.pointerId!==t.pointerId)return;this.state.dragHandler.pointerCapture&&t.currentTarget.releasePointerCapture(t.pointerId),this.state.dragHandler.onEnd(t),this.state={type:"idle"};return;default:i(this.state)}}onPointerCancel(t){switch(this.lastEvent=t,this.state.type){case"idle":return;case"dragUnconfirmed":case"dragConfirmed":if(this.state.pointerId!==t.pointerId)return;this.state.dragHandler.pointerCapture&&t.currentTarget.releasePointerCapture(t.pointerId),this.state.dragHandler.onCancel(t),this.state={type:"idle"};return;default:i(this.state)}}cancel(){switch(this.state.type){case"idle":return;case"dragUnconfirmed":case"dragConfirmed":this.state.dragHandler.onCancel(c(this.lastEvent,"Assertion Error: this.lastEvent")),this.state={type:"idle"};return;default:i(this.state)}}end(){const t=c(this.lastEvent,"Assertion Error: this.lastEvent");switch(this.state.type){case"idle":return;case"dragUnconfirmed":this.state.dragHandler.onCancel(t),this.onTap(t,...this.state.args),this.state={type:"idle"};return;case"dragConfirmed":this.state.dragHandler.onEnd(t),this.state={type:"idle"};return;default:i(this.state)}}}function G(o){var p,u;const t=l((p=o.onTap)!=null?p:f),s=l((u=o.onDragStart)!=null?u:g),[e]=d.exports.useState(()=>new C({onTap:t,onDragStart:s})),[n,r]=d.exports.useState(!1);return{isGestureInProgress:n,events:d.exports.useMemo(()=>({onPointerDown:a=>{e.onPointerDown(a),r(e.isGestureInProgress())},onPointerMove:a=>{e.onPointerMove(a),r(e.isGestureInProgress())},onPointerUp:a=>{e.onPointerUp(a),r(e.isGestureInProgress())},onPointerCancel:a=>{e.onPointerCancel(a),r(e.isGestureInProgress())}}),[e])}}export{C as G,g as d,G as u};
