{"version":3,"sources":["lib/utils.ts","lib/geom/Vector2.ts","lib/DebugCanvas.ts","wiggle-gradient/canvas.ts","lib/createTriangleGrid.ts","lib/assert.ts","wiggle-gradient/wiggle-gradient-main.ts"],"names":[],"mappings":"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","file":"wiggle-gradient-main.db349738.js","sourceRoot":"../src","sourcesContent":["export type TimeoutId = ReturnType<typeof setTimeout>;\nexport type IntervalId = ReturnType<typeof setInterval>;\n\nexport function times<T>(n: number, fn: (idx: number) => T): Array<T> {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(fn(i));\n  }\n  return result;\n}\n\nexport function lerp(a: number, b: number, n: number): number {\n  return (b - a) * n + a;\n}\n\nexport function invLerp(a: number, b: number, n: number): number {\n  return (n - a) / (b - a);\n}\n\nexport function constrain(min: number, max: number, n: number): number {\n  return Math.min(max, Math.max(min, n));\n}\n\nexport function constrainWrapped(min: number, max: number, n: number): number {\n  const size = max - min;\n  n = n - min;\n  while (n < 0) {\n    n += size;\n  }\n  n = n % size;\n  return min + n;\n}\n\nexport function mapRange(\n  a1: number,\n  b1: number,\n  a2: number,\n  b2: number,\n  n: number,\n): number {\n  return lerp(a2, b2, invLerp(a1, b1, n));\n}\n\nexport function random(a: number, b?: number) {\n  if (typeof b === 'number') {\n    return lerp(a, b, Math.random());\n  }\n  return lerp(0, a, Math.random());\n}\n\nexport function randomInt(a: number, b?: number) {\n  return Math.floor(random(a, b));\n}\n\nexport function varyAbsolute(base: number, amount: number): number {\n  return random(base - amount, base + amount);\n}\n\nexport function varyRelative(base: number, amount: number): number {\n  return varyAbsolute(base, base * amount);\n}\n\nexport function sample<T>(arr: ReadonlyArray<T>): T {\n  return arr[Math.floor(random(arr.length))];\n}\n\nexport function flatten<T>(arr: ReadonlyArray<ReadonlyArray<T>>): Array<T> {\n  return arr.reduce<Array<T>>((a, b) => a.concat(b), []);\n}\n\nexport function uniq<T>(arr: T[]): Array<T> {\n  return Array.from(new Set(arr));\n}\n\nexport function intersection<T>(a1: T[], a2: T[]): T[] {\n  const a1Items = new Set(a1);\n  const result = new Set<T>();\n  for (const item of a2) {\n    if (a1Items.has(item)) {\n      result.add(item);\n    }\n  }\n  return Array.from(result);\n}\n\nexport function groupBy<T, Key>(\n  items: ReadonlyArray<T>,\n  getKey: (item: T) => Key,\n): Map<Key, Array<T>> {\n  const groups = new Map<Key, T[]>();\n  for (const item of items) {\n    const key = getKey(item);\n    const existing = groups.get(key);\n    if (existing) {\n      existing.push(item);\n    } else {\n      groups.set(key, [item]);\n    }\n  }\n\n  return groups;\n}\n\nexport function sortBy<T, Key extends number | string>(\n  items: ReadonlyArray<T>,\n  getKey: (item: T) => Key,\n): Array<T> {\n  return items.slice().sort((a, b) => (getKey(a) < getKey(b) ? -1 : 1));\n}\n\nexport function partition<T>(\n  items: ReadonlyArray<T>,\n  condition: (item: T) => boolean,\n): [T[], T[]] {\n  const pass = [];\n  const fail = [];\n  for (const item of items) {\n    if (condition(item)) {\n      pass.push(item);\n    } else {\n      fail.push(item);\n    }\n  }\n  return [pass, fail];\n}\n\nexport function randomColor(): string {\n  return `rgb(${Math.floor(random(256))},${Math.floor(\n    random(256),\n  )},${Math.floor(random(256))})`;\n}\n\nexport function removeFromArray<T>(array: Array<T>, item: T) {\n  const idx = array.indexOf(item);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n}\n\nexport function frame(): Promise<number> {\n  return new Promise((resolve) => {\n    window.requestAnimationFrame((time) => resolve(time));\n  });\n}\n\nexport function wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(() => resolve(), ms));\n}\n\nexport async function frameLoop(\n  cb: (time: number, cancel: () => void) => void,\n) {\n  let shouldCancel = false;\n  const cancel = () => {\n    shouldCancel = true;\n  };\n  while (true) {\n    cb(await frame(), cancel);\n    if (shouldCancel) {\n      return;\n    }\n  }\n}\n\nexport function fromEntries<K extends PropertyKey, V>(\n  entries: ReadonlyArray<[K, V]>,\n): Record<K, V> {\n  const result = {} as Record<K, V>;\n  for (const [key, value] of entries) {\n    result[key] = value;\n  }\n  return result;\n}\n\nexport function compact<T>(arr: ReadonlyArray<T>): Array<NonNullable<T>> {\n  return arr.filter(\n    (item): item is NonNullable<T> => item !== null && item !== undefined,\n  );\n}\n\nexport function normalizeAngle(angle: number): number {\n  return constrainWrapped(-Math.PI, Math.PI, angle);\n}\n\nexport function clamp(min: number, max: number, n: number): number {\n  return Math.max(min, Math.min(max, n));\n}\n\nexport function shuffle<T>(arr: ReadonlyArray<T>): Array<T> {\n  const newArr = arr.slice();\n  for (let i = newArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n  }\n  return newArr;\n}\n\nexport function getId(prefix = ''): string {\n  return `${prefix}${Math.random().toString(36).slice(1)}`;\n}\n\nexport function getLocalStorageItem(\n  key: string,\n  fallback: unknown = null,\n): unknown {\n  try {\n    // Get from local storage by key\n    const item = window.localStorage.getItem(key);\n    // Parse stored json or if none return initialValue\n    return item ? JSON.parse(item) : fallback;\n  } catch (error) {\n    // If error also return initialValue\n    console.log(error);\n    return fallback;\n  }\n}\n\nexport function setLocalStorageItem(key: string, value: unknown) {\n  const stringified = JSON.stringify(value);\n  try {\n    window.localStorage.setItem(key, stringified);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function debounce<Args extends Array<unknown>>(\n  ms: number,\n  fn: (...args: Args) => void,\n): (...args: Args) => void {\n  let timeoutHandle: TimeoutId | undefined;\n\n  return (...args: Args) => {\n    if (timeoutHandle !== undefined) {\n      clearTimeout(timeoutHandle);\n    }\n    timeoutHandle = setTimeout(() => fn(...args), ms);\n  };\n}\n","import { normalizeAngle, lerp } from '../utils';\n\nexport default class Vector2 {\n  static readonly ZERO = new Vector2(0, 0);\n\n  static fromPolar(angle: number, radius: number) {\n    return new Vector2(radius * Math.cos(angle), radius * Math.sin(angle));\n  }\n\n  static average(points: ReadonlyArray<Vector2>): Vector2 {\n    const sum = points.reduce((memo, p) => memo.add(p), Vector2.ZERO);\n    return sum.div(points.length);\n  }\n\n  constructor(public readonly x: number, public readonly y: number) {}\n\n  toString(): string {\n    return `Vector2(${this.x}, ${this.y})`;\n  }\n\n  get magnitudeSquared(): number {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  get magnitude(): number {\n    return Math.sqrt(this.magnitudeSquared);\n  }\n\n  get angle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  isInPolygon(polygon: ReadonlyArray<Vector2>): boolean {\n    // ray-casting algorithm based on\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n    const { x, y } = this;\n\n    let isInside = false;\n    for (\n      let currentIdx = 0, previousIdx = polygon.length - 1;\n      currentIdx < polygon.length;\n      previousIdx = currentIdx++\n    ) {\n      const { x: currentX, y: currentY } = polygon[currentIdx];\n      const { x: previousX, y: previousY } = polygon[previousIdx];\n      const doesIntersect =\n        currentY > y != previousY > y &&\n        x <\n          ((previousX - currentX) * (y - currentY)) / (previousY - currentY) +\n            currentX;\n\n      if (doesIntersect) {\n        isInside = !isInside;\n      }\n    }\n\n    return isInside;\n  }\n\n  equals(other: Vector2) {\n    return this === other || (this.x === other.x && this.y === other.y);\n  }\n\n  distanceTo({ x, y }: Vector2): number {\n    const dx = x - this.x;\n    const dy = y - this.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  angleTo(other: Vector2): number {\n    return other.sub(this).angle;\n  }\n\n  angleBetween(other: Vector2): number {\n    return normalizeAngle(\n      Math.atan2(other.y, other.x) - Math.atan2(this.y, this.x),\n    );\n  }\n\n  dot(other: Vector2): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  div(scale: number): Vector2 {\n    return new Vector2(this.x / scale, this.y / scale);\n  }\n\n  scale(scale: number): Vector2 {\n    return new Vector2(this.x * scale, this.y * scale);\n  }\n\n  negate(): Vector2 {\n    return this.scale(-1);\n  }\n\n  add({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x + x, this.y + y);\n  }\n\n  sub({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x - x, this.y - y);\n  }\n\n  floor(): Vector2 {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y));\n  }\n\n  ceil(): Vector2 {\n    return new Vector2(Math.ceil(this.x), Math.ceil(this.y));\n  }\n\n  round(): Vector2 {\n    return new Vector2(Math.round(this.x), Math.round(this.y));\n  }\n\n  withMagnitude(newMagnitude: number): Vector2 {\n    return Vector2.fromPolar(this.angle, newMagnitude);\n  }\n\n  withAngle(newAngle: number): Vector2 {\n    return Vector2.fromPolar(newAngle, this.magnitude);\n  }\n\n  rotate(byAngle: number): Vector2 {\n    return this.withAngle(this.angle + byAngle);\n  }\n\n  lerp(other: Vector2, n: number): Vector2 {\n    return new Vector2(lerp(this.x, other.x, n), lerp(this.y, other.y, n));\n  }\n}\n","import Vector2 from './geom/Vector2';\n\nconst DEFAULT_DEBUG_COLOR = 'magenta';\nconst LABEL_OFFSET = new Vector2(5, 0);\nconst DEBUG_POINT_SIZE = 3;\nconst HAIRLINE = 0.5;\nconst DEBUG_ARROW_ANGLE = Math.PI * 0.75;\nconst DEBUG_ARROW_SIZE = 5;\n\ntype StrokeOptions = {\n  strokeWidth?: number;\n  stroke?: string;\n  strokeCap?: 'butt' | 'round' | 'square';\n  strokeDash?: number[];\n  strokeDashOffset?: number;\n  strokeJoin?: 'bevel' | 'round' | 'miter';\n};\n\ntype FillOptions = {\n  fill?: string;\n};\n\ntype DebugOptions = {\n  color?: string;\n  label?: string;\n};\n\ntype StrokeAndFillOptions = StrokeOptions & FillOptions;\n\nexport class DebugDraw {\n  constructor(private readonly ctx: CanvasRenderingContext2D) {}\n\n  public clear(fill?: string) {\n    if (!fill) {\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n\n    this.applyFillOptions({ fill });\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n\n  public beginPath() {\n    this.ctx.beginPath();\n  }\n\n  public moveTo({ x, y }: Vector2) {\n    this.ctx.moveTo(x, y);\n  }\n\n  public lineTo({ x, y }: Vector2) {\n    this.ctx.lineTo(x, y);\n  }\n\n  public arc(\n    { x, y }: Vector2,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n    anticlockwise?: boolean,\n  ) {\n    this.ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n  }\n\n  public arcTo(p1: Vector2, p2: Vector2, radius: number) {\n    this.ctx.arcTo(p1.x, p1.y, p2.x, p2.y, radius);\n  }\n\n  public applyStrokeOptions({\n    strokeWidth = 1,\n    stroke = undefined,\n    strokeCap = 'butt',\n    strokeDash = [],\n    strokeDashOffset = 0,\n    strokeJoin = 'round',\n  }: StrokeOptions) {\n    if (stroke) {\n      this.ctx.lineWidth = strokeWidth;\n      this.ctx.strokeStyle = stroke;\n      this.ctx.lineCap = strokeCap;\n      this.ctx.setLineDash(strokeDash);\n      this.ctx.lineDashOffset = strokeDashOffset;\n      this.ctx.lineJoin = strokeJoin;\n    }\n  }\n\n  public stroke(options: StrokeOptions) {\n    if (options.stroke) {\n      this.applyStrokeOptions(options);\n      this.ctx.stroke();\n    }\n  }\n\n  public applyFillOptions({ fill = undefined }: FillOptions) {\n    if (fill) {\n      this.ctx.fillStyle = fill;\n    }\n  }\n\n  public fill(options: FillOptions) {\n    if (options.fill) {\n      this.applyFillOptions(options);\n      this.ctx.fill();\n    }\n  }\n\n  public applyStrokeAndFillOptions(options: StrokeAndFillOptions) {\n    this.applyFillOptions(options);\n    this.applyStrokeOptions(options);\n  }\n\n  public strokeAndFill(options: StrokeAndFillOptions) {\n    this.fill(options);\n    this.stroke(options);\n  }\n\n  public getDebugStrokeOptions(\n    color: string = DEFAULT_DEBUG_COLOR,\n  ): StrokeOptions {\n    return { stroke: color, strokeWidth: HAIRLINE };\n  }\n\n  public debugStroke(color: string = DEFAULT_DEBUG_COLOR) {\n    this.stroke(this.getDebugStrokeOptions(color));\n  }\n\n  public fillText(text: string, position: Vector2, options: FillOptions = {}) {\n    this.applyFillOptions(options);\n    this.ctx.fillText(text, position.x, position.y);\n  }\n\n  public circle(\n    center: Vector2,\n    radius: number,\n    options: StrokeAndFillOptions,\n  ) {\n    this.beginPath();\n    this.arc(center, radius, 0, 2 * Math.PI);\n    this.strokeAndFill(options);\n  }\n\n  public debugLabel(\n    label: string | undefined,\n    position: Vector2,\n    color: string,\n  ) {\n    if (label) {\n      this.applyFillOptions({ fill: color });\n      this.fillText(label, position.add(LABEL_OFFSET));\n    }\n  }\n\n  public debugPointX(\n    position: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, position, color);\n\n    this.beginPath();\n    this.ctx.moveTo(\n      position.x - DEBUG_POINT_SIZE,\n      position.y - DEBUG_POINT_SIZE,\n    );\n    this.ctx.lineTo(\n      position.x + DEBUG_POINT_SIZE,\n      position.y + DEBUG_POINT_SIZE,\n    );\n    this.ctx.moveTo(\n      position.x + DEBUG_POINT_SIZE,\n      position.y - DEBUG_POINT_SIZE,\n    );\n    this.ctx.lineTo(\n      position.x - DEBUG_POINT_SIZE,\n      position.y + DEBUG_POINT_SIZE,\n    );\n    this.stroke({ strokeWidth: HAIRLINE, stroke: color });\n  }\n\n  public debugPointO(\n    position: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, position, color);\n\n    this.circle(position, DEBUG_POINT_SIZE, {\n      strokeWidth: HAIRLINE,\n      stroke: color,\n    });\n  }\n\n  public debugArrow(\n    start: Vector2,\n    end: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, Vector2.average([start, end]), color);\n\n    this.ctx.beginPath();\n    this.moveTo(start);\n    this.lineTo(end);\n\n    const vector = end.sub(start);\n    const arrowLeftPoint = vector\n      .rotate(-DEBUG_ARROW_ANGLE)\n      .withMagnitude(DEBUG_ARROW_SIZE)\n      .add(end);\n    const arrowRightPoint = vector\n      .rotate(+DEBUG_ARROW_ANGLE)\n      .withMagnitude(DEBUG_ARROW_SIZE)\n      .add(end);\n\n    this.moveTo(arrowLeftPoint);\n    this.lineTo(end);\n    this.lineTo(arrowRightPoint);\n    this.stroke({ strokeWidth: HAIRLINE, stroke: color });\n  }\n\n  public debugVectorAtPoint(\n    vector: Vector2,\n    base: Vector2,\n    options?: DebugOptions,\n  ) {\n    this.debugArrow(base, base.add(vector), options);\n  }\n\n  public polygon(\n    polygon: ReadonlyArray<Vector2>,\n    options: StrokeAndFillOptions = {},\n  ) {\n    this.beginPath();\n    this.moveTo(polygon[polygon.length - 1]);\n    for (const point of polygon) {\n      this.lineTo(point);\n    }\n    this.strokeAndFill(options);\n  }\n\n  public polyLine(points: ReadonlyArray<Vector2>, options: StrokeOptions = {}) {\n    this.beginPath();\n    this.moveTo(points[0]);\n    for (let i = 1; i < points.length; i++) {\n      this.lineTo(points[i]);\n    }\n    this.stroke(options);\n  }\n\n  public debugPolygon(\n    polygon: ReadonlyArray<Vector2>,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, polygon[0], color);\n    this.polygon(polygon, this.getDebugStrokeOptions(color));\n  }\n\n  public debugPolyLine(\n    polyLine: ReadonlyArray<Vector2>,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, polyLine[0], color);\n    this.polyLine(polyLine, this.getDebugStrokeOptions(color));\n  }\n}\n","import { DebugDraw } from '../lib/DebugCanvas';\n\nexport const canvasEl = document.createElement('canvas');\nexport const ctx = canvasEl.getContext('2d')!;\nexport const width = document.body.clientWidth;\nexport const height = document.body.clientHeight;\nexport const scale = window.devicePixelRatio;\n\ncanvasEl.width = width * scale;\ncanvasEl.height = height * scale;\ncanvasEl.style.width = `${width}px`;\ncanvasEl.style.height = `${height}px`;\nctx.scale(scale, scale);\nexport const canvas = new DebugDraw(ctx);\ndocument.body.appendChild(canvasEl);\n","import Vector2 from '../lib/geom/Vector2';\nimport { getId, compact, intersection } from '../lib/utils';\nimport Intersection from '../network/networkNodes/Intersection';\n\ntype TriangleGeom = [Vector2, Vector2, Vector2];\ntype IntermediateTriangle = {\n  id: string;\n  points: TriangleGeom;\n};\n\nexport type TriangleNeighbour = {\n  triangle: Triangle;\n  sharedPoints: [Vector2, Vector2];\n};\nexport type Triangle = {\n  id: string;\n  center: Vector2;\n  points: TriangleGeom;\n  neighbours: TriangleNeighbour[];\n  ix: number;\n  iy: number;\n};\n\nexport default function createTriangleGrid(\n  tileSize: number,\n  width: number,\n  height: number,\n): Map<string, Triangle> {\n  const tileHeight = (tileSize * Math.sqrt(3)) / 2;\n  const points: Vector2[][] = [];\n  const trianglePoints: IntermediateTriangle[][] = [];\n  for (let iy = 0; iy * tileHeight < height + tileHeight; iy++) {\n    const pointRow: Vector2[] = [];\n    points.push(pointRow);\n    const triangleRow: IntermediateTriangle[] = [];\n    trianglePoints.push(triangleRow);\n    for (let ix = 0; ix * tileSize < width + tileSize; ix++) {\n      const xOffset = iy % 2 === 0 ? -tileSize / 2 : 0;\n      const point = new Vector2(ix * tileSize + xOffset, iy * tileHeight);\n      pointRow.push(point);\n\n      if (iy !== 0 && ix !== 0) {\n        if (iy % 2 === 0) {\n          const triangle1: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy][ix - 1], points[iy - 1][ix - 1]],\n          };\n          const triangle2: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy - 1][ix - 1], points[iy - 1][ix]],\n          };\n          triangleRow.push(triangle1, triangle2);\n        } else if (points[iy - 1][ix + 1]) {\n          const triangle1: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy][ix - 1], points[iy - 1][ix]],\n          };\n          const triangle2: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy - 1][ix + 1], points[iy - 1][ix]],\n          };\n          triangleRow.push(triangle1, triangle2);\n        }\n      }\n    }\n  }\n\n  const trianglesById = new Map<string, Triangle>();\n  for (let iy = 0; iy < trianglePoints.length; iy++) {\n    for (let ix = 0; ix < trianglePoints[iy].length; ix++) {\n      const triangle = trianglePoints[iy][ix];\n      const center = Vector2.average(triangle.points);\n\n      const neighbours = compact(\n        ix % 2 === 0\n          ? iy % 2 === 0\n            ? [\n                // 2,2\n                trianglePoints[iy]?.[ix - 1],\n                trianglePoints[iy]?.[ix + 1],\n                trianglePoints[iy + 1]?.[ix - 1],\n              ]\n            : [\n                // 2,3\n                trianglePoints[iy]?.[ix - 1],\n                trianglePoints[iy]?.[ix + 1],\n                trianglePoints[iy + 1]?.[ix + 1],\n              ]\n          : iy % 2 === 0\n          ? [\n              // 3,2\n              trianglePoints[iy]?.[ix - 1],\n              trianglePoints[iy]?.[ix + 1],\n              trianglePoints[iy - 1]?.[ix - 1],\n            ]\n          : [\n              //3,3\n              trianglePoints[iy]?.[ix - 1],\n              trianglePoints[iy]?.[ix + 1],\n              trianglePoints[iy - 1]?.[ix + 1],\n            ],\n      );\n\n      const fullTriangle = triangle as Triangle;\n      fullTriangle.center = center;\n      fullTriangle.neighbours = neighbours.map(neighbourTriangle => ({\n        triangle: neighbourTriangle,\n        sharedPoints: intersection(triangle.points, neighbourTriangle.points),\n      })) as TriangleNeighbour[];\n      fullTriangle.ix = ix;\n      fullTriangle.iy = iy;\n\n      trianglesById.set(fullTriangle.id, fullTriangle);\n    }\n  }\n\n  return trianglesById;\n}\n","export function assert(value: unknown, message?: string): asserts value {\n  if (!value) {\n    throw new Error(message || 'Assertion Error');\n  }\n}\n","import { canvas, width, height } from './canvas';\nimport Vector2 from '../lib/geom/Vector2';\nimport {\n  sample,\n  times,\n  randomInt,\n  frameLoop,\n  uniq,\n  random,\n  lerp,\n  mapRange,\n} from '../lib/utils';\nimport createTriangleGrid, { Triangle } from '../lib/createTriangleGrid';\nimport { assert } from '../lib/assert';\n\nconst TILE_SIZE = 15;\nconst ARC_LENGTH = (Math.PI * TILE_SIZE) / 6;\n\nconst trianglesById = createTriangleGrid(TILE_SIZE, width, height);\n\nconst occupied = new Set<Triangle>();\ntype Snake = {\n  triangles: Array<Triangle>;\n};\n\nconst makeSnake = () => {\n  const triangles: Array<Triangle> = [];\n  let triangle = sample(\n    [...trianglesById.values()].filter(t => !occupied.has(t)),\n  );\n  // if (!triangle) return;\n\n  // const targetLength = mapRange(\n  //   Math.min(width, height) * 0.4,\n  //   0,\n  //   2,\n  //   35,\n  //   triangle.center.distanceTo(new Vector2(width / 2, height / 2)),\n  // );\n  const targetLength = 40;\n  let neighbours = [...trianglesById.values()];\n  for (let i = 0; i < targetLength; i++) {\n    triangles.push(triangle);\n    occupied.add(triangle);\n    neighbours = triangle.neighbours.map(n => n.triangle);\n\n    const availableNeighbours = neighbours.filter(\n      neighbour => !occupied.has(neighbour),\n    );\n    if (!availableNeighbours.length) break;\n    triangle = sample(availableNeighbours);\n  }\n\n  // if (triangles.length < 2) continue;\n  return {\n    triangles,\n  };\n};\nconst snakes: Snake[] = [];\n\nconst snakeCount = (width / TILE_SIZE) * (height / TILE_SIZE) * 0.01;\nconsole.log({ snakeCount });\nfor (let si = 0; si < snakeCount; si++) {\n  snakes.push(makeSnake());\n}\n\ncanvas.clear('black');\n\nfor (const { triangles } of snakes) {\n  canvas.beginPath();\n  for (let i = 0; i < triangles.length; i++) {\n    const triangle = triangles[i];\n    const last: Triangle | undefined = triangles[i - 1];\n    const next: Triangle | undefined = triangles[i + 1];\n\n    if (!last) {\n      canvas.moveTo(triangle.center);\n    } else if (!next) {\n      assert(last);\n      // canvas.moveTo(Vector2.average(getSharedPoints(triangle, last)));\n      canvas.lineTo(triangle.center);\n    } else {\n      // canvas.moveTo(Vector2.average(getSharedPoints(triangle, last)));\n      canvas.arcTo(triangle.center, next.center, TILE_SIZE / 2 - 0.5);\n    }\n  }\n  canvas.stroke({\n    strokeWidth: TILE_SIZE / 3 - 0.5,\n    stroke: 'white',\n    strokeCap: 'round',\n  });\n}\n"]}