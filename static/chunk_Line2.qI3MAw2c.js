import{a as r,_ as o}from"./chunk_utils.FedKR4y8.js";import{V as n}from"./chunk_Vector2.1Qo3QJ05.js";const a=l=>l===1/0||l===-1/0;class s{static fromSlopeAndDisplacement(t,i){r(!a(t),"cannot create vertical line from displacement");const e=new n(0,i),c=new n(1,t+i);return new s(e,c)}static fromSlopeAndPoint(t,i){if(a(t))return new s(i,new n(i.x,i.y+1));const e=i.y-i.x*t;return s.fromSlopeAndDisplacement(t,e)}static fromAngleAndPoint(t,i){const e=Math.tan(t);return s.fromSlopeAndPoint(e,i)}constructor(t,i){this.start=t,this.end=i}getDelta(){return this.end.sub(this.start)}get slope(){return(this.end.y-this.start.y)/(this.end.x-this.start.x)}get angle(){return this.start.angleTo(this.end)}get length(){return this.start.distanceTo(this.end)}get displacement(){return this.start.y-this.start.x*this.slope}get isVertical(){return a(this.slope)}get verticalX(){return r(this.isVertical,"verticalX is not defined on non vertical lines"),this.start.x}get perpendicularSlope(){return this.isVertical?0:-1/this.slope}isParallelTo(t){return this.isVertical&&t.isVertical||this.slope===t.slope}perpendicularLineThroughPoint(t){return s.fromSlopeAndPoint(this.perpendicularSlope,t)}pointAtIntersectionWith(t){r(!this.isParallelTo(t),"parallel lines do not intersect");let i;this.isVertical?i=this.verticalX:t.isVertical?i=t.verticalX:i=(this.displacement-t.displacement)/(t.slope-this.slope);const e=this.isVertical?t.slope*i+t.displacement:this.slope*i+this.displacement;return new n(i,e)}pointAtIntersectionConstrained(t){if(this.isParallelTo(t))return;const i=this.pointAtIntersectionWith(t);if(this.isPointWithinBounds(i)&&t.isPointWithinBounds(i))return i}midpoint(){return new n((this.start.x+this.end.x)/2,(this.start.y+this.end.y)/2)}isPointWithinBounds({x:t,y:i}){return o(this.start.x,this.end.x,t)&&o(this.start.y,this.end.y,i)}}export{s as L};
