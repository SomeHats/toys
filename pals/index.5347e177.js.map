{"mappings":"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","sources":["src/pals/PalController.ts","src/lib/scene/Component.ts","src/pals/PalGeom.ts","src/pals/PalLegGeom.ts","src/pals/PalRenderer.ts","src/lib/canvasShapeHelpers.ts","src/lib/geom/StraightPathSegment.ts","src/lib/geom/CirclePathSegment.ts","src/pals/PalWalkAnimationController.ts","src/pals/PalConfig.ts","src/pals/colors.ts"],"sourcesContent":["import Component from '../lib/scene/Component';\nimport { constrain, normalizeAngle } from '../lib/utils';\nimport Vector2 from '../lib/geom/Vector2';\nimport Entity from '../lib/scene/Entity';\n\nconst MAX_SPEED = 80;\nconst ACCELERATION = 200;\nconst DECELERATION = 200;\n\nexport class PalControlData extends Component {\n  speed: number = 0;\n  position: Vector2;\n  heading: number = 0;\n  headingVelocity: number = 0;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.position = position;\n  }\n\n  getVelocity(): Vector2 {\n    return this.getHeadingVec().scale(this.speed);\n  }\n\n  private getHeadingVec(): Vector2 {\n    return Vector2.fromPolar(this.heading, 1);\n  }\n}\n\nexport class PalTargetController extends Component {\n  private data: PalControlData;\n  private target: Vector2;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.target = position;\n    this.data = entity.addComponent(PalControlData, position);\n  }\n\n  setTarget(newTarget: Vector2) {\n    this.target = newTarget;\n  }\n\n  update(dtMilliseconds: number) {\n    const dtSeconds = dtMilliseconds / 1000;\n    const angleToTarget = this.data.position.angleTo(this.target);\n\n    const distance = this.target.distanceTo(this.data.position);\n    if (distance > 15) {\n      this.accelerate(ACCELERATION, dtSeconds);\n    } else {\n      this.accelerate(-DECELERATION, dtSeconds);\n    }\n\n    if (distance > 10) {\n      const angleDelta = normalizeAngle(angleToTarget - this.data.heading);\n      const lastHeading = this.data.heading;\n      this.data.heading += angleDelta / 10;\n      this.data.headingVelocity =\n        normalizeAngle(this.data.heading - lastHeading) / dtSeconds;\n    } else {\n      this.data.headingVelocity = 0;\n    }\n  }\n\n  private accelerate(amt: number, dtSeconds: number) {\n    const lastSpeed = this.data.speed;\n    this.data.speed = constrain(\n      0,\n      MAX_SPEED,\n      this.data.speed + amt * dtSeconds,\n    );\n    const avgSpeed = (lastSpeed + this.data.speed) / 2;\n    this.data.position = this.data.position.add(\n      Vector2.fromPolar(this.data.heading, avgSpeed * dtSeconds),\n    );\n  }\n}\n\nexport class PalAbsoluteController extends Component {\n  private data: PalControlData;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.data = entity.addComponent(PalControlData, position);\n  }\n\n  setPosition(position: Vector2, heading: number, dtSeconds: number) {\n    const lastPosition = this.data.position;\n    const lastHeading = this.data.heading;\n\n    this.data.heading = heading;\n    this.data.headingVelocity =\n      normalizeAngle(this.data.heading - lastHeading) / dtSeconds;\n    this.data.speed = lastPosition.distanceTo(position) / dtSeconds;\n    this.data.position = position;\n  }\n}\n","import Entity from './Entity';\nimport Scene from './Scene';\n\nexport default abstract class Component {\n  readonly entity: Entity;\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  onRemove() {}\n\n  onAddedToScene(scene: Scene) {}\n\n  onRemovedFromScene(scene: Scene) {}\n\n  beforeUpdate(delta: number) {}\n\n  update(delta: number) {}\n\n  afterUpdate(delta: number) {}\n\n  beforeDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  draw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  afterDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  getScene(): Scene {\n    return this.entity.getScene();\n  }\n}\n","import Component from '../lib/scene/Component';\nimport Entity from '../lib/scene/Entity';\nimport Circle from '../lib/geom/Circle';\nimport { PalControlData } from './PalController';\nimport { shuffle, flatten, times, lerp } from '../lib/utils';\nimport { PalConfig } from './PalConfig';\nimport PalLegGeom, { PalLegGeomUpdate } from './PalLegGeom';\nimport { assert } from '../lib/assert';\n\nconst HALF_PI = Math.PI / 2;\n\nexport type PalGeomUpdate = {\n  bobAmount: number;\n  legs: Array<PalLegGeomUpdate>;\n};\n\nexport interface PalAnimationController {\n  update(\n    dtMilliseconds: number,\n    controlData: PalControlData,\n    legs: Array<PalLegGeom>,\n  ): PalGeomUpdate;\n}\n\nexport default class PalGeom extends Component {\n  private controlData: PalControlData;\n  legs: Array<PalLegGeom>;\n  private animationController: PalAnimationController | null = null;\n  private bobAmount: number = 0;\n\n  constructor(entity: Entity, private config: PalConfig) {\n    super(entity);\n    this.controlData = entity.getComponent(PalControlData);\n    this.legs = shuffle(\n      flatten(\n        times(config.legPairs, (n) => {\n          const progress = (n + 1) / (config.legPairs + 1);\n          return [\n            new PalLegGeom(\n              this.controlData,\n              this,\n              config,\n              lerp(HALF_PI - 1, HALF_PI + 1, progress),\n            ),\n            new PalLegGeom(\n              this.controlData,\n              this,\n              config,\n              lerp(-HALF_PI + 1, -HALF_PI - 1, progress),\n            ),\n          ];\n        }),\n      ),\n    );\n  }\n\n  setAnimationController(animationController: PalAnimationController) {\n    this.animationController = animationController;\n  }\n\n  update(dtMilliseconds: number) {\n    if (this.animationController) {\n      const update = this.animationController.update(\n        dtMilliseconds,\n        this.controlData,\n        this.legs,\n      );\n      this.bobAmount = update.bobAmount;\n\n      assert(update.legs.length === this.legs.length);\n      this.legs.forEach((leg, i) => leg.update(update.legs[i]));\n    }\n  }\n\n  getBod(): Circle {\n    const bob = this.config.bodBob * this.bobAmount;\n\n    return Circle.create(\n      this.controlData.position.x,\n      this.controlData.position.y - this.config.bodHeight - bob,\n      this.config.radius,\n    );\n  }\n}\n","import PalGeom from './PalGeom';\nimport { PalConfig } from './PalConfig';\nimport Vector2 from '../lib/geom/Vector2';\nimport { PalControlData } from './PalController';\nimport { lerp } from '../lib/utils';\n\nconst getLegRadius = ({ radius, hipHeight, legWidth }: PalConfig) =>\n  Math.sqrt(radius * radius - (radius - hipHeight) * (radius - hipHeight)) -\n  legWidth;\n\nexport type PalLegGeomUpdate = {\n  footXY: Vector2;\n  footProjectionOrigin: Vector2;\n  liftAmount: number;\n};\n\nexport default class PalLegGeom {\n  hipRadius: number;\n  kneeRadius: number;\n  floorRadius: number;\n\n  footXY: Vector2;\n  footOrigin: Vector2;\n  liftAmount: number = 0;\n\n  constructor(\n    private palData: PalControlData,\n    private palGeom: PalGeom,\n    private config: PalConfig,\n    public angleOffset: number,\n  ) {\n    this.hipRadius = getLegRadius(config);\n    this.kneeRadius = getLegRadius(config) * config.kneeScale;\n    this.floorRadius = getLegRadius(config);\n\n    this.footXY = this.getIdealFootRestingXY();\n    this.footOrigin = this.getIdealFootRestingXY();\n  }\n\n  update(update: PalLegGeomUpdate) {\n    this.footXY = update.footXY;\n    this.footOrigin = update.footProjectionOrigin;\n    this.liftAmount = update.liftAmount;\n  }\n\n  getIdealFootRestingXY(): Vector2 {\n    return Vector2.fromPolar(\n      this.palData.heading + this.angleOffset,\n      this.floorRadius,\n    ).add(this.palData.position);\n  }\n\n  getFootXY(): Vector2 {\n    return this.footXY;\n  }\n\n  getFootZ(): number {\n    return lerp(0, this.getHipZ() * this.config.legMaxLift, this.liftAmount);\n  }\n\n  getFootOrigin(): Vector2 {\n    return this.footOrigin;\n  }\n\n  getKneeXY(): Vector2 {\n    return this.palData.position\n      .add(\n        Vector2.fromPolar(\n          this.palData.heading + this.angleOffset,\n          this.kneeRadius,\n        ),\n      )\n      .add(\n        Vector2.fromPolar(\n          this.palData.heading,\n          this.liftAmount * this.config.kneeMaxOut,\n        ),\n      );\n  }\n\n  getKneeZ(): number {\n    return (this.getFootZ() + this.getHipZ()) / 2;\n  }\n\n  getKneeOrigin(): Vector2 {\n    return this.getHipOrigin().lerp(this.getFootOrigin(), 0.5);\n  }\n\n  getHipXY(): Vector2 {\n    return this.palData.position.add(\n      Vector2.fromPolar(\n        this.palData.heading + this.angleOffset,\n        this.hipRadius,\n      ),\n    );\n    // return this._hipEllipse\n    //   .pointOnCircumference(this.angle)\n    //   .add(this.palData.bod.center);\n  }\n\n  getHipZ(): number {\n    const bod = this.palGeom.getBod();\n    return (\n      this.palData.position.y -\n      bod.center.y -\n      (bod.radius - this.config.hipHeight)\n    );\n  }\n\n  getHipOrigin(): Vector2 {\n    return this.palData.position;\n  }\n}\n","import Component from '../lib/scene/Component';\nimport { PalControlData } from './PalController';\nimport Entity from '../lib/scene/Entity';\nimport PalGeom from './PalGeom';\nimport * as ShapeHelpers from '../lib/canvasShapeHelpers';\nimport { normalizeAngle, constrain } from '../lib/utils';\nimport Circle from '../lib/geom/Circle';\nimport { PalConfig } from './PalConfig';\nimport PalLegGeom from './PalLegGeom';\nimport Vector2 from '../lib/geom/Vector2';\n\nconst Y_SCALE = 0.3;\nconst HALF_PI = Math.PI / 2;\n\nexport default class PalRenderer extends Component {\n  private data: PalControlData;\n  private geom: PalGeom;\n\n  constructor(entity: Entity, private config: PalConfig) {\n    super(entity);\n    this.data = entity.getComponent(PalControlData);\n    this.geom = entity.getComponent(PalGeom);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const heading = normalizeAngle(this.data.heading);\n\n    ctx.setLineDash([]);\n    ctx.beginPath();\n\n    const bod = this.geom.getBod();\n    ctx.ellipse(\n      this.data.position.x,\n      this.data.position.y,\n      bod.radius * 0.8,\n      bod.radius * 0.8 * 0.3,\n      0,\n      0,\n      2 * Math.PI,\n    );\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n    ctx.fill();\n\n    this.geom.legs\n      .filter(l => normalizeAngle(l.angleOffset + heading) < 0)\n      .forEach(leg => this.drawLeg(ctx, leg));\n    this.geom.legs\n      .filter(l => normalizeAngle(l.angleOffset + heading) >= 0)\n      .forEach(leg => this.drawLeg(ctx, leg));\n    this.drawBod(ctx, bod);\n  }\n\n  private drawLeg(ctx: CanvasRenderingContext2D, leg: PalLegGeom) {\n    ctx.beginPath();\n\n    const angle = this.data.heading + leg.angleOffset;\n\n    const colorDarkenAmount = constrain(\n      0,\n      1,\n      Math.abs(normalizeAngle(-HALF_PI - angle) / HALF_PI),\n    );\n    const legColor = this.config.color.darken(\n      0.2 * (1 - colorDarkenAmount * colorDarkenAmount),\n    );\n\n    const hip = this.projectZ(\n      leg.getHipXY(),\n      leg.getHipZ(),\n      leg.getHipOrigin(),\n    );\n    const knee = this.projectZ(\n      leg.getKneeXY(),\n      leg.getKneeZ(),\n      leg.getKneeOrigin(),\n    );\n    const foot = this.projectZ(\n      leg.getFootXY(),\n      leg.getFootZ(),\n      leg.getFootOrigin(),\n    );\n\n    ctx.moveTo(hip.x, hip.y);\n    ctx.quadraticCurveTo(knee.x, knee.y, foot.x, foot.y);\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = legColor.toString();\n    ctx.lineWidth = this.config.legWidth;\n    ctx.stroke();\n  }\n\n  private drawBod(ctx: CanvasRenderingContext2D, bod: Circle) {\n    ctx.save();\n    ctx.beginPath();\n    ShapeHelpers.circle(ctx, bod.center.x, bod.center.y, this.config.radius);\n    ctx.fillStyle = this.config.color.toString();\n    ctx.fill();\n    ctx.clip();\n\n    const faceX =\n      (normalizeAngle(HALF_PI - this.data.heading) / HALF_PI) *\n      this.config.radius;\n\n    // EYES\n    ctx.beginPath();\n    ShapeHelpers.circle(\n      ctx,\n      faceX + bod.center.x + this.config.eyeX,\n      bod.center.y - this.config.eyeY,\n      this.config.eyeRadius,\n    );\n    ShapeHelpers.circle(\n      ctx,\n      faceX + bod.center.x - this.config.eyeX,\n      bod.center.y - this.config.eyeY,\n      this.config.eyeRadius,\n    );\n    ctx.fillStyle = this.config.color.darken(0.5).toString();\n    ctx.fill();\n\n    // MOUTH\n    ctx.beginPath();\n    ctx.moveTo(\n      faceX + bod.center.x - this.config.mouthWidth,\n      bod.center.y - this.config.mouthY,\n    );\n    ctx.quadraticCurveTo(\n      faceX + bod.center.x,\n      bod.center.y - this.config.mouthY + this.config.mouthSmile,\n      faceX + bod.center.x + this.config.mouthWidth,\n      bod.center.y - this.config.mouthY,\n    );\n    ctx.lineWidth = this.config.mouthThickness;\n    ctx.strokeStyle = this.config.color.darken(0.5).toString();\n    ctx.stroke();\n\n    // BUTT\n    ctx.beginPath();\n    this.makeButtLine(ctx, bod, faceX + this.config.radius * 2);\n    this.makeButtLine(ctx, bod, faceX - this.config.radius * 2);\n    ctx.lineWidth = this.config.buttThickness;\n    ctx.strokeStyle = this.config.color.darken(0.3).toString();\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  private makeButtLine(\n    ctx: CanvasRenderingContext2D,\n    bod: Circle,\n    buttX: number,\n  ) {\n    ctx.moveTo(buttX * 1.6 + bod.center.x, bod.center.y + this.config.buttTop);\n    ctx.quadraticCurveTo(\n      buttX * 1.7 + bod.center.x,\n      bod.center.y + (this.config.buttTop + this.config.buttBottom) * 0.65,\n      buttX + bod.center.x,\n      bod.center.y + this.config.buttBottom,\n    );\n  }\n\n  private projectZ(xy: Vector2, z: number, origin: Vector2): Vector2 {\n    return new Vector2(xy.x, origin.y - z + (xy.y - origin.y) * Y_SCALE);\n  }\n}\n","// @flow\nimport Path from './geom/Path';\nimport StraightPathSegment from './geom/StraightPathSegment';\nimport CirclePathSegment from './geom/CirclePathSegment';\n\nexport function circle(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  radius: number,\n) {\n  ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n}\n\nexport function path(ctx: CanvasRenderingContext2D, path: Path) {\n  if (path.segments.length) {\n    ctx.moveTo(path.segments[0].getStart().x, path.segments[0].getStart().y);\n  }\n\n  for (const segment of path.segments) {\n    if (segment instanceof StraightPathSegment) {\n      ctx.lineTo(segment.getEnd().x, segment.getEnd().y);\n    } else if (segment instanceof CirclePathSegment) {\n      ctx.arc(\n        segment.circle.center.x,\n        segment.circle.center.y,\n        segment.circle.radius,\n        segment.startAngle,\n        segment.endAngle,\n        segment.isAnticlockwise,\n      );\n    } else {\n      throw new Error(`Unknown path segment type: ${segment.toString()}`);\n    }\n  }\n}\n","// @flow\nimport { constrain } from '../utils';\nimport Vector2 from './Vector2';\nimport { PathSegment } from './Path';\nimport Line2 from './Line2';\n\nexport default class StraightPathSegment implements PathSegment {\n  readonly line: Line2;\n  private readonly delta: Vector2;\n\n  constructor(start: Vector2, end: Vector2) {\n    this.line = new Line2(start, end);\n    this.delta = this.line.getDelta();\n    Object.freeze(this);\n  }\n\n  getStart(): Vector2 {\n    return this.line.start;\n  }\n\n  getEnd(): Vector2 {\n    return this.line.end;\n  }\n\n  getDelta(): Vector2 {\n    return this.delta;\n  }\n\n  getLength(): number {\n    return this.delta.magnitude;\n  }\n\n  get angle(): number {\n    return this.delta.angle;\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const constrainedPosition = constrain(0, this.getLength(), position);\n    return this.delta.withMagnitude(constrainedPosition).add(this.line.start);\n  }\n\n  getAngleAtPosition(): number {\n    return this.delta.angle;\n  }\n}\n","// @flow\nimport { constrain, mapRange } from '../utils';\nimport Vector2 from './Vector2';\nimport Circle from './Circle';\nimport { PathSegment } from './Path';\n\nexport default class CirclePathSegment implements PathSegment {\n  readonly circle: Circle;\n  readonly startAngle: number;\n  readonly endAngle: number;\n\n  constructor(\n    center: Vector2,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n  ) {\n    this.circle = Circle.create(center.x, center.y, radius);\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    Object.freeze(this);\n  }\n\n  getStart(): Vector2 {\n    return this.circle.pointOnCircumference(this.startAngle);\n  }\n\n  getEnd(): Vector2 {\n    return this.circle.pointOnCircumference(this.endAngle);\n  }\n\n  get angleDifference(): number {\n    return Math.atan2(\n      Math.sin(this.endAngle - this.startAngle),\n      Math.cos(this.endAngle - this.startAngle),\n    );\n  }\n\n  getLength(): number {\n    const proportion = Math.abs(this.angleDifference) / (Math.PI * 2);\n    return this.circle.circumference * proportion;\n  }\n\n  get isAnticlockwise(): boolean {\n    return this.angleDifference < 0;\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const angle = mapRange(\n      0,\n      this.getLength(),\n      this.startAngle,\n      this.startAngle + this.angleDifference,\n      constrain(0, this.getLength(), position),\n    );\n    return this.circle.pointOnCircumference(angle);\n  }\n\n  getAngleAtPosition(position: number): number {\n    if (this.isAnticlockwise) {\n      return (\n        mapRange(\n          0,\n          this.getLength(),\n          this.startAngle,\n          this.startAngle + this.angleDifference,\n          constrain(0, this.getLength(), position),\n        ) -\n        Math.PI / 2\n      );\n    } else {\n      return (\n        mapRange(\n          0,\n          this.getLength(),\n          this.startAngle,\n          this.startAngle + this.angleDifference,\n          constrain(0, this.getLength(), position),\n        ) +\n        Math.PI / 2\n      );\n    }\n  }\n}\n","import { PalAnimationController, PalGeomUpdate } from './PalGeom';\nimport { PalControlData } from './PalController';\nimport PalLegGeom, { PalLegGeomUpdate } from './PalLegGeom';\nimport Vector2 from '../lib/geom/Vector2';\nimport { PalConfig } from './PalConfig';\nimport { constrain, mapRange } from '../lib/utils';\nimport { assert } from '../lib/assert';\n\ntype LegState = {\n  lastFootOnFloorXY: Vector2;\n  lastFootOnFloorPalPosition: Vector2;\n  stepProgress: number;\n  restTimer: number;\n  currentStepMaxLift: number;\n};\n\nfunction isStepping({ stepProgress }: LegState): boolean {\n  return stepProgress > 0;\n}\n\nfunction isResting({ restTimer }: LegState): boolean {\n  return restTimer > 0;\n}\n\nexport default class PalWalkAnimationController\n  implements PalAnimationController {\n  private legStates = new Map<PalLegGeom, LegState>();\n\n  constructor(private config: PalConfig) {}\n\n  update(\n    dtMilliseconds: number,\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n  ): PalGeomUpdate {\n    const dtSeconds = dtMilliseconds / 1000;\n\n    for (const leg of legs) {\n      this.updateLegState(dtSeconds, pal, legs, leg);\n    }\n    const legUpdates = legs.map(leg => this.getLegUpdate(pal, leg));\n\n    const totalLift = legUpdates.reduce(\n      (sum, update) => sum + update.liftAmount,\n      0,\n    );\n    const avgLift = totalLift / legs.length;\n\n    return {\n      bobAmount: avgLift,\n      legs: legUpdates,\n    };\n  }\n\n  private canLiftLeg(\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n    leg: PalLegGeom,\n  ): boolean {\n    assert(legs.includes(leg), 'whos leg even is this');\n    const enoughLegsOnFloor =\n      legs.filter(l => l !== leg && !isStepping(this.getLegState(pal, leg)))\n        .length > Math.floor(Math.log(legs.length));\n\n    const anyStepsJustStarted = legs.some(leg => {\n      const state = this.getLegState(pal, leg);\n      return (\n        state.stepProgress > 0 && state.stepProgress < 1 / (legs.length / 2)\n      );\n    });\n\n    return enoughLegsOnFloor && !anyStepsJustStarted;\n  }\n\n  private updateLegState(\n    dtSeconds: number,\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n    leg: PalLegGeom,\n  ) {\n    const state = this.getLegState(pal, leg);\n\n    state.restTimer = constrain(\n      0,\n      this.config.stepRestDuration,\n      state.restTimer - dtSeconds,\n    );\n    if (isResting(state)) return;\n\n    if (isStepping(state)) {\n      state.stepProgress = constrain(\n        0,\n        1,\n        state.stepProgress + dtSeconds / this.config.stepDuration,\n      );\n\n      if (state.stepProgress === 1) {\n        state.lastFootOnFloorXY = this.getFootXY(pal, leg, state);\n        state.lastFootOnFloorPalPosition = pal.position;\n        state.stepProgress = 0;\n        state.restTimer = this.config.stepDuration;\n      }\n    } else {\n      const footLeanDistance = leg\n        .getFootXY()\n        .distanceTo(leg.getIdealFootRestingXY());\n      if (\n        footLeanDistance > this.config.stepThreshold &&\n        this.canLiftLeg(pal, legs, leg)\n      ) {\n        state.currentStepMaxLift = constrain(\n          0,\n          1,\n          mapRange(\n            this.config.stepThreshold,\n            this.config.fullStepDistance,\n            0.1,\n            1,\n            footLeanDistance,\n          ),\n        );\n        state.stepProgress = constrain(\n          0,\n          1,\n          state.stepProgress + dtSeconds / this.config.stepDuration,\n        );\n      }\n    }\n  }\n\n  private getInitialLegState(pal: PalControlData, leg: PalLegGeom): LegState {\n    return {\n      lastFootOnFloorXY: leg.getIdealFootRestingXY(),\n      lastFootOnFloorPalPosition: pal.position,\n      stepProgress: 0,\n      restTimer: 0,\n      currentStepMaxLift: 1,\n    };\n  }\n\n  private getLegState(pal: PalControlData, leg: PalLegGeom): LegState {\n    const state = this.legStates.get(leg);\n    if (state) {\n      return state;\n    }\n\n    const initialState = this.getInitialLegState(pal, leg);\n    this.legStates.set(leg, initialState);\n    return initialState;\n  }\n\n  private getLegUpdate(pal: PalControlData, leg: PalLegGeom): PalLegGeomUpdate {\n    const state = this.getLegState(pal, leg);\n    return {\n      footXY: this.getFootXY(pal, leg, state),\n      footProjectionOrigin: this.getFootOrigin(pal, leg, state),\n      liftAmount: this.getLegLiftAmount(state),\n    };\n  }\n\n  private getFootXY(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    if (isStepping(state)) {\n      const start = state.lastFootOnFloorXY;\n      const target = this.getPredictedIdealFootXYAtEndOfOfStep(pal, leg, state);\n      return start.lerp(target, state.stepProgress);\n    }\n\n    return state.lastFootOnFloorXY;\n  }\n\n  private getFootOrigin(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    if (isStepping(state)) {\n      return state.lastFootOnFloorPalPosition.lerp(\n        pal.position,\n        state.stepProgress,\n      );\n    }\n\n    return state.lastFootOnFloorPalPosition;\n  }\n\n  private getPredictedIdealFootXYAtEndOfOfStep(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    const timeRemaining = (1.4 - state.stepProgress) * this.config.stepDuration;\n\n    const predictedPosition = pal\n      .getVelocity()\n      .scale(timeRemaining)\n      .add(pal.position);\n\n    const predictedHeading = pal.heading + pal.headingVelocity * timeRemaining;\n\n    return Vector2.fromPolar(\n      predictedHeading + leg.angleOffset,\n      leg.floorRadius,\n    ).add(predictedPosition);\n  }\n\n  private getLegLiftAmount({\n    stepProgress,\n    currentStepMaxLift,\n  }: LegState): number {\n    return Math.sin(stepProgress * Math.PI) * currentStepMaxLift;\n  }\n}\n","import Color from 'color';\nimport { varyRelative, varyAbsolute, random, randomInt } from '../lib/utils';\nimport { BLUE } from './colors';\n\nexport type PalConfig = {\n  radius: number;\n  bodHeight: number;\n  bodBob: number;\n  eyeY: number;\n  eyeX: number;\n  eyeRadius: number;\n  mouthThickness: number;\n  mouthY: number;\n  mouthWidth: number;\n  mouthSmile: number;\n  buttTop: number;\n  buttBottom: number;\n  buttThickness: number;\n  color: Color;\n  hipHeight: number;\n  kneeScale: number;\n  legMaxLift: number;\n  kneeMaxOut: number;\n  stepDuration: number;\n  stepRestDuration: number;\n  stepThreshold: number;\n  fullStepDistance: number;\n  legWidth: number;\n  legPairs: number;\n};\n\nexport const classicPalConfig: PalConfig = {\n  radius: 14,\n  bodHeight: 25,\n  bodBob: 15,\n  eyeY: 6,\n  eyeX: 5,\n  eyeRadius: 2,\n  mouthThickness: 2,\n  mouthY: 2,\n  mouthWidth: 8,\n  mouthSmile: 4,\n  buttTop: 6,\n  buttBottom: 12,\n  buttThickness: 1.4,\n  color: BLUE.lighten(0.2),\n  hipHeight: 10,\n  kneeScale: 1.3,\n  legMaxLift: 0.3,\n  kneeMaxOut: 14,\n  stepDuration: 0.2,\n  stepRestDuration: 0.2,\n  stepThreshold: 0.2,\n  fullStepDistance: 20,\n  legWidth: 4,\n  legPairs: 1,\n};\n\nexport const generateRandomPalConfig = (): PalConfig => {\n  const radius = varyRelative(14, 0.2);\n  const hipHeight = varyRelative(radius * 0.7, 0.3);\n  const bodHeight = varyRelative(radius * 2, 0.3);\n  const legLength = bodHeight - (radius - hipHeight); // typical: 24\n\n  return {\n    radius,\n    bodHeight,\n    bodBob: varyRelative(radius, 0.2),\n    eyeY: varyRelative(radius * 0.5, 0.2),\n    eyeX: varyRelative(radius * 0.4, 0.3),\n    eyeRadius: varyRelative(radius * 0.15, 0.4),\n    mouthThickness: varyRelative(radius * 0.15, 0.4),\n    mouthY: varyAbsolute(0, radius * 0.2),\n    mouthWidth: varyRelative(radius * 0.5, 0.3),\n    mouthSmile: varyRelative(radius * 0.3, 0.3),\n    buttTop: varyRelative(radius * 0.4, 0.2),\n    buttBottom: varyRelative(radius * 0.85, 0.15),\n    buttThickness: varyRelative(radius * 0.1, 0.5),\n    color: BLUE.lighten(random(-0.2, 0.2))\n      .saturate(random(-0.2, 0.2))\n      .rotate(random(-10, 10)),\n    hipHeight,\n    kneeScale: varyAbsolute(1.3, 0.3),\n    legMaxLift: random(0.2, 0.5),\n    kneeMaxOut: varyRelative(legLength * 0.6, 0.4),\n    stepDuration: varyRelative(legLength * 0.01, 0.4),\n    stepRestDuration: varyRelative(legLength * 0.0083, 0.4),\n    stepThreshold: varyRelative(legLength * 0.01, 0.4),\n    fullStepDistance: varyRelative(legLength * 0.7, 0.4),\n    legWidth: varyRelative(radius * 0.3, 0.4),\n    legPairs: randomInt(1, 4),\n  };\n};\n","import Color from 'color';\n\n// https://coolors.co/f8ffe5-06d6a0-1b9aaa-ef476f-ffc43d\nexport const LIGHT_BG = new Color('#F8FFE5');\nexport const TEAL = new Color('#06D6A0');\nexport const BLUE = new Color('#1B9AAA');\nexport const RED = new Color('#EF476F');\nexport const YELLOW = new Color('#FFC43D');\n"],"names":["$c8b7d6dbce52e1f1$export$af6a0ce085ef7632","$7ic2V","default","getVelocity","this","getHeadingVec","scale","speed","$6i1fg","fromPolar","heading","entity","position","super","headingVelocity","$c8b7d6dbce52e1f1$export$7f91c1b5fe2069f9","setTarget","newTarget","target","update","dtMilliseconds","dtSeconds","angleToTarget","data","angleTo","distance","distanceTo","accelerate","angleDelta","$96RKe","normalizeAngle","lastHeading","amt","lastSpeed","constrain","avgSpeed","add","entity1","position1","addComponent","$c8b7d6dbce52e1f1$export$ca0888e697597df4","setPosition","position2","dtSeconds1","lastPosition","entity2","position3","$faf860a16eac1785$export$2e2bcd8739ae039","onRemove","onAddedToScene","scene","onRemovedFromScene","scene1","beforeUpdate","delta","delta1","afterUpdate","delta2","beforeDraw","ctx","time","draw","ctx1","time1","afterDraw","ctx2","time2","getScene","$d65184152d4f8f04$var$HALF_PI","Math","PI","$d65184152d4f8f04$export$2e2bcd8739ae039","setAnimationController","animationController","controlData","legs","bobAmount","$87DYR","assert","length","forEach","leg","i","getBod","bob","config","bodBob","$4TER2","create","x","y","bodHeight","radius","getComponent","$19ECN","PalControlData","shuffle","flatten","times","legPairs","n","progress","$hPLAZ","lerp","$b235441dae11af26$var$getLegRadius","hipHeight","legWidth","sqrt","$b235441dae11af26$export$2e2bcd8739ae039","footXY","footOrigin","footProjectionOrigin","liftAmount","getIdealFootRestingXY","palData","angleOffset","floorRadius","getFootXY","getFootZ","getHipZ","legMaxLift","getFootOrigin","getKneeXY","kneeRadius","kneeMaxOut","getKneeZ","getKneeOrigin","getHipOrigin","getHipXY","hipRadius","bod","palGeom","center","kneeScale","$d890687abe7100ac$var$HALF_PI","$d890687abe7100ac$export$2e2bcd8739ae039","setLineDash","beginPath","geom","ellipse","fillStyle","fill","filter","l","drawLeg","drawBod","angle","colorDarkenAmount","abs","legColor","color","darken","hip","projectZ","knee","foot","moveTo","quadraticCurveTo","lineCap","strokeStyle","toString","lineWidth","stroke","save","$yW6N3","circle","clip","faceX","eyeX","eyeY","eyeRadius","mouthWidth","mouthY","mouthSmile","mouthThickness","makeButtLine","buttThickness","restore","ctx3","bod1","buttX","buttTop","buttBottom","xy","z","origin","$2dNNZ","$1109e93344f60944$export$e1d786d2f707b414","arc","$1109e93344f60944$export$bb654e07daaf8c3a","path","segments","getStart","segment","$b2Aev","lineTo","getEnd","$hKbPz","Error","startAngle","endAngle","isAnticlockwise","$fc03a60dcabadc87$export$2e2bcd8739ae039","line","start","end","getDelta","getLength","magnitude","getPointAtPosition","constrainedPosition","withMagnitude","getAngleAtPosition","$6Cnop","Object","freeze","$5ee2b6ddc809de64$export$2e2bcd8739ae039","pointOnCircumference","angleDifference","atan2","sin","cos","proportion","circumference","mapRange","$1c28b47185d2b680$var$isStepping","stepProgress","$1c28b47185d2b680$export$2e2bcd8739ae039","pal","leg1","updateLegState","legUpdates","map","getLegUpdate","reduce","sum","canLiftLeg","pal1","legs1","leg2","includes","enoughLegsOnFloor","getLegState","floor","log","anyStepsJustStarted","some","state","pal2","legs2","restTimer","stepRestDuration","$1c28b47185d2b680$var$isResting","stepDuration","lastFootOnFloorXY","lastFootOnFloorPalPosition","footLeanDistance","stepThreshold","currentStepMaxLift","fullStepDistance","getInitialLegState","pal3","leg3","pal4","leg4","legStates","get","initialState","set","pal5","leg5","getLegLiftAmount","pal6","leg6","getPredictedIdealFootXYAtEndOfOfStep","pal7","leg7","state1","pal8","leg8","state2","timeRemaining","predictedPosition","predictedHeading","Map","$c9KGA","BLUE","lighten","$37a3652ff8cf545d$export$8f4ea176c3dd079d","varyRelative","legLength","varyAbsolute","random","saturate","rotate","randomInt","$parcel$interopDefault","$0FWmF","$854a9ca44c0d4666$export$738c3b9a44c87ecc"],"version":3,"file":"index.5347e177.js.map"}