import{e as i,b as u,d as f}from"./chunk_utils.ferkvykK.js";import{V as h}from"./chunk_Vector2.Rt8uspPZ.js";import{u as p}from"./chunk_useResizeObserver.1WDF-mnU.js";import{r as d}from"./chunk_index.V9mWGg2B.js";const g=10,c=f,l=()=>null;class I{constructor({onTap:t=c,onDragStart:s=l}){this.state={type:"idle"},this.lastEvent=null,this.onTap=t,this.onDragStart=s}isGestureInProgress(){return this.state.type!=="idle"}onPointerDown(t,...s){var e;switch(this.lastEvent=t,this.state.type){case"idle":{const r=this.onDragStart(t,...s);if(!r)return;r.pointerCapture&&t.currentTarget.setPointerCapture(t.pointerId),r.couldBeTap??!0?this.state={type:"dragUnconfirmed",pointerId:t.pointerId,startPosition:h.fromEvent(t),dragHandler:r,args:s}:(this.state={type:"dragConfirmed",pointerId:t.pointerId,dragHandler:r},(e=r.onConfirm)==null||e.call(r,t));return}case"dragUnconfirmed":case"dragConfirmed":return;default:i(this.state)}}onPointerMove(t){var s,e;switch(this.lastEvent=t,this.state.type){case"idle":return;case"dragUnconfirmed":if(this.state.pointerId!==t.pointerId)return;this.state.dragHandler.onMove(t),this.state.startPosition.distanceTo(h.fromEvent(t))>=g&&((e=(s=this.state.dragHandler).onConfirm)==null||e.call(s,t),this.state={type:"dragConfirmed",pointerId:this.state.pointerId,dragHandler:this.state.dragHandler});return;case"dragConfirmed":if(this.state.pointerId!==t.pointerId)return;this.state.dragHandler.onMove(t);return;default:i(this.state)}}onPointerUp(t){switch(this.lastEvent=t,this.state.type){case"idle":return;case"dragUnconfirmed":if(this.state.pointerId!==t.pointerId)return;this.state.dragHandler.pointerCapture&&t.currentTarget.releasePointerCapture(t.pointerId),this.state.dragHandler.onCancel(t),this.onTap(t,...this.state.args),this.state={type:"idle"};return;case"dragConfirmed":if(this.state.pointerId!==t.pointerId)return;this.state.dragHandler.pointerCapture&&t.currentTarget.releasePointerCapture(t.pointerId),this.state.dragHandler.onEnd(t),this.state={type:"idle"};return;default:i(this.state)}}onPointerCancel(t){switch(this.lastEvent=t,this.state.type){case"idle":return;case"dragUnconfirmed":case"dragConfirmed":if(this.state.pointerId!==t.pointerId)return;this.state.dragHandler.pointerCapture&&t.currentTarget.releasePointerCapture(t.pointerId),this.state.dragHandler.onCancel(t),this.state={type:"idle"};return;default:i(this.state)}}cancel(){switch(this.state.type){case"idle":return;case"dragUnconfirmed":case"dragConfirmed":this.state.dragHandler.onCancel(u(this.lastEvent,"Assertion Error: this.lastEvent")),this.state={type:"idle"};return;default:i(this.state)}}end(){const t=u(this.lastEvent,"Assertion Error: this.lastEvent");switch(this.state.type){case"idle":return;case"dragUnconfirmed":this.state.dragHandler.onCancel(t),this.onTap(t,...this.state.args),this.state={type:"idle"};return;case"dragConfirmed":this.state.dragHandler.onEnd(t),this.state={type:"idle"};return;default:i(this.state)}}}function y(o){const t=p(o.onTap??c),s=p(o.onDragStart??l),[e]=d.useState(()=>new I({onTap:t,onDragStart:s})),[r,n]=d.useState(!1);return{isGestureInProgress:r,events:d.useMemo(()=>({onPointerDown:a=>{e.onPointerDown(a),n(e.isGestureInProgress())},onPointerMove:a=>{e.onPointerMove(a),n(e.isGestureInProgress())},onPointerUp:a=>{e.onPointerUp(a),n(e.isGestureInProgress())},onPointerCancel:a=>{e.onPointerCancel(a),n(e.isGestureInProgress())}}),[e])}}export{I as G,l as d,y as u};
