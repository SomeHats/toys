import{a as c,t as v,r as i}from"./chunk_assert.b5856491.js";import{A as _}from"./chunk_AABB.9bb52956.js";import{V as l}from"./chunk_Vector2.70a1782d.js";var p="attribute vec2 a_position;attribute vec4 a_color;varying vec4 v_color;uniform vec2 u_resolution;void main(){vec2 zeroToOne=a_position/u_resolution;vec2 zeroToTwo=zeroToOne*2.0;vec2 clipSpace=zeroToTwo-1.0;gl_Position=vec4(clipSpace*vec2(1,-1),0,1);v_color=a_color;}",R="precision mediump float;uniform vec4 u_color;varying vec4 v_color;void main(){gl_FragColor=v_color;}";const n=document.createElement("canvas");n.width=document.body.clientWidth*window.devicePixelRatio;n.height=document.body.clientHeight*window.devicePixelRatio;n.style.width=`${document.body.clientWidth}px`;n.style.height=`${document.body.clientHeight}px`;document.body.appendChild(n);const o=n.getContext("webgl");c(o,"Assertion Error: gl");var d=(e=>(e[e.Fragment=WebGLRenderingContext.FRAGMENT_SHADER]="Fragment",e[e.Vertex=WebGLRenderingContext.VERTEX_SHADER]="Vertex",e))(d||{});function f(e,a,t){const r=e.createShader(a);if(c(r,"Assertion Error: shader"),e.shaderSource(r,t),e.compileShader(r),!e.getShaderParameter(r,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(r)),e.deleteShader(r),new Error("compile error");return r}function b(e,a,t){const r=e.createProgram();if(c(r,"Assertion Error: program"),e.attachShader(r,a),e.attachShader(r,t),e.linkProgram(r),!e.getProgramParameter(r,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(r)),e.deleteProgram(r),"link error";return r}const w=f(o,d.Vertex,p),S=f(o,d.Fragment,R),s=b(o,w,S),h=o.getAttribLocation(s,"a_position");o.getAttribLocation(s,"a_color");const E=o.getUniformLocation(s,"u_resolution"),m=o.createBuffer();c(m,"Assertion Error: positionBuffer");const F=[10,20,80,20,10,30,10,30,80,20,80,30];o.bindBuffer(o.ARRAY_BUFFER,m);o.bufferData(o.ARRAY_BUFFER,new Float32Array(F),o.STATIC_DRAW);o.viewport(0,0,n.width,n.height);o.clearColor(0,0,0,0);o.clear(o.COLOR_BUFFER_BIT);o.useProgram(s);o.uniform2f(E,o.canvas.width,o.canvas.height);o.enableVertexAttribArray(h);o.bindBuffer(o.ARRAY_BUFFER,m);o.vertexAttribPointer(h,2,o.FLOAT,!1,0,0);const u=100,g=new Float32Array(u*12);function T(e,a,t){g.set([t.left,t.top,t.right,t.top,t.left,t.bottom,t.left,t.bottom,t.right,t.top,t.right,t.bottom],a*12)}v(u,e=>{const a=new _(new l(i(o.canvas.width),i(o.canvas.height)),new l(i(200),i(200)));T(o,e,a)});o.bufferData(o.ARRAY_BUFFER,g,o.STATIC_DRAW);o.drawArrays(o.TRIANGLES,0,u*6);
