{"mappings":"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","sources":["src/lib/createTriangleGrid.ts"],"sourcesContent":["import Vector2 from '../lib/geom/Vector2';\nimport { getId, compact, intersection } from '../lib/utils';\nimport Intersection from '../network/networkNodes/Intersection';\n\ntype TriangleGeom = [Vector2, Vector2, Vector2];\ntype IntermediateTriangle = {\n  id: string;\n  points: TriangleGeom;\n};\n\nexport type TriangleNeighbour = {\n  triangle: Triangle;\n  sharedPoints: [Vector2, Vector2];\n};\nexport type Triangle = {\n  id: string;\n  center: Vector2;\n  points: TriangleGeom;\n  neighbours: TriangleNeighbour[];\n  ix: number;\n  iy: number;\n};\n\nexport default function createTriangleGrid(\n  tileSize: number,\n  width: number,\n  height: number,\n): Map<string, Triangle> {\n  const tileHeight = (tileSize * Math.sqrt(3)) / 2;\n  const points: Vector2[][] = [];\n  const trianglePoints: IntermediateTriangle[][] = [];\n  for (let iy = 0; iy * tileHeight < height + tileHeight; iy++) {\n    const pointRow: Vector2[] = [];\n    points.push(pointRow);\n    const triangleRow: IntermediateTriangle[] = [];\n    trianglePoints.push(triangleRow);\n    for (let ix = 0; ix * tileSize < width + tileSize; ix++) {\n      const xOffset = iy % 2 === 0 ? -tileSize / 2 : 0;\n      const point = new Vector2(ix * tileSize + xOffset, iy * tileHeight);\n      pointRow.push(point);\n\n      if (iy !== 0 && ix !== 0) {\n        if (iy % 2 === 0) {\n          const triangle1: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy][ix - 1], points[iy - 1][ix - 1]],\n          };\n          const triangle2: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy - 1][ix - 1], points[iy - 1][ix]],\n          };\n          triangleRow.push(triangle1, triangle2);\n        } else if (points[iy - 1][ix + 1]) {\n          const triangle1: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy][ix - 1], points[iy - 1][ix]],\n          };\n          const triangle2: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy - 1][ix + 1], points[iy - 1][ix]],\n          };\n          triangleRow.push(triangle1, triangle2);\n        }\n      }\n    }\n  }\n\n  const trianglesById = new Map<string, Triangle>();\n  for (let iy = 0; iy < trianglePoints.length; iy++) {\n    for (let ix = 0; ix < trianglePoints[iy].length; ix++) {\n      const triangle = trianglePoints[iy][ix];\n      const center = Vector2.average(triangle.points);\n\n      const neighbours = compact(\n        ix % 2 === 0\n          ? iy % 2 === 0\n            ? [\n                // 2,2\n                trianglePoints[iy]?.[ix - 1],\n                trianglePoints[iy]?.[ix + 1],\n                trianglePoints[iy + 1]?.[ix - 1],\n              ]\n            : [\n                // 2,3\n                trianglePoints[iy]?.[ix - 1],\n                trianglePoints[iy]?.[ix + 1],\n                trianglePoints[iy + 1]?.[ix + 1],\n              ]\n          : iy % 2 === 0\n          ? [\n              // 3,2\n              trianglePoints[iy]?.[ix - 1],\n              trianglePoints[iy]?.[ix + 1],\n              trianglePoints[iy - 1]?.[ix - 1],\n            ]\n          : [\n              //3,3\n              trianglePoints[iy]?.[ix - 1],\n              trianglePoints[iy]?.[ix + 1],\n              trianglePoints[iy - 1]?.[ix + 1],\n            ],\n      );\n\n      const fullTriangle = triangle as Triangle;\n      fullTriangle.center = center;\n      fullTriangle.neighbours = neighbours.map(neighbourTriangle => ({\n        triangle: neighbourTriangle,\n        sharedPoints: intersection(triangle.points, neighbourTriangle.points),\n      })) as TriangleNeighbour[];\n      fullTriangle.ix = ix;\n      fullTriangle.iy = iy;\n\n      trianglesById.set(fullTriangle.id, fullTriangle);\n    }\n  }\n\n  return trianglesById;\n}\n"],"names":["tileSize","width","height","ref","ref1","ref2","ref3","ref4","ref5","ref6","ref7","ref8","ref9","ref10","ref11","triangle","trianglePoints","iy1","ix","center","$54lVR","default","average","points","neighbours","$8pNpe","compact","fullTriangle","map","neighbourTriangle","sharedPoints","intersection","iy","trianglesById","set","id","tileHeight","Math","sqrt","pointRow","push","triangleRow","xOffset","point","triangle1","getId","triangle2","Map","length","_loop"],"version":3,"file":"index.fec72272.js.map"}