{"mappings":"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","sources":["src/lib/scene/Scene.ts","src/lib/assert.ts","src/lib/scene/Entity.ts","src/lib/scene/SceneObject.ts","src/lib/scene/SortOrderProvider.ts","src/lib/scene/Component.ts"],"sourcesContent":["import { assert } from '../assert';\nimport SceneObject from './SceneObject';\nimport SceneSystem from './SceneSystem';\n\nconst speed = 1;\nconst scale = 1;\nconst repeatUpdate = 1;\n\ntype SystemClass<T extends SceneSystem = SceneSystem> = {\n  systemName: string;\n  new (): T;\n};\n\nexport default class Scene {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  private _scaleFactor: number;\n  private _children: SceneObject[] = [];\n  private _isPlaying: boolean = false;\n  private frameHandle: number | null = null;\n  private lastElapsedTime: number | null = null;\n  private systemsByClass = new Map<SystemClass<SceneSystem>, SceneSystem>();\n\n  constructor(width: number, height: number, scaleFactor: number = 1) {\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = width * scaleFactor;\n    this.canvas.height = height * scaleFactor;\n    this.canvas.style.width = `${width}px`;\n    this.canvas.style.height = `${height}px`;\n    const ctx = this.canvas.getContext('2d');\n    assert(ctx, 'ctx');\n    this.ctx = ctx;\n    this._scaleFactor = scaleFactor * scale;\n\n    this._setupVisiblityChange();\n  }\n\n  get width(): number {\n    return this.canvas.width / this._scaleFactor;\n  }\n\n  get height(): number {\n    return this.canvas.height / this._scaleFactor;\n  }\n\n  get scaleFactor(): number {\n    return this._scaleFactor;\n  }\n\n  get isPlaying(): boolean {\n    return this.frameHandle !== null && this._isPlaying;\n  }\n\n  set isPlaying(newValue: boolean) {\n    assert(\n      this.frameHandle !== null,\n      'cannot set isPlaying without calling start',\n    );\n    this._isPlaying = newValue;\n  }\n\n  get children(): SceneObject[] {\n    return this._children;\n  }\n\n  appendTo(element: HTMLElement) {\n    element.appendChild(this.canvas);\n  }\n\n  hasSystem(systemType: SystemClass): boolean {\n    return this.systemsByClass.has(systemType);\n  }\n\n  getSystem<T extends SceneSystem>(systemType: SystemClass<T>): T {\n    const system = this.systemsByClass.get(systemType);\n    assert(system, `system, ${systemType.systemName} not found`);\n    assert(system instanceof systemType, 'system is wrong instance type');\n    return system;\n  }\n\n  addSystem(system: SceneSystem) {\n    assert(\n      !this.hasSystem(system.constructor as any),\n      'only one system of each type allowed',\n    );\n    this.systemsByClass.set(system.constructor as any, system);\n    system.afterAddToScene(this);\n  }\n\n  removeSystem(systemType: SystemClass) {\n    const system = this.getSystem(systemType);\n    system.beforeRemoveFromScene(this);\n    this.systemsByClass.delete(systemType);\n  }\n\n  addChild(child: SceneObject) {\n    this._children.push(child);\n    child.onAddedToScene(this);\n  }\n\n  addChildBefore(targetChild: SceneObject, newChild: SceneObject) {\n    const index = this._children.indexOf(targetChild);\n    assert(index !== -1, 'target child must be present');\n\n    this.addChildAtIndex(index, newChild);\n  }\n\n  addChildAfter(targetChild: SceneObject, newChild: SceneObject) {\n    const index = this._children.indexOf(targetChild);\n    assert(index !== -1, 'target child must be present');\n\n    this.addChildAtIndex(index + 1, newChild);\n  }\n\n  addChildAtIndex(index: number, child: SceneObject) {\n    this._children.splice(index, 0, child);\n    child.onAddedToScene(this);\n  }\n\n  removeChild(child: SceneObject): boolean {\n    const index = this._children.indexOf(child);\n    if (index === -1) return false;\n\n    this.removeChildAtIndex(index);\n    return true;\n  }\n\n  removeChildAtIndex(index: number): SceneObject {\n    const child = this._children[index];\n    this._children.splice(index, 1);\n    child.onRemovedFromScene();\n    return child;\n  }\n\n  update(delta: number) {\n    for (let i = 0; i < repeatUpdate; i++) {\n      for (const system of this.systemsByClass.values()) {\n        system.beforeUpdate(delta);\n      }\n      this._children.forEach((child) => child.update(delta));\n      for (const system of this.systemsByClass.values()) {\n        system.afterUpdate(delta);\n      }\n    }\n  }\n\n  draw(elapsedTime: number) {\n    this.ctx.save();\n    this.ctx.scale(this._scaleFactor, this._scaleFactor);\n    this.ctx.clearRect(0, 0, this.width, this.height);\n\n    for (const system of this.systemsByClass.values()) {\n      system.beforeDraw(this.ctx, elapsedTime);\n    }\n    this._children\n      .sort((a, b) => a.getSortOrder() - b.getSortOrder())\n      .forEach((child) => child.draw(this.ctx, elapsedTime));\n    for (const system of this.systemsByClass.values()) {\n      system.afterDraw(this.ctx, elapsedTime);\n    }\n\n    this.ctx.restore();\n  }\n\n  start() {\n    this._isPlaying = true;\n    this.frameHandle = window.requestAnimationFrame(this._tick);\n  }\n\n  stop() {\n    if (this.frameHandle !== null) {\n      window.cancelAnimationFrame(this.frameHandle);\n      this.frameHandle = null;\n    }\n    this._isPlaying = false;\n    this.lastElapsedTime = null;\n  }\n\n  _tick = (elapsedTime: number) => {\n    elapsedTime = elapsedTime * speed;\n    const lastElapsedTime = this.lastElapsedTime;\n    if (lastElapsedTime !== null) {\n      const deltaTime = elapsedTime - lastElapsedTime;\n      if (this.isPlaying) {\n        this.update(deltaTime);\n        this.draw(elapsedTime);\n      }\n    }\n\n    this.lastElapsedTime = elapsedTime;\n    this.frameHandle = window.requestAnimationFrame(this._tick);\n  };\n\n  _setupVisiblityChange() {\n    let playOnVisible = false;\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden && this.isPlaying) {\n        playOnVisible = true;\n        this.stop();\n      }\n      if (playOnVisible && !document.hidden) {\n        playOnVisible = false;\n        this.start();\n      }\n    });\n  }\n}\n","export function fail(message: string): never {\n  throw new Error(message);\n}\n\nexport function assert(value: unknown, message?: string): asserts value {\n  if (!value) {\n    fail(message || 'Assertion Error');\n  }\n}\n","import SceneObject from './SceneObject';\nimport Component from './Component';\nimport { assert } from '../assert';\nimport SortOrderProvider from './SortOrderProvider';\nimport Scene from './Scene';\n\ntype ComponentClass<T extends Component, Args extends unknown[]> = {\n  name: string;\n  new (entity: Entity, ...args: Args): T;\n};\n\nexport default class Entity extends SceneObject {\n  private componentInstances = new Map<\n    ComponentClass<Component, any>,\n    Component\n  >();\n\n  addComponent<T extends Component, Args extends unknown[]>(\n    component: ComponentClass<T, Args>,\n    ...args: Args\n  ): T {\n    assert(\n      !this.componentInstances.has(component),\n      `component instance ${component.name} already exists`,\n    );\n    const instance = new component(this, ...args);\n    this.componentInstances.set(component, instance);\n    return instance;\n  }\n\n  hasComponent<T extends Component>(\n    component: ComponentClass<T, any[]>,\n  ): boolean {\n    return this.componentInstances.has(component);\n  }\n\n  getComponent<T extends Component>(component: ComponentClass<T, any[]>): T {\n    const instance = this.componentInstances.get(component);\n    assert(instance, `no instance for ${component.name} exists`);\n    assert(instance instanceof component, 'wrong instance type');\n    return instance;\n  }\n\n  removeComponent<T extends Component>(component: ComponentClass<T, any[]>): T {\n    const instance = this.getComponent(component);\n    this.componentInstances.delete(component);\n    instance.onRemove();\n    return instance;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, elapsedTime: number): void {\n    for (const component of this.componentInstances.values()) {\n      component.beforeDraw(ctx, elapsedTime);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.draw(ctx, elapsedTime);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.afterDraw(ctx, elapsedTime);\n    }\n  }\n  update(delta: number): void {\n    for (const component of this.componentInstances.values()) {\n      component.beforeUpdate(delta);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.update(delta);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.afterUpdate(delta);\n    }\n  }\n\n  onAddedToScene(scene: Scene) {\n    super.onAddedToScene(scene);\n    for (const component of this.componentInstances.values()) {\n      component.onAddedToScene(scene);\n    }\n  }\n\n  onRemovedFromScene() {\n    const scene = this.getScene();\n    super.onRemovedFromScene();\n    for (const component of this.componentInstances.values()) {\n      component.onRemovedFromScene(scene);\n    }\n  }\n\n  getSortOrder() {\n    if (this.hasComponent(SortOrderProvider)) {\n      return this.getComponent(SortOrderProvider).getSortOrder();\n    } else {\n      return super.getSortOrder();\n    }\n  }\n}\n","import { assert } from '../assert';\nimport Scene from './Scene';\n\nconst constructorIdCounts = {} as Record<string, number>;\n\nconst getNextCount = (name: string): string => {\n  if (!constructorIdCounts[name]) constructorIdCounts[name] = 0;\n  return `${name}@${constructorIdCounts[name]++}`;\n};\n\nexport default abstract class SceneObject {\n  id: string = getNextCount(this.constructor.name);\n  private scene: Scene | null = null;\n\n  hasScene(): boolean {\n    return this.scene !== null;\n  }\n\n  getScene(): Scene {\n    assert(this.scene, 'scene must be present');\n    return this.scene;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, elapsedTime: number): void {}\n  update(delta: number): void {}\n\n  addTo(scene: Scene): this {\n    scene.addChild(this);\n    return this;\n  }\n\n  onAddedToScene(scene: Scene) {\n    this.scene = scene;\n  }\n\n  onRemovedFromScene() {\n    this.scene = null;\n  }\n\n  getSortOrder(): number {\n    return 0;\n  }\n}\n","import Component from './Component';\nimport Entity from './Entity';\n\nexport default class SortOrderProvider extends Component {\n  constructor(\n    entity: Entity,\n    private getSortOrderFn: (entity: Entity) => number,\n  ) {\n    super(entity);\n  }\n\n  getSortOrder(): number {\n    return this.getSortOrderFn(this.entity);\n  }\n}\n","import Entity from './Entity';\nimport Scene from './Scene';\n\nexport default abstract class Component {\n  readonly entity: Entity;\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  onRemove() {}\n\n  onAddedToScene(scene: Scene) {}\n\n  onRemovedFromScene(scene: Scene) {}\n\n  beforeUpdate(delta: number) {}\n\n  update(delta: number) {}\n\n  afterUpdate(delta: number) {}\n\n  beforeDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  draw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  afterDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  getScene(): Scene {\n    return this.entity.getScene();\n  }\n}\n"],"names":["$acdbbaeca7609d78$export$2e2bcd8739ae039","width","height","param","scaleFactor","this","_children","_isPlaying","frameHandle","lastElapsedTime","systemsByClass","Map","_tick","elapsedTime","_this","deltaTime","isPlaying","update","draw","window","requestAnimationFrame","canvas","document","createElement","style","concat","ctx","getContext","$8OvEy","assert","_scaleFactor","_setupVisiblityChange","key","newValue","element","appendChild","systemType","has","system","get","systemName","hasSystem","constructor","set","afterAddToScene","getSystem","beforeRemoveFromScene","delete","child","push","onAddedToScene","targetChild","newChild","index","indexOf","addChildAtIndex","splice","removeChildAtIndex","onRemovedFromScene","delta","i","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","values","Symbol","iterator","next","done","value","beforeUpdate","err","return","forEach","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","afterUpdate","save","scale","clearRect","beforeDraw","sort","a","b","getSortOrder","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","afterDraw","restore","cancelAnimationFrame","playOnVisible","addEventListener","hidden","stop","start","$641a9c3625d3ec2b$export$2b62a06a9fee979c","message","Error","$641a9c3625d3ec2b$export$a7a9523472993e97","$8444441cb4828645$export$2e2bcd8739ae039","SceneObject","apply","arguments","componentInstances","component","_len","length","args","Array","_key","name","instance","$8TSCy","construct","toConsumableArray","getComponent","onRemove","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","scene","prototype","call","getScene","hasComponent","$kqysl","default","getPrototypeOf","$dXT6b","$cf6b01f8ced41d21$var$constructorIdCounts","$cf6b01f8ced41d21$export$2e2bcd8739ae039","id","addChild","$cf045e8782228343$export$2e2bcd8739ae039","Component","entity","getSortOrderFn","$7a06d8f5413ca1f2$export$2e2bcd8739ae039","time"],"version":3,"file":"index.88fdd217.js.map"}