{"mappings":"+jBAEaA,EAAWC,SAASC,cAAc,UAClCC,EAAMH,EAASI,WAAW,MAC1BC,EAAQJ,SAASK,KAAKC,YACtBC,EAASP,SAASK,KAAKG,aACvBC,EAAQC,OAAOC,iBAE5BZ,EAASa,MAAQR,EAAQK,EACzBV,EAASc,OAASN,EAASE,EAC3BV,EAASe,MAAMF,MAAS,GAAQG,OAANX,EAAM,MAChCL,EAASe,MAAMD,OAAU,GAASE,OAAPR,EAAO,MAClCL,EAAIc,MAAMP,EAAOA,GACV,IAAMQ,EAAS,IAAIC,EAAAC,UAAUjB,GACpCF,SAASK,KAAKe,YAAYrB,uDCVVsB,EAAOC,EAAgBC,GAChCD,YALcC,GACnB,MAAM,IAAIC,MAAMD,GAKdE,CAAKF,GAAW,oCCgBPG,EAAK,IAAIC,EAAAC,GAAJ,CAAU,WACfC,EAAS,CACpB,IAAIF,EAAAC,GAAJ,CAAU,WACV,IAAID,EAAAC,GAAJ,CAAU,WACV,IAAID,EAAAC,GAAJ,CAAU,WACV,IAAID,EAAAC,GAAJ,CAAU,WACV,IAAID,EAAAC,GAAJ,CAAU,YCTNE,EADY,GACEC,KAAKC,GAAkB,EAErCC,EAAgBC,EAAAC,QAHJ,GAGkC/B,EAAOG,GAYrD6B,EAAmB,WACvB,IAAMC,EAAUC,EAAAC,MAAMD,EAAAE,UAAU,EAAG,IAAI,WAAM,OAAAF,EAAAG,OAAOZ,GAAQa,YAC5D,GAA6B,IAAzBJ,EAAAK,KAAKN,GAASO,OAAc,OAAOR,IAEvC,IAAIS,EAAI,EACR,MAAO,CACLR,QAAAA,EACAS,QAAS,WACP,OAAOT,EAAQQ,EAAIR,EAAQO,SAE7BG,KAAM,WAEJ,OADAF,IACOR,EAAQQ,EAAIR,EAAQO,SAE7BI,MAAO,SAAQC,GACbJ,OADS,IAAAI,EAAG,EAACA,cAMVC,EAAgBC,EAAaC,GACpC,IAAMC,EAAYF,EAAEG,WAAWC,MAAK,SAAAC,GAAK,OAAAA,EAAEC,WAAaL,KAExD,OADA/B,EAAOgC,EAAW,uBACXA,EAAUK,aA0CnB,IAvCA,IAAMC,EAAW,IAAIC,IAWfC,EAAY,WAIhB,IAHA,IAAMC,EAA6B,GAC7BzB,EAAUD,IACZkB,EAAUS,EAAAC,kBAAO/B,EAAcgC,UAC1BpB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMqB,EAAsBZ,EAAWa,QACrC,SAAAd,GAAa,OAACM,EAASS,IAAIf,MAE7B,IAAKa,EAAoBtB,OAAQ,MACjC,IAAMa,EAAWnB,EAAAG,OAAOyB,GACxBJ,EAAUO,KAAKZ,GACfE,EAASW,IAAIb,GACbH,EAAaG,EAASH,WAAWiB,KAAI,SAAAf,GAAK,OAAAA,EAAEC,YAI9C,MAAO,CACLK,UAAAA,EACAzB,QAAAA,EACAmC,MAAOlC,EAAAmC,OAAO,IAAM,KACpBC,OAAQ,EACRC,KAAM,EACN/B,OAAQkB,EAAUlB,OAClBgC,QAAQ,IAGNC,EAAkB,GAEfC,EAAK,EAAGA,EAAK,GAAIA,IACxBD,EAAOR,KAAKR,KAGdvB,EAAAyC,WAAU,WACR9D,EAAO+D,MAAMtD,EAAGgB,cAEXuC,GAAW,EAAXC,GAAW,EAAXC,OAAWC,MAAhB,IAAG,IAAEC,EAAAC,EAAeT,EAAMU,OAAAC,cAArBP,GAAAI,EAAAC,EAAWvC,QAAA0C,MAAXR,GAAW,EAAY,CAAvB,IAAMS,EAANL,EAAW/D,MAEd,GADAoE,EAAMhB,QAAUgB,EAAMlB,MAClBkB,EAAMhB,OAAS,EAAG,CAIpB,GAHAgB,EAAMhB,SACNgB,EAAMf,QAEDe,EAAMd,OAAQ,CACjB,IACMV,EADewB,EAAM5B,UAAU,GACIR,WAAWa,QAClD,SAAAd,GAAa,OAACM,EAASS,IAAIf,EAAUI,aAEvC,GAAIS,EAAoBtB,OAAQ,CAC9B,IAAMa,EAAWnB,EAAAG,OAAOyB,GAAqBT,SAC7CE,EAASW,IAAIb,GACbiC,EAAM5B,UAAU6B,QAAQlC,GACxBiC,EAAMf,OACNe,EAAM9C,cAEN8C,EAAMd,QAAS,EACfC,EAAOR,KAAKR,KAIhB,IAAM+B,EAAeF,EAAM5B,UAAU4B,EAAM5B,UAAUlB,OAAS8C,EAAMf,MAChEiB,IACFjC,EAASkC,OAAOD,GAChBF,EAAM9C,UAIV,IAAQkB,EAAuB4B,EAAvB5B,UAAWzB,EAAYqD,EAAZrD,QACnBA,EAAQW,MAAM0C,EAAMf,MACpB,IAAK,IAAI9B,EAAI,EAAGA,EAAI6C,EAAM9C,OAAQC,IAAK,CACrC,IAAMiD,EAAWhC,EAAUjB,GACrBkD,EAA6BjC,EAAUjB,EAAI,GAC3CE,EAA6Be,EAAUjB,EAAI,GAC3CmD,EAAe3D,EAAQS,UACvBmD,EAAY5D,EAAQU,OAE1B9B,EAAOiF,YACFH,IAUOhD,GAKV9B,EAAOkF,OAAOC,EAAAjE,QAAQkE,QAAQnD,EAAgB4C,EAAUC,KACxD9E,EAAOqF,MAAMR,EAASS,OAAQxD,EAAKwD,OAAQC,QAL3CnF,EAAO0E,GACP9E,EAAOkF,OAAOC,EAAAjE,QAAQkE,QAAQnD,EAAgB4C,EAAUC,KACxD9E,EAAOwF,OAAOX,EAASS,UAKb,IAAN1D,GAAY6C,EAAMd,SACtB3D,EAAOyF,OAAO,CACZC,YAAaH,GACbE,OAAQV,EACRY,UAAW,QACXC,WAAY,CAAC/E,EAAYA,GACzBgF,iBAAkBpB,EAAMhB,OAAS5C,IAG/Be,IAAM6C,EAAM9C,OAAS,GAAK8C,EAAMd,QACpC3D,EAAOyF,OAAO,CACZC,YAAaH,GACbE,OAAQT,EACRW,UAAW,QACXC,WAAY,CAAC/E,EAAYA,GACzBgF,iBAAkBpB,EAAMhB,OAAS5C,EAAaA,gBAzEjDoD,GAAW,EAAXC,EAAW4B,cAAX9B,GAAW,MAAXK,EAAW0B,QAAX1B,EAAW0B,oBAAX9B,QAAAC","sources":["src/worms/canvas.ts","src/lib/assert.ts","src/worms/colors.ts","src/worms/worms-main.ts"],"sourcesContent":["import { DebugDraw } from '../lib/DebugDraw';\n\nexport const canvasEl = document.createElement('canvas');\nexport const ctx = canvasEl.getContext('2d')!;\nexport const width = document.body.clientWidth;\nexport const height = document.body.clientHeight;\nexport const scale = window.devicePixelRatio;\n\ncanvasEl.width = width * scale;\ncanvasEl.height = height * scale;\ncanvasEl.style.width = `${width}px`;\ncanvasEl.style.height = `${height}px`;\nctx.scale(scale, scale);\nexport const canvas = new DebugDraw(ctx);\ndocument.body.appendChild(canvasEl);\n","export function fail(message: string): never {\n  throw new Error(message);\n}\n\nexport function assert(value: unknown, message?: string): asserts value {\n  if (!value) {\n    fail(message || 'Assertion Error');\n  }\n}\n","import Color from 'color';\n\n// // https://coolors.co/f2dc5d-f2a359-db9065-a4031f-240b36\n// export const BG = new Color('#240b36');\n// export const SNAKES = [\n//   new Color('#f2dc5d'),\n//   new Color('#f2a359'),\n//   new Color('#db9065'),\n//   new Color('#a4031f'),\n// ];\n\n// https://coolors.co/ba2d0b-d5f2e3-73ba9b-003e1f-01110a\n// export const BG = new Color('#01110a');\n\n// export const SNAKES = [\n//   new Color('#ba2d0b'),\n//   new Color('#d5f2e3'),\n//   new Color('#73ba9b'),\n//   new Color('#003e1f'),\n// ];\n\n// https://coolors.co/f4e04d-f2ed6f-cee397-8db1ab-587792\nexport const BG = new Color('#E2ECC9');\nexport const SNAKES = [\n  new Color('#C33C54'),\n  new Color('#bfb915'),\n  new Color('#96ba3b'),\n  new Color('#39847f'),\n  new Color('#12416b'),\n];\n","import { canvas, width, height } from './canvas';\nimport Vector2 from '../lib/geom/Vector2';\nimport {\n  compact,\n  getId,\n  sample,\n  shuffle,\n  times,\n  randomInt,\n  frameLoop,\n  uniq,\n  random,\n} from '../lib/utils';\nimport createTriangleGrid, { Triangle } from '../lib/createTriangleGrid';\nimport { assert } from '../lib/assert';\nimport { SNAKES, BG } from './colors';\nimport { schemePaired } from 'd3-scale-chromatic';\n\nconst TILE_SIZE = 50;\nconst ARC_LENGTH = (Math.PI * TILE_SIZE) / 6;\n\nconst trianglesById = createTriangleGrid(TILE_SIZE, width, height);\n\n// for (const triangle of trianglesById.values()) {\n//   canvas.debugPolygon(triangle.points, { color: 'lime' });\n// }\n\ntype Palatte = {\n  palette: Array<string>;\n  current(): string;\n  next(): string;\n  reset(idx?: number): void;\n};\nconst makeColorPalette = (): Palatte => {\n  const palette = times(randomInt(2, 6), () => sample(SNAKES).string());\n  if (uniq(palette).length === 1) return makeColorPalette();\n\n  let i = 0;\n  return {\n    palette,\n    current: () => {\n      return palette[i % palette.length];\n    },\n    next: () => {\n      i++;\n      return palette[i % palette.length];\n    },\n    reset: (idx = 0) => {\n      i = idx;\n    },\n  };\n};\n\nfunction getSharedPoints(a: Triangle, b: Triangle) {\n  const neighbour = a.neighbours.find(n => n.triangle === b);\n  assert(neighbour, 'must be a neighbour');\n  return neighbour.sharedPoints;\n}\n\nconst occupied = new Set<Triangle>();\ntype Snake = {\n  triangles: Array<Triangle>;\n  palette: ReturnType<typeof makeColorPalette>;\n  speed: number;\n  base: number;\n  offset: number;\n  length: number;\n  isDead: boolean;\n};\n\nconst makeSnake = () => {\n  const triangles: Array<Triangle> = [];\n  const palette = makeColorPalette();\n  let neighbours = [...trianglesById.values()];\n  for (let i = 0; i < 2; i++) {\n    const availableNeighbours = neighbours.filter(\n      neighbour => !occupied.has(neighbour),\n    );\n    if (!availableNeighbours.length) break;\n    const triangle = sample(availableNeighbours);\n    triangles.push(triangle);\n    occupied.add(triangle);\n    neighbours = triangle.neighbours.map(n => n.triangle);\n  }\n\n  // if (triangles.length < 2) continue;\n  return {\n    triangles,\n    palette,\n    speed: random(0.06, 0.12),\n    offset: 0,\n    base: 0,\n    length: triangles.length,\n    isDead: false,\n  };\n};\nconst snakes: Snake[] = [];\n\nfor (let si = 0; si < 10; si++) {\n  snakes.push(makeSnake());\n}\n\nframeLoop(() => {\n  canvas.clear(BG.string());\n\n  for (const snake of snakes) {\n    snake.offset += snake.speed;\n    if (snake.offset > 1) {\n      snake.offset--;\n      snake.base++;\n\n      if (!snake.isDead) {\n        const headTriangle = snake.triangles[0];\n        const availableNeighbours = headTriangle.neighbours.filter(\n          neighbour => !occupied.has(neighbour.triangle),\n        );\n        if (availableNeighbours.length) {\n          const triangle = sample(availableNeighbours).triangle;\n          occupied.add(triangle);\n          snake.triangles.unshift(triangle);\n          snake.base--;\n          snake.length++;\n        } else {\n          snake.isDead = true;\n          snakes.push(makeSnake());\n        }\n      }\n\n      const lastTriangle = snake.triangles[snake.triangles.length - snake.base];\n      if (lastTriangle) {\n        occupied.delete(lastTriangle);\n        snake.length--;\n      }\n    }\n\n    const { triangles, palette } = snake;\n    palette.reset(snake.base);\n    for (let i = 0; i < snake.length; i++) {\n      const triangle = triangles[i];\n      const last: Triangle | undefined = triangles[i - 1];\n      const next: Triangle | undefined = triangles[i + 1];\n      const currentColor = palette.current();\n      const nextColor = palette.next();\n\n      canvas.beginPath();\n      if (!last) {\n        continue;\n        // assert(next);\n        // const neck = Vector2.average(getSharedPoints(triangle, next));\n        // const head = triangle.center\n        //   .sub(neck)\n        //   .withMagnitude(ARC_LENGTH)\n        //   .add(neck);\n        // canvas.moveTo(head);\n        // canvas.lineTo(neck);\n      } else if (!next) {\n        assert(last);\n        canvas.moveTo(Vector2.average(getSharedPoints(triangle, last)));\n        canvas.lineTo(triangle.center);\n      } else {\n        canvas.moveTo(Vector2.average(getSharedPoints(triangle, last)));\n        canvas.arcTo(triangle.center, next.center, TILE_SIZE / 2 - 0.5);\n      }\n      if (!(i === 1 && !snake.isDead)) {\n        canvas.stroke({\n          strokeWidth: TILE_SIZE / 2,\n          stroke: currentColor,\n          strokeCap: 'round',\n          strokeDash: [ARC_LENGTH, ARC_LENGTH],\n          strokeDashOffset: snake.offset * ARC_LENGTH,\n        });\n      }\n      if (!(i === snake.length - 1 && snake.isDead)) {\n        canvas.stroke({\n          strokeWidth: TILE_SIZE / 2,\n          stroke: nextColor,\n          strokeCap: 'round',\n          strokeDash: [ARC_LENGTH, ARC_LENGTH],\n          strokeDashOffset: snake.offset * ARC_LENGTH - ARC_LENGTH,\n        });\n      }\n    }\n  }\n});\n"],"names":["$30c5272f36cd4aeb$export$38c8a1558598a89e","document","createElement","$30c5272f36cd4aeb$export$39f92e86d1722f3a","getContext","$30c5272f36cd4aeb$export$7e3df82ee760448c","body","clientWidth","$30c5272f36cd4aeb$export$ac607276a8fe9f0a","clientHeight","$30c5272f36cd4aeb$export$dcdf75081b88279d","window","devicePixelRatio","width","height","style","concat","scale","$30c5272f36cd4aeb$export$67ea982130081db","$aCcLp","DebugDraw","appendChild","$641a9c3625d3ec2b$export$a7a9523472993e97","value","message","Error","$641a9c3625d3ec2b$export$2b62a06a9fee979c","$c58b25697d8c2b43$export$7ecc97c3ec9172d0","$parcel$interopDefault","$9AT65","$c58b25697d8c2b43$export$5584a1b37cf6f0e0","$3e242c84b0c087db$var$ARC_LENGTH","Math","PI","$3e242c84b0c087db$var$trianglesById","$jRPAB","default","$3e242c84b0c087db$var$makeColorPalette","palette","$8qLe2","times","randomInt","sample","string","uniq","length","i","current","next","reset","param","$3e242c84b0c087db$var$getSharedPoints","a","b","neighbour","neighbours","find","n","triangle","sharedPoints","$3e242c84b0c087db$var$occupied","Set","$3e242c84b0c087db$var$makeSnake","triangles","$8TSCy","toConsumableArray","values","availableNeighbours","filter","has","push","add","map","speed","random","offset","base","isDead","$3e242c84b0c087db$var$snakes","si","frameLoop","clear","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","snake","unshift","lastTriangle","delete","triangle1","last","currentColor","nextColor","beginPath","moveTo","$39Hjj","average","arcTo","center","$3e242c84b0c087db$var$TILE_SIZE","lineTo","stroke","strokeWidth","strokeCap","strokeDash","strokeDashOffset","err","return"],"version":3,"file":"index.5c72284f.js.map"}