{"mappings":"krBAEqBA,EAAN,iCAAMA,EAgBSC,EAA2BC,yBAhBpCF,QAgBSC,EAAAA,OAA2BC,EAAAA,uBAhBpCF,EAAO,EAkB1BG,IAAA,iBAAA,WACE,MAAQ,WAAqBC,OAAXC,KAAKJ,EAAE,MAAWG,OAAPC,KAAKH,EAAE,QAGlCC,IAAA,uBAAJ,WACE,OAAOE,KAAKJ,EAAII,KAAKJ,EAAII,KAAKH,EAAIG,KAAKH,KAGrCC,IAAA,gBAAJ,WACE,OAAOG,KAAKC,KAAKF,KAAKG,qBAGpBL,IAAA,YAAJ,WACE,OAAOG,KAAKG,MAAMJ,KAAKH,EAAGG,KAAKJ,MAGjCE,IAAA,oBAAA,SAAYO,GAOV,IAHA,IAAQT,EAASI,KAATJ,EAAGC,EAAMG,KAANH,EAEPS,GAAW,EAETC,EAAa,EAAGC,EAAcH,EAAQI,OAAS,EACnDF,EAAaF,EAAQI,OACrBD,EAAcD,IACd,CACA,IAAqCG,EAAAL,EAAQE,GAAlCI,EAA0BD,EAA7Bd,EAAgBgB,EAAaF,EAAhBb,EACkBgB,EAAAR,EAAQG,GAApCM,EAA4BD,EAA/BjB,EAAiBmB,EAAcF,EAAjBhB,EAEpBe,EAAWf,GAAKkB,EAAYlB,GAC5BD,GACIkB,EAAYH,IAAad,EAAIe,IAAcG,EAAYH,GACvDD,IAGJL,GAAYA,GAIhB,OAAOA,KAGTR,IAAA,eAAA,SAAOkB,GACL,OAAOhB,OAASgB,GAAUhB,KAAKJ,IAAMoB,EAAMpB,GAAKI,KAAKH,IAAMmB,EAAMnB,KAGnEC,IAAA,mBAAA,SAAWmB,OAAErB,EAAFqB,EAAErB,EAAGC,EAALoB,EAAKpB,EACRqB,EAAKtB,EAAII,KAAKJ,EACduB,EAAKtB,EAAIG,KAAKH,EACpB,OAAOI,KAAKC,KAAKgB,EAAKA,EAAKC,EAAKA,MAGlCrB,IAAA,gBAAA,SAAQkB,GACN,OAAOA,EAAMI,IAAIpB,MAAMqB,SAGzBvB,IAAA,qBAAA,SAAakB,GACX,OAAOM,EAAAC,eACLtB,KAAKG,MAAMY,EAAMnB,EAAGmB,EAAMpB,GAAKK,KAAKG,MAAMJ,KAAKH,EAAGG,KAAKJ,OAI3DE,IAAA,YAAA,SAAIkB,GACF,OAAOhB,KAAKJ,EAAIoB,EAAMpB,EAAII,KAAKH,EAAImB,EAAMnB,KAG3CC,IAAA,YAAA,SAAI0B,GACF,OAAO,IAAI7B,EAAQK,KAAKJ,EAAI4B,EAAOxB,KAAKH,EAAI2B,MAG9C1B,IAAA,cAAA,SAAM0B,GACJ,OAAO,IAAI7B,EAAQK,KAAKJ,EAAI4B,EAAOxB,KAAKH,EAAI2B,MAG9C1B,IAAA,eAAA,WACE,OAAOE,KAAKwB,OAAM,MAGpB1B,IAAA,YAAA,SAAImB,OAAErB,EAAFqB,EAAErB,EAAGC,EAALoB,EAAKpB,EACP,OAAO,IAAIF,EAAQK,KAAKJ,EAAIA,EAAGI,KAAKH,EAAIA,MAG1CC,IAAA,YAAA,SAAImB,OAAErB,EAAFqB,EAAErB,EAAGC,EAALoB,EAAKpB,EACP,OAAO,IAAIF,EAAQK,KAAKJ,EAAIA,EAAGI,KAAKH,EAAIA,MAG1CC,IAAA,cAAA,WACE,OAAO,IAAIH,EAAQM,KAAKwB,MAAMzB,KAAKJ,GAAIK,KAAKwB,MAAMzB,KAAKH,OAGzDC,IAAA,aAAA,WACE,OAAO,IAAIH,EAAQM,KAAKyB,KAAK1B,KAAKJ,GAAIK,KAAKyB,KAAK1B,KAAKH,OAGvDC,IAAA,cAAA,WACE,OAAO,IAAIH,EAAQM,KAAK0B,MAAM3B,KAAKJ,GAAIK,KAAK0B,MAAM3B,KAAKH,OAGzDC,IAAA,sBAAA,SAAc8B,GACZ,OAAOjC,EAAQkC,UAAU7B,KAAKqB,MAAOO,MAGvC9B,IAAA,kBAAA,WACE,OAAOE,KAAK8B,cAAc,MAG5BhC,IAAA,kBAAA,SAAUiC,GACR,OAAOpC,EAAQkC,UAAUE,EAAU/B,KAAKgC,cAG1ClC,IAAA,eAAA,SAAOmC,GACL,OAAOjC,KAAKkC,UAAUlC,KAAKqB,MAAQY,MAGrCnC,IAAA,aAAA,SAAKkB,EAAgBmB,GACnB,OAAO,IAAIxC,EAAQ2B,EAAAc,KAAKpC,KAAKJ,EAAGoB,EAAMpB,EAAGuC,GAAIb,EAAAc,KAAKpC,KAAKH,EAAGmB,EAAMnB,EAAGsC,SApI9DrC,IAAA,kBAAP,SAAiBuB,EAAegB,GAC9B,OAAO,IAAI1C,EAAQ0C,EAASpC,KAAKqC,IAAIjB,GAAQgB,EAASpC,KAAKsC,IAAIlB,OAG1DvB,IAAA,gBAAP,SAAe0C,GAEb,OADYA,EAAOC,QAAO,SAACC,EAAMC,GAAM,OAAAD,EAAKE,IAAID,KAAIhD,EAAQkD,MACjDC,IAAIN,EAAO/B,WAGjBX,IAAA,uBAAP,SAAsBmB,GACpB,OAAO,IAAItB,EADSsB,EAAErB,EAAFqB,EAAKpB,OAZRF,EAAN,GAAMA,EACHkD,KAAO,IADJlD,EACgB,EAAG","sources":["src/lib/geom/Vector2.ts"],"sourcesContent":["import { normalizeAngle, lerp } from '../utils';\n\nexport default class Vector2 {\n  static readonly ZERO = new Vector2(0, 0);\n\n  static fromPolar(angle: number, radius: number) {\n    return new Vector2(radius * Math.cos(angle), radius * Math.sin(angle));\n  }\n\n  static average(points: ReadonlyArray<Vector2>): Vector2 {\n    const sum = points.reduce((memo, p) => memo.add(p), Vector2.ZERO);\n    return sum.div(points.length);\n  }\n\n  static fromVectorLike({ x, y }: { x: number; y: number }): Vector2 {\n    return new Vector2(x, y);\n  }\n\n  constructor(public readonly x: number, public readonly y: number) {}\n\n  toString(): string {\n    return `Vector2(${this.x}, ${this.y})`;\n  }\n\n  get magnitudeSquared(): number {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  get magnitude(): number {\n    return Math.sqrt(this.magnitudeSquared);\n  }\n\n  get angle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  isInPolygon(polygon: ReadonlyArray<Vector2>): boolean {\n    // ray-casting algorithm based on\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n    const { x, y } = this;\n\n    let isInside = false;\n    for (\n      let currentIdx = 0, previousIdx = polygon.length - 1;\n      currentIdx < polygon.length;\n      previousIdx = currentIdx++\n    ) {\n      const { x: currentX, y: currentY } = polygon[currentIdx];\n      const { x: previousX, y: previousY } = polygon[previousIdx];\n      const doesIntersect =\n        currentY > y != previousY > y &&\n        x <\n          ((previousX - currentX) * (y - currentY)) / (previousY - currentY) +\n            currentX;\n\n      if (doesIntersect) {\n        isInside = !isInside;\n      }\n    }\n\n    return isInside;\n  }\n\n  equals(other: Vector2) {\n    return this === other || (this.x === other.x && this.y === other.y);\n  }\n\n  distanceTo({ x, y }: Vector2): number {\n    const dx = x - this.x;\n    const dy = y - this.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  angleTo(other: Vector2): number {\n    return other.sub(this).angle;\n  }\n\n  angleBetween(other: Vector2): number {\n    return normalizeAngle(\n      Math.atan2(other.y, other.x) - Math.atan2(this.y, this.x),\n    );\n  }\n\n  dot(other: Vector2): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  div(scale: number): Vector2 {\n    return new Vector2(this.x / scale, this.y / scale);\n  }\n\n  scale(scale: number): Vector2 {\n    return new Vector2(this.x * scale, this.y * scale);\n  }\n\n  negate(): Vector2 {\n    return this.scale(-1);\n  }\n\n  add({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x + x, this.y + y);\n  }\n\n  sub({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x - x, this.y - y);\n  }\n\n  floor(): Vector2 {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y));\n  }\n\n  ceil(): Vector2 {\n    return new Vector2(Math.ceil(this.x), Math.ceil(this.y));\n  }\n\n  round(): Vector2 {\n    return new Vector2(Math.round(this.x), Math.round(this.y));\n  }\n\n  withMagnitude(newMagnitude: number): Vector2 {\n    return Vector2.fromPolar(this.angle, newMagnitude);\n  }\n\n  normalize(): Vector2 {\n    return this.withMagnitude(1);\n  }\n\n  withAngle(newAngle: number): Vector2 {\n    return Vector2.fromPolar(newAngle, this.magnitude);\n  }\n\n  rotate(byAngle: number): Vector2 {\n    return this.withAngle(this.angle + byAngle);\n  }\n\n  lerp(other: Vector2, n: number): Vector2 {\n    return new Vector2(lerp(this.x, other.x, n), lerp(this.y, other.y, n));\n  }\n}\n"],"names":["$2e47cfa7f4541694$export$2e2bcd8739ae039","x","y","key","concat","this","Math","sqrt","magnitudeSquared","atan2","polygon","isInside","currentIdx","previousIdx","length","_currentIdx","currentX","currentY","_previousIdx","previousX","previousY","other","param","dx","dy","sub","angle","$8qLe2","normalizeAngle","scale","floor","ceil","round","newMagnitude","fromPolar","withMagnitude","newAngle","magnitude","byAngle","withAngle","n","lerp","radius","cos","sin","points","reduce","memo","p","add","ZERO","div"],"version":3,"file":"index.0e47b079.js.map"}