{"mappings":"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","sources":["src/lib/DebugDraw.ts"],"sourcesContent":["import AABB from './geom/AABB';\nimport Vector2 from './geom/Vector2';\n\nconst DEFAULT_DEBUG_COLOR = 'magenta';\nconst LABEL_OFFSET = new Vector2(5, 0);\nconst DEBUG_POINT_SIZE = 3;\nconst HAIRLINE = 0.5;\nconst DEBUG_ARROW_ANGLE = Math.PI * 0.75;\nconst DEBUG_ARROW_SIZE = 5;\n\nexport type StrokeOptions = {\n  strokeWidth?: number;\n  stroke?: string;\n  strokeCap?: 'butt' | 'round' | 'square';\n  strokeDash?: number[];\n  strokeDashOffset?: number;\n  strokeJoin?: 'bevel' | 'round' | 'miter';\n};\n\nexport type FillOptions = {\n  fill?: string;\n};\n\nexport type DebugOptions = {\n  color?: string;\n  label?: string;\n};\n\nexport type StrokeAndFillOptions = StrokeOptions & FillOptions;\n\nexport class DebugDraw {\n  constructor(private readonly ctx: CanvasRenderingContext2D) {}\n\n  public clear(fill?: string) {\n    if (!fill) {\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n      return;\n    }\n\n    this.applyFillOptions({ fill });\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n\n  public beginPath() {\n    this.ctx.beginPath();\n  }\n\n  public moveTo({ x, y }: Vector2) {\n    this.ctx.moveTo(x, y);\n  }\n\n  public lineTo({ x, y }: Vector2) {\n    this.ctx.lineTo(x, y);\n  }\n\n  public arc(\n    { x, y }: Vector2,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n    anticlockwise?: boolean,\n  ) {\n    this.ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n  }\n\n  public arcTo(p1: Vector2, p2: Vector2, radius: number) {\n    this.ctx.arcTo(p1.x, p1.y, p2.x, p2.y, radius);\n  }\n\n  public applyStrokeOptions({\n    strokeWidth = 1,\n    stroke = undefined,\n    strokeCap = 'butt',\n    strokeDash = [],\n    strokeDashOffset = 0,\n    strokeJoin = 'round',\n  }: StrokeOptions) {\n    if (stroke) {\n      this.ctx.lineWidth = strokeWidth;\n      this.ctx.strokeStyle = stroke;\n      this.ctx.lineCap = strokeCap;\n      this.ctx.setLineDash(strokeDash);\n      this.ctx.lineDashOffset = strokeDashOffset;\n      this.ctx.lineJoin = strokeJoin;\n    }\n  }\n\n  public stroke(options: StrokeOptions) {\n    if (options.stroke) {\n      this.applyStrokeOptions(options);\n      this.ctx.stroke();\n    }\n  }\n\n  public applyFillOptions({ fill = undefined }: FillOptions) {\n    if (fill) {\n      this.ctx.fillStyle = fill;\n    }\n  }\n\n  public fill(options: FillOptions) {\n    if (options.fill) {\n      this.applyFillOptions(options);\n      this.ctx.fill();\n    }\n  }\n\n  public applyStrokeAndFillOptions(options: StrokeAndFillOptions) {\n    this.applyFillOptions(options);\n    this.applyStrokeOptions(options);\n  }\n\n  public strokeAndFill(options: StrokeAndFillOptions) {\n    this.fill(options);\n    this.stroke(options);\n  }\n\n  public getDebugStrokeOptions(\n    color: string = DEFAULT_DEBUG_COLOR,\n  ): StrokeOptions {\n    return { stroke: color, strokeWidth: HAIRLINE };\n  }\n\n  public debugStroke(color: string = DEFAULT_DEBUG_COLOR) {\n    this.stroke(this.getDebugStrokeOptions(color));\n  }\n\n  public fillText(text: string, position: Vector2, options: FillOptions = {}) {\n    this.applyFillOptions(options);\n    this.ctx.fillText(text, position.x, position.y);\n  }\n\n  public circle(\n    center: Vector2,\n    radius: number,\n    options: StrokeAndFillOptions,\n  ) {\n    this.beginPath();\n    this.arc(center, radius, 0, 2 * Math.PI);\n    this.strokeAndFill(options);\n  }\n\n  public ellipse(\n    center: Vector2,\n    radiusX: number,\n    radiusY: number,\n    options: StrokeAndFillOptions,\n  ) {\n    this.beginPath();\n    this.ctx.ellipse(center.x, center.y, radiusX, radiusY, 0, 0, Math.PI * 2);\n    this.strokeAndFill(options);\n  }\n\n  public debugLabel(\n    label: string | undefined,\n    position: Vector2,\n    color: string,\n  ) {\n    if (label) {\n      this.applyFillOptions({ fill: color });\n      this.fillText(label, position.add(LABEL_OFFSET));\n    }\n  }\n\n  public debugPointX(\n    position: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, position, color);\n\n    this.beginPath();\n    this.ctx.moveTo(\n      position.x - DEBUG_POINT_SIZE,\n      position.y - DEBUG_POINT_SIZE,\n    );\n    this.ctx.lineTo(\n      position.x + DEBUG_POINT_SIZE,\n      position.y + DEBUG_POINT_SIZE,\n    );\n    this.ctx.moveTo(\n      position.x + DEBUG_POINT_SIZE,\n      position.y - DEBUG_POINT_SIZE,\n    );\n    this.ctx.lineTo(\n      position.x - DEBUG_POINT_SIZE,\n      position.y + DEBUG_POINT_SIZE,\n    );\n    this.stroke({ strokeWidth: HAIRLINE, stroke: color });\n  }\n\n  public debugPointO(\n    position: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, position, color);\n\n    this.circle(position, DEBUG_POINT_SIZE, {\n      strokeWidth: HAIRLINE,\n      stroke: color,\n    });\n  }\n\n  public debugArrow(\n    start: Vector2,\n    end: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, Vector2.average([start, end]), color);\n\n    this.ctx.beginPath();\n    this.moveTo(start);\n    this.lineTo(end);\n\n    const vector = end.sub(start);\n    const arrowLeftPoint = vector\n      .rotate(-DEBUG_ARROW_ANGLE)\n      .withMagnitude(DEBUG_ARROW_SIZE)\n      .add(end);\n    const arrowRightPoint = vector\n      .rotate(+DEBUG_ARROW_ANGLE)\n      .withMagnitude(DEBUG_ARROW_SIZE)\n      .add(end);\n\n    this.moveTo(arrowLeftPoint);\n    this.lineTo(end);\n    this.lineTo(arrowRightPoint);\n    this.stroke({ strokeWidth: HAIRLINE, stroke: color });\n  }\n\n  public debugVectorAtPoint(\n    vector: Vector2,\n    base: Vector2,\n    options?: DebugOptions,\n  ) {\n    this.debugArrow(base, base.add(vector), options);\n  }\n\n  public polygon(\n    polygon: ReadonlyArray<Vector2>,\n    options: StrokeAndFillOptions = {},\n  ) {\n    this.beginPath();\n    this.moveTo(polygon[polygon.length - 1]);\n    for (const point of polygon) {\n      this.lineTo(point);\n    }\n    this.strokeAndFill(options);\n  }\n\n  public polyLine(points: ReadonlyArray<Vector2>, options: StrokeOptions = {}) {\n    this.beginPath();\n    this.moveTo(points[0]);\n    for (let i = 1; i < points.length; i++) {\n      this.lineTo(points[i]);\n    }\n    this.stroke(options);\n  }\n\n  public debugPolygon(\n    polygon: ReadonlyArray<Vector2>,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, polygon[0], color);\n    this.polygon(polygon, this.getDebugStrokeOptions(color));\n  }\n\n  public debugPolyLine(\n    polyLine: ReadonlyArray<Vector2>,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, polyLine[0], color);\n    this.polyLine(polyLine, this.getDebugStrokeOptions(color));\n  }\n\n  public aabb(\n    aabb: AABB,\n    opts: StrokeAndFillOptions & { debug?: DebugOptions },\n  ) {\n    if (opts.debug) {\n      this.debugLabel(\n        opts.debug.label,\n        aabb.origin,\n        opts.debug.color || DEFAULT_DEBUG_COLOR,\n      );\n    }\n    this.ctx.beginPath();\n    this.ctx.rect(aabb.left, aabb.top, aabb.width, aabb.height);\n    this.strokeAndFill(opts);\n  }\n}\n"],"names":["$08e621c7a092ea9d$var$DEFAULT_DEBUG_COLOR","$08e621c7a092ea9d$var$LABEL_OFFSET","$54lVR","default","$08e621c7a092ea9d$var$HAIRLINE","$08e621c7a092ea9d$var$DEBUG_ARROW_ANGLE","Math","PI","$08e621c7a092ea9d$export$13037e9c80189b76","ctx","key","fill","applyFillOptions","fillRect","this","canvas","width","height","clearRect","beginPath","param","x","y","moveTo","lineTo","radius","startAngle","endAngle","anticlockwise","arc","p1","p2","arcTo","strokeWidth","_strokeWidth","stroke","_strokeCap","strokeCap","_strokeDash","strokeDash","_strokeDashOffset","strokeDashOffset","_strokeJoin","strokeJoin","lineWidth","strokeStyle","lineCap","setLineDash","lineDashOffset","lineJoin","options","applyStrokeOptions","fillStyle","color","getDebugStrokeOptions","text","position","fillText","center","strokeAndFill","radiusX","radiusY","ellipse","label","add","_color","ref","debugLabel","circle","start","end","average","vector","sub","arrowLeftPoint","rotate","withMagnitude","arrowRightPoint","base","debugArrow","polygon1","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","point","value","err","return","points","i","polygon","polyLine","aabb1","opts","debug","origin","rect","left","top"],"version":3,"file":"index.79e76cff.js.map"}