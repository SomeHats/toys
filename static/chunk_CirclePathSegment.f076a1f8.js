import{q as i,m as n}from"./chunk_assert.30730bef.js";import{L as a}from"./chunk_Line2.96db62cd.js";import{C as g}from"./chunk_Circle.23ef23f8.js";class d{constructor(t,e){this.line=new a(t,e),this.delta=this.line.getDelta(),Object.freeze(this)}getStart(){return this.line.start}getEnd(){return this.line.end}getDelta(){return this.delta}getLength(){return this.delta.magnitude()}angle(){return this.delta.angle()}getPointAtPosition(t){const e=i(0,this.getLength(),t);return this.delta.withMagnitude(e).add(this.line.start)}getAngleAtPosition(){return this.delta.angle()}appendToSvgPathBuilder(t){t.moveToIfNeeded(this.line.start),t.lineTo(this.line.end)}}class u{constructor(t,e,r,h){this.circle=g.create(t.x,t.y,e),this.startAngle=r,this.endAngle=h,Object.freeze(this)}getStart(){return this.circle.pointOnCircumference(this.startAngle)}getEnd(){return this.circle.pointOnCircumference(this.endAngle)}get angleDifference(){return Math.atan2(Math.sin(this.endAngle-this.startAngle),Math.cos(this.endAngle-this.startAngle))}getLength(){const t=Math.abs(this.angleDifference)/(Math.PI*2);return this.circle.circumference*t}get isAnticlockwise(){return this.angleDifference<0}getPointAtPosition(t){const e=n(0,this.getLength(),this.startAngle,this.startAngle+this.angleDifference,i(0,this.getLength(),t));return this.circle.pointOnCircumference(e)}getAngleAtPosition(t){return this.isAnticlockwise?n(0,this.getLength(),this.startAngle,this.startAngle+this.angleDifference,i(0,this.getLength(),t))-Math.PI/2:n(0,this.getLength(),this.startAngle,this.startAngle+this.angleDifference,i(0,this.getLength(),t))+Math.PI/2}appendToSvgPathBuilder(t){t.moveToIfNeeded(this.getStart()),t.arcTo(this.circle.radius,this.circle.radius,0,0,this.isAnticlockwise?0:1,this.getEnd())}}export{u as C,d as S};
