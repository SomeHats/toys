{"mappings":"8gBAEaA,EAAWC,SAASC,cAAa,UACjCC,EAAMH,EAASI,WAAU,MACzBC,EAAQJ,SAASK,KAAKC,YACtBC,EAASP,SAASK,KAAKG,aACvBC,EAAQC,OAAOC,iBAE5BZ,EAASa,MAAQR,EAAQK,EACzBV,EAASc,OAASN,EAASE,EAC3BV,EAASe,MAAMF,MAAK,GAAYG,OAANX,EAAK,MAC/BL,EAASe,MAAMD,OAAM,GAAaE,OAAPR,EAAM,MACjCL,EAAIc,MAAMP,EAAOA,GACV,IAAMQ,EAAS,IAAIC,EAAAC,UAAUjB,GACpCF,SAASK,KAAKe,YAAYrB,0CCVVsB,EAAOC,EAAgBC,GAChCD,YALcC,GACnB,MAAM,IAAIC,MAAMD,GAKdE,CAAKF,GAAO,mBCShB,IAAMG,EAAY,GAGZC,GAFcC,KAAKC,GAEHC,EAAAC,QAAmBL,EAAWtB,EAAOG,IAErDyB,EAAW,IAAIC,IAKfC,EAAS,eACb,IAAMC,EAAS,GACXC,EAAWC,EAAAC,OAAMC,EAAAC,kBACfb,EAAcc,UAAUC,QAAM,SAACC,UAAMX,EAASY,IAAID,OAa/CE,GADKN,EAAAC,kBAAOb,EAAcc,UACtB,GAAGI,EAFK,GAEaA,IAAK,CACrCV,EAAUW,KAAKV,GACfJ,EAASe,IAAIX,GAGb,IAAMY,EAFOZ,EAASa,WAAWC,KAAG,SAACC,UAAKA,EAAEf,YAELM,QAAM,SAC3CU,UAAcpB,EAASY,IAAIQ,MAE7B,IAAKJ,EAAoBK,OAAM,MAC/BjB,EAAWC,EAAAC,OAAOU,UAKlBb,UAAAA,IAGEmB,EAAM,GAENC,EAAcnD,EAAQsB,GAAcnB,EAASmB,GAAa,IAChE8B,QAAQC,IAAG,CAAGC,WAAAH,QACT,IAAII,EAAK,EAAGA,EAAKJ,EAAYI,IAChCL,EAAOR,KAAKZ,KAGdjB,EAAO2C,MAAK,aAEPC,GAAmB,EAAnBC,GAAmB,EAAnBC,OAAmBC,cAAnBC,EAAAC,EAAuBZ,EAAMa,OAAAC,cAA7BP,GAAAI,EAAAC,EAAmBG,QAAAC,MAAnBT,GAAmB,EAAY,CAA/B,IAAQ1B,EAAR8B,EAAmB3C,MAAXa,UACXlB,EAAOsD,gBACF,IAAI1B,EAAI,EAAGA,EAAIV,EAAUkB,OAAQR,IAAK,CACzC,IAAMT,EAAWD,EAAUU,GACrB2B,EAA6BrC,EAAUU,EAAI,GAC3CwB,EAA6BlC,EAAUU,EAAI,GAE5C2B,EAEOH,EAMVpD,EAAOwD,MAAMrC,EAASsC,OAAQL,EAAKK,OAAQhD,IAL3CL,EAAOmD,GAEPvD,EAAO0D,OAAOvC,EAASsC,SAJvBzD,EAAO2D,OAAOxC,EAASsC,QAU3BzD,EAAO4D,OAAM,CACXC,YAAapD,IACbmD,OAAM,QACNE,UAAS,oBArBRjB,GAAmB,EAAnBC,EAAmBiB,cAAnBnB,GAAmB,MAAnBK,EAAmBe,QAAnBf,EAAmBe,oBAAnBnB,QAAAC","sources":["src/wiggle-gradient/canvas.ts","src/lib/assert.ts","src/wiggle-gradient/wiggle-gradient-main.ts"],"sourcesContent":["import { DebugDraw } from '../lib/DebugDraw';\n\nexport const canvasEl = document.createElement('canvas');\nexport const ctx = canvasEl.getContext('2d')!;\nexport const width = document.body.clientWidth;\nexport const height = document.body.clientHeight;\nexport const scale = window.devicePixelRatio;\n\ncanvasEl.width = width * scale;\ncanvasEl.height = height * scale;\ncanvasEl.style.width = `${width}px`;\ncanvasEl.style.height = `${height}px`;\nctx.scale(scale, scale);\nexport const canvas = new DebugDraw(ctx);\ndocument.body.appendChild(canvasEl);\n","export function fail(message: string): never {\n  throw new Error(message);\n}\n\nexport function assert(value: unknown, message?: string): asserts value {\n  if (!value) {\n    fail(message || 'Assertion Error');\n  }\n}\n","import { canvas, width, height } from './canvas';\nimport Vector2 from '../lib/geom/Vector2';\nimport {\n  sample,\n  times,\n  randomInt,\n  frameLoop,\n  uniq,\n  random,\n  lerp,\n  mapRange,\n} from '../lib/utils';\nimport createTriangleGrid, { Triangle } from '../lib/createTriangleGrid';\nimport { assert } from '../lib/assert';\n\nconst TILE_SIZE = 15;\nconst ARC_LENGTH = (Math.PI * TILE_SIZE) / 6;\n\nconst trianglesById = createTriangleGrid(TILE_SIZE, width, height);\n\nconst occupied = new Set<Triangle>();\ntype Snake = {\n  triangles: Array<Triangle>;\n};\n\nconst makeSnake = () => {\n  const triangles: Array<Triangle> = [];\n  let triangle = sample(\n    [...trianglesById.values()].filter(t => !occupied.has(t)),\n  );\n  // if (!triangle) return;\n\n  // const targetLength = mapRange(\n  //   Math.min(width, height) * 0.4,\n  //   0,\n  //   2,\n  //   35,\n  //   triangle.center.distanceTo(new Vector2(width / 2, height / 2)),\n  // );\n  const targetLength = 40;\n  let neighbours = [...trianglesById.values()];\n  for (let i = 0; i < targetLength; i++) {\n    triangles.push(triangle);\n    occupied.add(triangle);\n    neighbours = triangle.neighbours.map(n => n.triangle);\n\n    const availableNeighbours = neighbours.filter(\n      neighbour => !occupied.has(neighbour),\n    );\n    if (!availableNeighbours.length) break;\n    triangle = sample(availableNeighbours);\n  }\n\n  // if (triangles.length < 2) continue;\n  return {\n    triangles,\n  };\n};\nconst snakes: Snake[] = [];\n\nconst snakeCount = (width / TILE_SIZE) * (height / TILE_SIZE) * 0.01;\nconsole.log({ snakeCount });\nfor (let si = 0; si < snakeCount; si++) {\n  snakes.push(makeSnake());\n}\n\ncanvas.clear('black');\n\nfor (const { triangles } of snakes) {\n  canvas.beginPath();\n  for (let i = 0; i < triangles.length; i++) {\n    const triangle = triangles[i];\n    const last: Triangle | undefined = triangles[i - 1];\n    const next: Triangle | undefined = triangles[i + 1];\n\n    if (!last) {\n      canvas.moveTo(triangle.center);\n    } else if (!next) {\n      assert(last);\n      // canvas.moveTo(Vector2.average(getSharedPoints(triangle, last)));\n      canvas.lineTo(triangle.center);\n    } else {\n      // canvas.moveTo(Vector2.average(getSharedPoints(triangle, last)));\n      canvas.arcTo(triangle.center, next.center, TILE_SIZE / 2 - 0.5);\n    }\n  }\n  canvas.stroke({\n    strokeWidth: TILE_SIZE / 3 - 0.5,\n    stroke: 'white',\n    strokeCap: 'round',\n  });\n}\n"],"names":["$dfdbec5fdadf76c8$export$4d41f66daf6338dc","document","createElement","$dfdbec5fdadf76c8$export$a4ecf2d011151542","getContext","$dfdbec5fdadf76c8$export$b7952bcb5d125510","body","clientWidth","$dfdbec5fdadf76c8$export$5e9f82a2cb459528","clientHeight","$dfdbec5fdadf76c8$export$8f869025bba9609b","window","devicePixelRatio","width","height","style","concat","scale","$dfdbec5fdadf76c8$export$dd37cca076be4c97","$bK7pi","DebugDraw","appendChild","$52750c4f2800ba92$export$b8795f4f643ce74f","value","message","Error","$52750c4f2800ba92$export$62d771998a1345d1","$d963317fbce226b4$var$TILE_SIZE","$d963317fbce226b4$var$trianglesById","Math","PI","$44e7r","default","$d963317fbce226b4$var$occupied","Set","$d963317fbce226b4$var$makeSnake","triangles","triangle","$8pNpe","sample","$eUMMJ","toConsumableArray","values","filter","t","has","i","push","add","availableNeighbours","neighbours","map","n","neighbour","length","$d963317fbce226b4$var$snakes","$d963317fbce226b4$var$snakeCount","console","log","snakeCount","si","clear","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","beginPath","last","arcTo","center","lineTo","moveTo","stroke","strokeWidth","strokeCap","err","return"],"version":3,"file":"index.4424ff16.js.map"}