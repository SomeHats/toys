{"mappings":"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","sources":["src/lib/createTriangleGrid.ts"],"sourcesContent":["import Vector2 from '../lib/geom/Vector2';\nimport { getId, compact, intersection } from '../lib/utils';\nimport Intersection from '../network/networkNodes/Intersection';\n\ntype TriangleGeom = [Vector2, Vector2, Vector2];\ntype IntermediateTriangle = {\n  id: string;\n  points: TriangleGeom;\n};\n\nexport type TriangleNeighbour = {\n  triangle: Triangle;\n  sharedPoints: [Vector2, Vector2];\n};\nexport type Triangle = {\n  id: string;\n  center: Vector2;\n  points: TriangleGeom;\n  neighbours: TriangleNeighbour[];\n  ix: number;\n  iy: number;\n};\n\nexport default function createTriangleGrid(\n  tileSize: number,\n  width: number,\n  height: number,\n): Map<string, Triangle> {\n  const tileHeight = (tileSize * Math.sqrt(3)) / 2;\n  const points: Vector2[][] = [];\n  const trianglePoints: IntermediateTriangle[][] = [];\n  for (let iy = 0; iy * tileHeight < height + tileHeight; iy++) {\n    const pointRow: Vector2[] = [];\n    points.push(pointRow);\n    const triangleRow: IntermediateTriangle[] = [];\n    trianglePoints.push(triangleRow);\n    for (let ix = 0; ix * tileSize < width + tileSize; ix++) {\n      const xOffset = iy % 2 === 0 ? -tileSize / 2 : 0;\n      const point = new Vector2(ix * tileSize + xOffset, iy * tileHeight);\n      pointRow.push(point);\n\n      if (iy !== 0 && ix !== 0) {\n        if (iy % 2 === 0) {\n          const triangle1: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy][ix - 1], points[iy - 1][ix - 1]],\n          };\n          const triangle2: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy - 1][ix - 1], points[iy - 1][ix]],\n          };\n          triangleRow.push(triangle1, triangle2);\n        } else if (points[iy - 1][ix + 1]) {\n          const triangle1: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy][ix - 1], points[iy - 1][ix]],\n          };\n          const triangle2: IntermediateTriangle = {\n            id: getId('triangle'),\n            points: [point, points[iy - 1][ix + 1], points[iy - 1][ix]],\n          };\n          triangleRow.push(triangle1, triangle2);\n        }\n      }\n    }\n  }\n\n  const trianglesById = new Map<string, Triangle>();\n  for (let iy = 0; iy < trianglePoints.length; iy++) {\n    for (let ix = 0; ix < trianglePoints[iy].length; ix++) {\n      const triangle = trianglePoints[iy][ix];\n      const center = Vector2.average(triangle.points);\n\n      const neighbours = compact(\n        ix % 2 === 0\n          ? iy % 2 === 0\n            ? [\n                // 2,2\n                trianglePoints[iy]?.[ix - 1],\n                trianglePoints[iy]?.[ix + 1],\n                trianglePoints[iy + 1]?.[ix - 1],\n              ]\n            : [\n                // 2,3\n                trianglePoints[iy]?.[ix - 1],\n                trianglePoints[iy]?.[ix + 1],\n                trianglePoints[iy + 1]?.[ix + 1],\n              ]\n          : iy % 2 === 0\n          ? [\n              // 3,2\n              trianglePoints[iy]?.[ix - 1],\n              trianglePoints[iy]?.[ix + 1],\n              trianglePoints[iy - 1]?.[ix - 1],\n            ]\n          : [\n              //3,3\n              trianglePoints[iy]?.[ix - 1],\n              trianglePoints[iy]?.[ix + 1],\n              trianglePoints[iy - 1]?.[ix + 1],\n            ],\n      );\n\n      const fullTriangle = triangle as Triangle;\n      fullTriangle.center = center;\n      fullTriangle.neighbours = neighbours.map(neighbourTriangle => ({\n        triangle: neighbourTriangle,\n        sharedPoints: intersection(triangle.points, neighbourTriangle.points),\n      })) as TriangleNeighbour[];\n      fullTriangle.ix = ix;\n      fullTriangle.iy = iy;\n\n      trianglesById.set(fullTriangle.id, fullTriangle);\n    }\n  }\n\n  return trianglesById;\n}\n"],"names":["tileSize","width","height","ref","ref1","ref2","ref3","ref4","ref5","ref6","ref7","ref8","ref9","ref10","ref11","triangle","trianglePoints","iy1","ix1","center","$39Hjj","default","average","points","neighbours","$8qLe2","compact","fullTriangle","map","neighbourTriangle","sharedPoints","intersection","ix","iy","trianglesById","set","id","tileHeight","Math","sqrt","pointRow","push","triangleRow","xOffset","point","triangle1","getId","triangle2","triangle11","triangle21","Map","length","_loop"],"version":3,"file":"index.9230147a.js.map"}