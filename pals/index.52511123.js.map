{"mappings":"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","sources":["src/pals/PalController.ts","src/lib/scene/Component.ts","src/lib/utils.ts","src/lib/geom/Vector2.ts","src/pals/PalGeom.ts","src/lib/geom/Circle.ts","src/lib/geom/AABB.ts","src/pals/PalLegGeom.ts","src/lib/assert.ts","src/pals/PalRenderer.ts","src/lib/canvasShapeHelpers.ts","src/lib/geom/StraightPathSegment.ts","src/lib/geom/Line2.ts","src/lib/geom/CirclePathSegment.ts","src/pals/PalWalkAnimationController.ts","src/pals/PalConfig.ts","src/pals/colors.ts"],"sourcesContent":["import Component from '../lib/scene/Component';\nimport { constrain, normalizeAngle } from '../lib/utils';\nimport Vector2 from '../lib/geom/Vector2';\nimport Entity from '../lib/scene/Entity';\n\nconst MAX_SPEED = 80;\nconst ACCELERATION = 200;\nconst DECELERATION = 200;\n\nexport class PalControlData extends Component {\n  speed: number = 0;\n  position: Vector2;\n  heading: number = 0;\n  headingVelocity: number = 0;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.position = position;\n  }\n\n  getVelocity(): Vector2 {\n    return this.getHeadingVec().scale(this.speed);\n  }\n\n  private getHeadingVec(): Vector2 {\n    return Vector2.fromPolar(this.heading, 1);\n  }\n}\n\nexport class PalTargetController extends Component {\n  private data: PalControlData;\n  private target: Vector2;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.target = position;\n    this.data = entity.addComponent(PalControlData, position);\n  }\n\n  setTarget(newTarget: Vector2) {\n    this.target = newTarget;\n  }\n\n  update(dtMilliseconds: number) {\n    const dtSeconds = dtMilliseconds / 1000;\n    const angleToTarget = this.data.position.angleTo(this.target);\n\n    const distance = this.target.distanceTo(this.data.position);\n    if (distance > 15) {\n      this.accelerate(ACCELERATION, dtSeconds);\n    } else {\n      this.accelerate(-DECELERATION, dtSeconds);\n    }\n\n    if (distance > 10) {\n      const angleDelta = normalizeAngle(angleToTarget - this.data.heading);\n      const lastHeading = this.data.heading;\n      this.data.heading += angleDelta / 10;\n      this.data.headingVelocity =\n        normalizeAngle(this.data.heading - lastHeading) / dtSeconds;\n    } else {\n      this.data.headingVelocity = 0;\n    }\n  }\n\n  private accelerate(amt: number, dtSeconds: number) {\n    const lastSpeed = this.data.speed;\n    this.data.speed = constrain(\n      0,\n      MAX_SPEED,\n      this.data.speed + amt * dtSeconds,\n    );\n    const avgSpeed = (lastSpeed + this.data.speed) / 2;\n    this.data.position = this.data.position.add(\n      Vector2.fromPolar(this.data.heading, avgSpeed * dtSeconds),\n    );\n  }\n}\n\nexport class PalAbsoluteController extends Component {\n  private data: PalControlData;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.data = entity.addComponent(PalControlData, position);\n  }\n\n  setPosition(position: Vector2, heading: number, dtSeconds: number) {\n    const lastPosition = this.data.position;\n    const lastHeading = this.data.heading;\n\n    this.data.heading = heading;\n    this.data.headingVelocity =\n      normalizeAngle(this.data.heading - lastHeading) / dtSeconds;\n    this.data.speed = lastPosition.distanceTo(position) / dtSeconds;\n    this.data.position = position;\n  }\n}\n","import Entity from './Entity';\nimport Scene from './Scene';\n\nexport default abstract class Component {\n  readonly entity: Entity;\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  onRemove() {}\n\n  onAddedToScene(scene: Scene) {}\n\n  onRemovedFromScene(scene: Scene) {}\n\n  beforeUpdate(delta: number) {}\n\n  update(delta: number) {}\n\n  afterUpdate(delta: number) {}\n\n  beforeDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  draw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  afterDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  getScene(): Scene {\n    return this.entity.getScene();\n  }\n}\n","export type TimeoutId = ReturnType<typeof setTimeout>;\nexport type IntervalId = ReturnType<typeof setInterval>;\n\nexport type ReadonlyRecord<K extends keyof any, T> = {\n  readonly [P in K]: T;\n};\n\nexport function times<T>(n: number, fn: (idx: number) => T): Array<T> {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(fn(i));\n  }\n  return result;\n}\n\nexport function lerp(a: number, b: number, n: number): number {\n  return (b - a) * n + a;\n}\n\nexport function invLerp(a: number, b: number, n: number): number {\n  return (n - a) / (b - a);\n}\n\nexport function constrain(min: number, max: number, n: number): number {\n  return Math.min(max, Math.max(min, n));\n}\n\nexport function constrainWrapped(min: number, max: number, n: number): number {\n  const size = max - min;\n  n = n - min;\n  while (n < 0) {\n    n += size;\n  }\n  n = n % size;\n  return min + n;\n}\n\nexport function mapRange(\n  a1: number,\n  b1: number,\n  a2: number,\n  b2: number,\n  n: number,\n): number {\n  return lerp(a2, b2, invLerp(a1, b1, n));\n}\n\nexport function random(a: number, b?: number) {\n  if (typeof b === 'number') {\n    return lerp(a, b, Math.random());\n  }\n  return lerp(0, a, Math.random());\n}\n\nexport function randomInt(a: number, b?: number) {\n  return Math.floor(random(a, b));\n}\n\nexport function varyAbsolute(base: number, amount: number): number {\n  return random(base - amount, base + amount);\n}\n\nexport function varyRelative(base: number, amount: number): number {\n  return varyAbsolute(base, base * amount);\n}\n\nexport function sample<T>(arr: ReadonlyArray<T>): T {\n  return arr[Math.floor(random(arr.length))];\n}\n\nexport function flatten<T>(arr: ReadonlyArray<ReadonlyArray<T>>): Array<T> {\n  return arr.reduce<Array<T>>((a, b) => a.concat(b), []);\n}\n\nexport function uniq<T>(arr: T[]): Array<T> {\n  return Array.from(new Set(arr));\n}\n\nexport function intersection<T>(a1: T[], a2: T[]): T[] {\n  const a1Items = new Set(a1);\n  const result = new Set<T>();\n  for (const item of a2) {\n    if (a1Items.has(item)) {\n      result.add(item);\n    }\n  }\n  return Array.from(result);\n}\n\nexport function groupBy<T, Key>(\n  items: ReadonlyArray<T>,\n  getKey: (item: T) => Key,\n): Map<Key, Array<T>> {\n  const groups = new Map<Key, T[]>();\n  for (const item of items) {\n    const key = getKey(item);\n    const existing = groups.get(key);\n    if (existing) {\n      existing.push(item);\n    } else {\n      groups.set(key, [item]);\n    }\n  }\n\n  return groups;\n}\n\nexport function sortBy<T, Key extends number | string>(\n  items: ReadonlyArray<T>,\n  getKey: (item: T) => Key,\n): Array<T> {\n  return items.slice().sort((a, b) => (getKey(a) < getKey(b) ? -1 : 1));\n}\n\nexport function partition<T>(\n  items: ReadonlyArray<T>,\n  condition: (item: T) => boolean,\n): [T[], T[]] {\n  const pass = [];\n  const fail = [];\n  for (const item of items) {\n    if (condition(item)) {\n      pass.push(item);\n    } else {\n      fail.push(item);\n    }\n  }\n  return [pass, fail];\n}\n\nexport function randomColor(): string {\n  return `rgb(${Math.floor(random(256))},${Math.floor(\n    random(256),\n  )},${Math.floor(random(256))})`;\n}\n\nexport function removeFromArray<T>(array: Array<T>, item: T) {\n  const idx = array.indexOf(item);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n}\n\nexport function frame(): Promise<number> {\n  return new Promise((resolve) => {\n    window.requestAnimationFrame((time) => resolve(time));\n  });\n}\n\nexport function wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(() => resolve(), ms));\n}\n\nexport async function frameLoop(\n  cb: (time: number, cancel: () => void) => void,\n) {\n  let shouldCancel = false;\n  const cancel = () => {\n    shouldCancel = true;\n  };\n  while (true) {\n    cb(await frame(), cancel);\n    if (shouldCancel) {\n      return;\n    }\n  }\n}\n\nexport function fromEntries<K extends PropertyKey, V>(\n  entries: ReadonlyArray<[K, V]>,\n): Record<K, V> {\n  const result = {} as Record<K, V>;\n  for (const [key, value] of entries) {\n    result[key] = value;\n  }\n  return result;\n}\n\nexport function keys<K extends string, V>(object: Record<K, V>): Array<K> {\n  return Object.keys(object) as K[];\n}\n\nexport function values<K extends string, V>(object: Record<K, V>): Array<V> {\n  return Object.values(object) as V[];\n}\n\nexport function entries<K extends string, V>(\n  object: Record<K, V>,\n): Array<[K, V]> {\n  return Object.entries(object) as [K, V][];\n}\n\nexport function compact<T>(arr: ReadonlyArray<T>): Array<NonNullable<T>> {\n  return arr.filter(\n    (item): item is NonNullable<T> => item !== null && item !== undefined,\n  );\n}\n\nexport function normalizeAngle(angle: number): number {\n  return constrainWrapped(-Math.PI, Math.PI, angle);\n}\n\nexport function clamp(a: number, b: number, n: number): number {\n  return Math.max(Math.min(a, b), Math.min(Math.max(a, b), n));\n}\n\nexport function shuffle<T>(arr: ReadonlyArray<T>): Array<T> {\n  const newArr = arr.slice();\n  for (let i = newArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n  }\n  return newArr;\n}\n\nexport function getId(prefix = ''): string {\n  return `${prefix}${Math.random().toString(36).slice(1)}`;\n}\n\nexport function getLocalStorageItem(\n  key: string,\n  fallback: unknown = null,\n): unknown {\n  try {\n    // Get from local storage by key\n    const item = window.localStorage.getItem(key);\n    // Parse stored json or if none return initialValue\n    return item ? JSON.parse(item) : fallback;\n  } catch (error) {\n    // If error also return initialValue\n    console.log(error);\n    return fallback;\n  }\n}\n\nexport function setLocalStorageItem(key: string, value: unknown) {\n  const stringified = JSON.stringify(value);\n  try {\n    window.localStorage.setItem(key, stringified);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function debounce<Args extends Array<unknown>>(\n  ms: number,\n  fn: (...args: Args) => void,\n): (...args: Args) => void {\n  let timeoutHandle: TimeoutId | undefined;\n\n  return (...args: Args) => {\n    if (timeoutHandle !== undefined) {\n      clearTimeout(timeoutHandle);\n    }\n    timeoutHandle = setTimeout(() => fn(...args), ms);\n  };\n}\n\nexport function exhaustiveSwitchError(value: never): never {\n  throw new Error(`Unknown switch case ${value}`);\n}\n\nexport function has(obj: object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function get<K extends string, V>(\n  obj: Partial<Record<K, V>>,\n  key: K,\n): V | undefined;\nexport function get(obj: object, key: string): unknown;\nexport function get(obj: object, key: string): unknown {\n  if (!has(obj, key)) {\n    return undefined;\n  }\n  return (obj as any)[key];\n}\n\nexport function approxEq(a: number, b: number, epsilon: number): boolean {\n  return Math.abs(a - b) < epsilon;\n}\n\nexport function queueMicrotask(callback: () => void): () => void {\n  let isCancelled = false;\n  Promise.resolve()\n    .then(() => {\n      if (isCancelled) {\n        return;\n      }\n      callback();\n    })\n    .catch((e) =>\n      setTimeout(() => {\n        throw e;\n      }),\n    );\n  return () => {\n    isCancelled = true;\n  };\n}\n\nexport function promiseFromEvents<T>(\n  setupResolve: (resolve: (value: T) => void) => void,\n  setupReject: (reject: (error: unknown) => void) => void,\n): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    setupResolve(resolve);\n    setupReject(reject);\n  });\n}\n\nexport function mapObjectValues<K extends string, V, U>(\n  object: Record<K, V>,\n  fn: (value: V, key: K, obj: Record<K, V>) => U,\n): Record<K, U> {\n  const result = {} as Record<K, U>;\n  for (const [k, v] of entries(object)) {\n    result[k] = fn(v, k, object);\n  }\n  return result;\n}\n","import { normalizeAngle, lerp } from '../utils';\n\nexport default class Vector2 {\n  static readonly ZERO = new Vector2(0, 0);\n\n  static fromPolar(angle: number, radius: number) {\n    return new Vector2(radius * Math.cos(angle), radius * Math.sin(angle));\n  }\n\n  static average(points: ReadonlyArray<Vector2>): Vector2 {\n    const sum = points.reduce((memo, p) => memo.add(p), Vector2.ZERO);\n    return sum.div(points.length);\n  }\n\n  static fromVectorLike({ x, y }: { x: number; y: number }): Vector2 {\n    return new Vector2(x, y);\n  }\n\n  constructor(public readonly x: number, public readonly y: number) {}\n\n  toString(): string {\n    return `Vector2(${this.x}, ${this.y})`;\n  }\n\n  get magnitudeSquared(): number {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  get magnitude(): number {\n    return Math.sqrt(this.magnitudeSquared);\n  }\n\n  get angle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  isInPolygon(polygon: ReadonlyArray<Vector2>): boolean {\n    // ray-casting algorithm based on\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n    const { x, y } = this;\n\n    let isInside = false;\n    for (\n      let currentIdx = 0, previousIdx = polygon.length - 1;\n      currentIdx < polygon.length;\n      previousIdx = currentIdx++\n    ) {\n      const { x: currentX, y: currentY } = polygon[currentIdx];\n      const { x: previousX, y: previousY } = polygon[previousIdx];\n      const doesIntersect =\n        currentY > y != previousY > y &&\n        x <\n          ((previousX - currentX) * (y - currentY)) / (previousY - currentY) +\n            currentX;\n\n      if (doesIntersect) {\n        isInside = !isInside;\n      }\n    }\n\n    return isInside;\n  }\n\n  equals(other: Vector2) {\n    return this === other || (this.x === other.x && this.y === other.y);\n  }\n\n  distanceTo({ x, y }: Vector2): number {\n    const dx = x - this.x;\n    const dy = y - this.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  angleTo(other: Vector2): number {\n    return other.sub(this).angle;\n  }\n\n  angleBetween(other: Vector2): number {\n    return normalizeAngle(\n      Math.atan2(other.y, other.x) - Math.atan2(this.y, this.x),\n    );\n  }\n\n  dot(other: Vector2): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  div(scale: number): Vector2 {\n    return new Vector2(this.x / scale, this.y / scale);\n  }\n\n  scale(scale: number): Vector2 {\n    return new Vector2(this.x * scale, this.y * scale);\n  }\n\n  negate(): Vector2 {\n    return this.scale(-1);\n  }\n\n  add({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x + x, this.y + y);\n  }\n\n  sub({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x - x, this.y - y);\n  }\n\n  floor(): Vector2 {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y));\n  }\n\n  ceil(): Vector2 {\n    return new Vector2(Math.ceil(this.x), Math.ceil(this.y));\n  }\n\n  round(): Vector2 {\n    return new Vector2(Math.round(this.x), Math.round(this.y));\n  }\n\n  withMagnitude(newMagnitude: number): Vector2 {\n    return Vector2.fromPolar(this.angle, newMagnitude);\n  }\n\n  normalize(): Vector2 {\n    return this.withMagnitude(1);\n  }\n\n  withAngle(newAngle: number): Vector2 {\n    return Vector2.fromPolar(newAngle, this.magnitude);\n  }\n\n  rotate(byAngle: number): Vector2 {\n    return this.withAngle(this.angle + byAngle);\n  }\n\n  lerp(other: Vector2, n: number): Vector2 {\n    return new Vector2(lerp(this.x, other.x, n), lerp(this.y, other.y, n));\n  }\n}\n","import Component from '../lib/scene/Component';\nimport Entity from '../lib/scene/Entity';\nimport Circle from '../lib/geom/Circle';\nimport { PalControlData } from './PalController';\nimport { shuffle, flatten, times, lerp } from '../lib/utils';\nimport { PalConfig } from './PalConfig';\nimport PalLegGeom, { PalLegGeomUpdate } from './PalLegGeom';\nimport { assert } from '../lib/assert';\n\nconst HALF_PI = Math.PI / 2;\n\nexport type PalGeomUpdate = {\n  bobAmount: number;\n  legs: Array<PalLegGeomUpdate>;\n};\n\nexport interface PalAnimationController {\n  update(\n    dtMilliseconds: number,\n    controlData: PalControlData,\n    legs: Array<PalLegGeom>,\n  ): PalGeomUpdate;\n}\n\nexport default class PalGeom extends Component {\n  private controlData: PalControlData;\n  legs: Array<PalLegGeom>;\n  private animationController: PalAnimationController | null = null;\n  private bobAmount: number = 0;\n\n  constructor(entity: Entity, private config: PalConfig) {\n    super(entity);\n    this.controlData = entity.getComponent(PalControlData);\n    this.legs = shuffle(\n      flatten(\n        times(config.legPairs, n => {\n          const progress = (n + 1) / (config.legPairs + 1);\n          return [\n            new PalLegGeom(\n              this.controlData,\n              this,\n              config,\n              lerp(HALF_PI - 1, HALF_PI + 1, progress),\n            ),\n            new PalLegGeom(\n              this.controlData,\n              this,\n              config,\n              lerp(-HALF_PI + 1, -HALF_PI - 1, progress),\n            ),\n          ];\n        }),\n      ),\n    );\n  }\n\n  setAnimationController(animationController: PalAnimationController) {\n    this.animationController = animationController;\n  }\n\n  update(dtMilliseconds: number) {\n    if (this.animationController) {\n      const update = this.animationController.update(\n        dtMilliseconds,\n        this.controlData,\n        this.legs,\n      );\n      this.bobAmount = update.bobAmount;\n\n      assert(update.legs.length === this.legs.length);\n      this.legs.forEach((leg, i) => leg.update(update.legs[i]));\n    }\n  }\n\n  getBod(): Circle {\n    const bob = this.config.bodBob * this.bobAmount;\n\n    return new Circle(\n      this.controlData.position.x,\n      this.controlData.position.y - this.config.bodHeight - bob,\n      this.config.radius,\n    );\n  }\n}\n","// @flow\nimport Vector2 from './Vector2';\nimport AABB from './AABB';\n\nexport default class Circle {\n  readonly center: Vector2;\n  readonly radius: number;\n\n  constructor(x: number, y: number, radius: number) {\n    this.center = new Vector2(x, y);\n    this.radius = radius;\n    Object.freeze(this);\n  }\n\n  get circumference(): number {\n    return 2 * Math.PI * this.radius;\n  }\n\n  getBoundingBox(): AABB {\n    return new AABB(\n      new Vector2(this.center.x, this.center.y),\n      new Vector2(this.radius * 2, this.radius * 2),\n    );\n  }\n\n  // debugDraw(color: string) {\n  //   const ctx: CanvasRenderingContext2D = window.debugContext;\n  //   ctx.strokeStyle = color;\n  //   ctx.lineWidth = 1;\n  //   ctx.beginPath();\n  //   ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, false);\n  //   ctx.stroke();\n  // }\n\n  pointOnCircumference(radians: number): Vector2 {\n    return new Vector2(\n      this.center.x + Math.cos(radians) * this.radius,\n      this.center.y + Math.sin(radians) * this.radius,\n    );\n  }\n\n  containsPoint(point: Vector2): boolean {\n    return point.distanceTo(this.center) < this.radius;\n  }\n\n  intersectsCircle(other: Circle): boolean {\n    return this.center.distanceTo(other.center) < this.radius + other.radius;\n  }\n\n  withRadius(radius: number): Circle {\n    return new Circle(this.center.x, this.center.y, radius);\n  }\n}\n","import Vector2 from './Vector2';\n\nexport default class AABB {\n  static fromLeftTopRightBottom(\n    left: number,\n    top: number,\n    right: number,\n    bottom: number,\n  ): AABB {\n    return new AABB(\n      new Vector2(left, top),\n      new Vector2(right - left, bottom - top),\n    );\n  }\n\n  constructor(public readonly origin: Vector2, public readonly size: Vector2) {\n    Object.freeze(this);\n  }\n\n  contains({ x, y }: Vector2): boolean {\n    return (\n      this.left <= x && x <= this.right && this.top <= y && y <= this.bottom\n    );\n  }\n\n  intersects(other: AABB): boolean {\n    return !(\n      this.right < other.left ||\n      this.left > other.right ||\n      this.bottom < other.top ||\n      this.top > other.bottom\n    );\n  }\n\n  getCenter(): Vector2 {\n    return this.origin.add(this.size.scale(0.5));\n  }\n\n  get left(): number {\n    return this.origin.x;\n  }\n\n  get right(): number {\n    return this.origin.x + this.size.x;\n  }\n\n  get top(): number {\n    return this.origin.y;\n  }\n\n  get bottom(): number {\n    return this.origin.y + this.size.y;\n  }\n\n  get width(): number {\n    return this.size.x;\n  }\n\n  get height(): number {\n    return this.size.y;\n  }\n}\n","import PalGeom from './PalGeom';\nimport { PalConfig } from './PalConfig';\nimport Vector2 from '../lib/geom/Vector2';\nimport { PalControlData } from './PalController';\nimport { lerp } from '../lib/utils';\n\nconst getLegRadius = ({ radius, hipHeight, legWidth }: PalConfig) =>\n  Math.sqrt(radius * radius - (radius - hipHeight) * (radius - hipHeight)) -\n  legWidth;\n\nexport type PalLegGeomUpdate = {\n  footXY: Vector2;\n  footProjectionOrigin: Vector2;\n  liftAmount: number;\n};\n\nexport default class PalLegGeom {\n  hipRadius: number;\n  kneeRadius: number;\n  floorRadius: number;\n\n  footXY: Vector2;\n  footOrigin: Vector2;\n  liftAmount: number = 0;\n\n  constructor(\n    private palData: PalControlData,\n    private palGeom: PalGeom,\n    private config: PalConfig,\n    public angleOffset: number,\n  ) {\n    this.hipRadius = getLegRadius(config);\n    this.kneeRadius = getLegRadius(config) * config.kneeScale;\n    this.floorRadius = getLegRadius(config);\n\n    this.footXY = this.getIdealFootRestingXY();\n    this.footOrigin = this.getIdealFootRestingXY();\n  }\n\n  update(update: PalLegGeomUpdate) {\n    this.footXY = update.footXY;\n    this.footOrigin = update.footProjectionOrigin;\n    this.liftAmount = update.liftAmount;\n  }\n\n  getIdealFootRestingXY(): Vector2 {\n    return Vector2.fromPolar(\n      this.palData.heading + this.angleOffset,\n      this.floorRadius,\n    ).add(this.palData.position);\n  }\n\n  getFootXY(): Vector2 {\n    return this.footXY;\n  }\n\n  getFootZ(): number {\n    return lerp(0, this.getHipZ() * this.config.legMaxLift, this.liftAmount);\n  }\n\n  getFootOrigin(): Vector2 {\n    return this.footOrigin;\n  }\n\n  getKneeXY(): Vector2 {\n    return this.palData.position\n      .add(\n        Vector2.fromPolar(\n          this.palData.heading + this.angleOffset,\n          this.kneeRadius,\n        ),\n      )\n      .add(\n        Vector2.fromPolar(\n          this.palData.heading,\n          this.liftAmount * this.config.kneeMaxOut,\n        ),\n      );\n  }\n\n  getKneeZ(): number {\n    return (this.getFootZ() + this.getHipZ()) / 2;\n  }\n\n  getKneeOrigin(): Vector2 {\n    return this.getHipOrigin().lerp(this.getFootOrigin(), 0.5);\n  }\n\n  getHipXY(): Vector2 {\n    return this.palData.position.add(\n      Vector2.fromPolar(\n        this.palData.heading + this.angleOffset,\n        this.hipRadius,\n      ),\n    );\n    // return this._hipEllipse\n    //   .pointOnCircumference(this.angle)\n    //   .add(this.palData.bod.center);\n  }\n\n  getHipZ(): number {\n    const bod = this.palGeom.getBod();\n    return (\n      this.palData.position.y -\n      bod.center.y -\n      (bod.radius - this.config.hipHeight)\n    );\n  }\n\n  getHipOrigin(): Vector2 {\n    return this.palData.position;\n  }\n}\n","export function fail(message: string): never {\n  throw new Error(message);\n}\n\nexport function assert(value: unknown, message?: string): asserts value {\n  if (!value) {\n    fail(message || 'Assertion Error');\n  }\n}\n","import Component from '../lib/scene/Component';\nimport { PalControlData } from './PalController';\nimport Entity from '../lib/scene/Entity';\nimport PalGeom from './PalGeom';\nimport * as ShapeHelpers from '../lib/canvasShapeHelpers';\nimport { normalizeAngle, constrain } from '../lib/utils';\nimport Circle from '../lib/geom/Circle';\nimport { PalConfig } from './PalConfig';\nimport PalLegGeom from './PalLegGeom';\nimport Vector2 from '../lib/geom/Vector2';\n\nconst Y_SCALE = 0.3;\nconst HALF_PI = Math.PI / 2;\n\nexport default class PalRenderer extends Component {\n  private data: PalControlData;\n  private geom: PalGeom;\n\n  constructor(entity: Entity, private config: PalConfig) {\n    super(entity);\n    this.data = entity.getComponent(PalControlData);\n    this.geom = entity.getComponent(PalGeom);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const heading = normalizeAngle(this.data.heading);\n\n    ctx.setLineDash([]);\n    ctx.beginPath();\n\n    const bod = this.geom.getBod();\n    ctx.ellipse(\n      this.data.position.x,\n      this.data.position.y,\n      bod.radius * 0.8,\n      bod.radius * 0.8 * 0.3,\n      0,\n      0,\n      2 * Math.PI,\n    );\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n    ctx.fill();\n\n    this.geom.legs\n      .filter(l => normalizeAngle(l.angleOffset + heading) < 0)\n      .forEach(leg => this.drawLeg(ctx, leg));\n    this.geom.legs\n      .filter(l => normalizeAngle(l.angleOffset + heading) >= 0)\n      .forEach(leg => this.drawLeg(ctx, leg));\n    this.drawBod(ctx, bod);\n  }\n\n  private drawLeg(ctx: CanvasRenderingContext2D, leg: PalLegGeom) {\n    ctx.beginPath();\n\n    const angle = this.data.heading + leg.angleOffset;\n\n    const colorDarkenAmount = constrain(\n      0,\n      1,\n      Math.abs(normalizeAngle(-HALF_PI - angle) / HALF_PI),\n    );\n    const legColor = this.config.color.darken(\n      0.2 * (1 - colorDarkenAmount * colorDarkenAmount),\n    );\n\n    const hip = this.projectZ(\n      leg.getHipXY(),\n      leg.getHipZ(),\n      leg.getHipOrigin(),\n    );\n    const knee = this.projectZ(\n      leg.getKneeXY(),\n      leg.getKneeZ(),\n      leg.getKneeOrigin(),\n    );\n    const foot = this.projectZ(\n      leg.getFootXY(),\n      leg.getFootZ(),\n      leg.getFootOrigin(),\n    );\n\n    ctx.moveTo(hip.x, hip.y);\n    ctx.quadraticCurveTo(knee.x, knee.y, foot.x, foot.y);\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = legColor.toString();\n    ctx.lineWidth = this.config.legWidth;\n    ctx.stroke();\n  }\n\n  private drawBod(ctx: CanvasRenderingContext2D, bod: Circle) {\n    ctx.save();\n    ctx.beginPath();\n    ShapeHelpers.circle(ctx, bod.center.x, bod.center.y, this.config.radius);\n    ctx.fillStyle = this.config.color.toString();\n    ctx.fill();\n    ctx.clip();\n\n    const faceX =\n      (normalizeAngle(HALF_PI - this.data.heading) / HALF_PI) *\n      this.config.radius;\n\n    // EYES\n    ctx.beginPath();\n    ShapeHelpers.circle(\n      ctx,\n      faceX + bod.center.x + this.config.eyeX,\n      bod.center.y - this.config.eyeY,\n      this.config.eyeRadius,\n    );\n    ShapeHelpers.circle(\n      ctx,\n      faceX + bod.center.x - this.config.eyeX,\n      bod.center.y - this.config.eyeY,\n      this.config.eyeRadius,\n    );\n    ctx.fillStyle = this.config.color.darken(0.5).toString();\n    ctx.fill();\n\n    // MOUTH\n    ctx.beginPath();\n    ctx.moveTo(\n      faceX + bod.center.x - this.config.mouthWidth,\n      bod.center.y - this.config.mouthY,\n    );\n    ctx.quadraticCurveTo(\n      faceX + bod.center.x,\n      bod.center.y - this.config.mouthY + this.config.mouthSmile,\n      faceX + bod.center.x + this.config.mouthWidth,\n      bod.center.y - this.config.mouthY,\n    );\n    ctx.lineWidth = this.config.mouthThickness;\n    ctx.strokeStyle = this.config.color.darken(0.5).toString();\n    ctx.stroke();\n\n    // BUTT\n    ctx.beginPath();\n    this.makeButtLine(ctx, bod, faceX + this.config.radius * 2);\n    this.makeButtLine(ctx, bod, faceX - this.config.radius * 2);\n    ctx.lineWidth = this.config.buttThickness;\n    ctx.strokeStyle = this.config.color.darken(0.3).toString();\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  private makeButtLine(\n    ctx: CanvasRenderingContext2D,\n    bod: Circle,\n    buttX: number,\n  ) {\n    ctx.moveTo(buttX * 1.6 + bod.center.x, bod.center.y + this.config.buttTop);\n    ctx.quadraticCurveTo(\n      buttX * 1.7 + bod.center.x,\n      bod.center.y + (this.config.buttTop + this.config.buttBottom) * 0.65,\n      buttX + bod.center.x,\n      bod.center.y + this.config.buttBottom,\n    );\n  }\n\n  private projectZ(xy: Vector2, z: number, origin: Vector2): Vector2 {\n    return new Vector2(xy.x, origin.y - z + (xy.y - origin.y) * Y_SCALE);\n  }\n}\n","// @flow\nimport Path from './geom/Path';\nimport StraightPathSegment from './geom/StraightPathSegment';\nimport CirclePathSegment from './geom/CirclePathSegment';\n\nexport function circle(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  radius: number,\n) {\n  ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n}\n\nexport function path(ctx: CanvasRenderingContext2D, path: Path) {\n  if (path.segments.length) {\n    ctx.moveTo(path.segments[0].getStart().x, path.segments[0].getStart().y);\n  }\n\n  for (const segment of path.segments) {\n    if (segment instanceof StraightPathSegment) {\n      ctx.lineTo(segment.getEnd().x, segment.getEnd().y);\n    } else if (segment instanceof CirclePathSegment) {\n      ctx.arc(\n        segment.circle.center.x,\n        segment.circle.center.y,\n        segment.circle.radius,\n        segment.startAngle,\n        segment.endAngle,\n        segment.isAnticlockwise,\n      );\n    } else {\n      throw new Error(`Unknown path segment type: ${segment.toString()}`);\n    }\n  }\n}\n","// @flow\nimport { constrain } from '../utils';\nimport Vector2 from './Vector2';\nimport { PathSegment } from './Path';\nimport Line2 from './Line2';\n\nexport default class StraightPathSegment implements PathSegment {\n  readonly line: Line2;\n  private readonly delta: Vector2;\n\n  constructor(start: Vector2, end: Vector2) {\n    this.line = new Line2(start, end);\n    this.delta = this.line.getDelta();\n    Object.freeze(this);\n  }\n\n  getStart(): Vector2 {\n    return this.line.start;\n  }\n\n  getEnd(): Vector2 {\n    return this.line.end;\n  }\n\n  getDelta(): Vector2 {\n    return this.delta;\n  }\n\n  getLength(): number {\n    return this.delta.magnitude;\n  }\n\n  get angle(): number {\n    return this.delta.angle;\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const constrainedPosition = constrain(0, this.getLength(), position);\n    return this.delta.withMagnitude(constrainedPosition).add(this.line.start);\n  }\n\n  getAngleAtPosition(): number {\n    return this.delta.angle;\n  }\n}\n","// @flow\nimport { assert } from '../assert';\nimport Vector2 from './Vector2';\n\nconst isSlopeVertical = (slope: number) =>\n  slope === Infinity || slope === -Infinity;\n\nexport default class Line2 {\n  static fromSlopeAndDisplacement(slope: number, displacement: number) {\n    assert(\n      !isSlopeVertical(slope),\n      'cannot create vertical line from displacement',\n    );\n\n    const start = new Vector2(0, displacement);\n    const end = new Vector2(1, slope + displacement);\n    return new Line2(start, end);\n  }\n\n  static fromSlopeAndPoint(slope: number, point: Vector2): Line2 {\n    if (isSlopeVertical(slope)) {\n      return new Line2(point, new Vector2(point.x, point.y + 1));\n    }\n\n    const displacement = point.y - point.x * slope;\n    return Line2.fromSlopeAndDisplacement(slope, displacement);\n  }\n\n  readonly start: Vector2;\n  readonly end: Vector2;\n\n  constructor(a: Vector2, b: Vector2) {\n    this.start = a;\n    this.end = b;\n  }\n\n  getDelta(): Vector2 {\n    return this.end.sub(this.start);\n  }\n\n  get slope(): number {\n    return (this.end.y - this.start.y) / (this.end.x - this.start.x);\n  }\n\n  get displacement(): number {\n    return this.start.y - this.start.x * this.slope;\n  }\n\n  get isVertical(): boolean {\n    return isSlopeVertical(this.slope);\n  }\n\n  get verticalX(): number {\n    assert(this.isVertical, 'verticalX is not defined on non vertical lines');\n    return this.start.x;\n  }\n\n  get perpendicularSlope(): number {\n    if (this.isVertical) return 0;\n    return -1 / this.slope;\n  }\n\n  isParallelTo(other: Line2): boolean {\n    return (this.isVertical && other.isVertical) || this.slope === other.slope;\n  }\n\n  perpendicularLineThroughPoint(point: Vector2): Line2 {\n    return Line2.fromSlopeAndPoint(this.perpendicularSlope, point);\n  }\n\n  pointAtIntersectionWith(other: Line2): Vector2 {\n    assert(!this.isParallelTo(other), 'parallel lines do not intersect');\n\n    let x;\n    if (this.isVertical) {\n      x = this.verticalX;\n    } else if (other.isVertical) {\n      x = other.verticalX;\n    } else {\n      x = (this.displacement - other.displacement) / (other.slope - this.slope);\n    }\n\n    const y = this.isVertical\n      ? other.slope * x + other.displacement\n      : this.slope * x + this.displacement;\n\n    return new Vector2(x, y);\n  }\n}\n","// @flow\nimport { constrain, mapRange } from '../utils';\nimport Vector2 from './Vector2';\nimport Circle from './Circle';\nimport { PathSegment } from './Path';\n\nexport default class CirclePathSegment implements PathSegment {\n  readonly circle: Circle;\n  readonly startAngle: number;\n  readonly endAngle: number;\n\n  constructor(\n    center: Vector2,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n  ) {\n    this.circle = new Circle(center.x, center.y, radius);\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    Object.freeze(this);\n  }\n\n  getStart(): Vector2 {\n    return this.circle.pointOnCircumference(this.startAngle);\n  }\n\n  getEnd(): Vector2 {\n    return this.circle.pointOnCircumference(this.endAngle);\n  }\n\n  get angleDifference(): number {\n    return Math.atan2(\n      Math.sin(this.endAngle - this.startAngle),\n      Math.cos(this.endAngle - this.startAngle),\n    );\n  }\n\n  getLength(): number {\n    const proportion = Math.abs(this.angleDifference) / (Math.PI * 2);\n    return this.circle.circumference * proportion;\n  }\n\n  get isAnticlockwise(): boolean {\n    return this.angleDifference < 0;\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const angle = mapRange(\n      0,\n      this.getLength(),\n      this.startAngle,\n      this.startAngle + this.angleDifference,\n      constrain(0, this.getLength(), position),\n    );\n    return this.circle.pointOnCircumference(angle);\n  }\n\n  getAngleAtPosition(position: number): number {\n    if (this.isAnticlockwise) {\n      return (\n        mapRange(\n          0,\n          this.getLength(),\n          this.startAngle,\n          this.startAngle + this.angleDifference,\n          constrain(0, this.getLength(), position),\n        ) -\n        Math.PI / 2\n      );\n    } else {\n      return (\n        mapRange(\n          0,\n          this.getLength(),\n          this.startAngle,\n          this.startAngle + this.angleDifference,\n          constrain(0, this.getLength(), position),\n        ) +\n        Math.PI / 2\n      );\n    }\n  }\n}\n","import { PalAnimationController, PalGeomUpdate } from './PalGeom';\nimport { PalControlData } from './PalController';\nimport PalLegGeom, { PalLegGeomUpdate } from './PalLegGeom';\nimport Vector2 from '../lib/geom/Vector2';\nimport { PalConfig } from './PalConfig';\nimport { constrain, mapRange } from '../lib/utils';\nimport { assert } from '../lib/assert';\n\ntype LegState = {\n  lastFootOnFloorXY: Vector2;\n  lastFootOnFloorPalPosition: Vector2;\n  stepProgress: number;\n  restTimer: number;\n  currentStepMaxLift: number;\n};\n\nfunction isStepping({ stepProgress }: LegState): boolean {\n  return stepProgress > 0;\n}\n\nfunction isResting({ restTimer }: LegState): boolean {\n  return restTimer > 0;\n}\n\nexport default class PalWalkAnimationController\n  implements PalAnimationController {\n  private legStates = new Map<PalLegGeom, LegState>();\n\n  constructor(private config: PalConfig) {}\n\n  update(\n    dtMilliseconds: number,\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n  ): PalGeomUpdate {\n    const dtSeconds = dtMilliseconds / 1000;\n\n    for (const leg of legs) {\n      this.updateLegState(dtSeconds, pal, legs, leg);\n    }\n    const legUpdates = legs.map(leg => this.getLegUpdate(pal, leg));\n\n    const totalLift = legUpdates.reduce(\n      (sum, update) => sum + update.liftAmount,\n      0,\n    );\n    const avgLift = totalLift / legs.length;\n\n    return {\n      bobAmount: avgLift,\n      legs: legUpdates,\n    };\n  }\n\n  private canLiftLeg(\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n    leg: PalLegGeom,\n  ): boolean {\n    assert(legs.includes(leg), 'whos leg even is this');\n    const enoughLegsOnFloor =\n      legs.filter(l => l !== leg && !isStepping(this.getLegState(pal, leg)))\n        .length > Math.floor(Math.log(legs.length));\n\n    const anyStepsJustStarted = legs.some(leg => {\n      const state = this.getLegState(pal, leg);\n      return (\n        state.stepProgress > 0 && state.stepProgress < 1 / (legs.length / 2)\n      );\n    });\n\n    return enoughLegsOnFloor && !anyStepsJustStarted;\n  }\n\n  private updateLegState(\n    dtSeconds: number,\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n    leg: PalLegGeom,\n  ) {\n    const state = this.getLegState(pal, leg);\n\n    state.restTimer = constrain(\n      0,\n      this.config.stepRestDuration,\n      state.restTimer - dtSeconds,\n    );\n    if (isResting(state)) return;\n\n    if (isStepping(state)) {\n      state.stepProgress = constrain(\n        0,\n        1,\n        state.stepProgress + dtSeconds / this.config.stepDuration,\n      );\n\n      if (state.stepProgress === 1) {\n        state.lastFootOnFloorXY = this.getFootXY(pal, leg, state);\n        state.lastFootOnFloorPalPosition = pal.position;\n        state.stepProgress = 0;\n        state.restTimer = this.config.stepDuration;\n      }\n    } else {\n      const footLeanDistance = leg\n        .getFootXY()\n        .distanceTo(leg.getIdealFootRestingXY());\n      if (\n        footLeanDistance > this.config.stepThreshold &&\n        this.canLiftLeg(pal, legs, leg)\n      ) {\n        state.currentStepMaxLift = constrain(\n          0,\n          1,\n          mapRange(\n            this.config.stepThreshold,\n            this.config.fullStepDistance,\n            0.1,\n            1,\n            footLeanDistance,\n          ),\n        );\n        state.stepProgress = constrain(\n          0,\n          1,\n          state.stepProgress + dtSeconds / this.config.stepDuration,\n        );\n      }\n    }\n  }\n\n  private getInitialLegState(pal: PalControlData, leg: PalLegGeom): LegState {\n    return {\n      lastFootOnFloorXY: leg.getIdealFootRestingXY(),\n      lastFootOnFloorPalPosition: pal.position,\n      stepProgress: 0,\n      restTimer: 0,\n      currentStepMaxLift: 1,\n    };\n  }\n\n  private getLegState(pal: PalControlData, leg: PalLegGeom): LegState {\n    const state = this.legStates.get(leg);\n    if (state) {\n      return state;\n    }\n\n    const initialState = this.getInitialLegState(pal, leg);\n    this.legStates.set(leg, initialState);\n    return initialState;\n  }\n\n  private getLegUpdate(pal: PalControlData, leg: PalLegGeom): PalLegGeomUpdate {\n    const state = this.getLegState(pal, leg);\n    return {\n      footXY: this.getFootXY(pal, leg, state),\n      footProjectionOrigin: this.getFootOrigin(pal, leg, state),\n      liftAmount: this.getLegLiftAmount(state),\n    };\n  }\n\n  private getFootXY(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    if (isStepping(state)) {\n      const start = state.lastFootOnFloorXY;\n      const target = this.getPredictedIdealFootXYAtEndOfOfStep(pal, leg, state);\n      return start.lerp(target, state.stepProgress);\n    }\n\n    return state.lastFootOnFloorXY;\n  }\n\n  private getFootOrigin(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    if (isStepping(state)) {\n      return state.lastFootOnFloorPalPosition.lerp(\n        pal.position,\n        state.stepProgress,\n      );\n    }\n\n    return state.lastFootOnFloorPalPosition;\n  }\n\n  private getPredictedIdealFootXYAtEndOfOfStep(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    const timeRemaining = (1.4 - state.stepProgress) * this.config.stepDuration;\n\n    const predictedPosition = pal\n      .getVelocity()\n      .scale(timeRemaining)\n      .add(pal.position);\n\n    const predictedHeading = pal.heading + pal.headingVelocity * timeRemaining;\n\n    return Vector2.fromPolar(\n      predictedHeading + leg.angleOffset,\n      leg.floorRadius,\n    ).add(predictedPosition);\n  }\n\n  private getLegLiftAmount({\n    stepProgress,\n    currentStepMaxLift,\n  }: LegState): number {\n    return Math.sin(stepProgress * Math.PI) * currentStepMaxLift;\n  }\n}\n","import Color from 'color';\nimport { varyRelative, varyAbsolute, random, randomInt } from '../lib/utils';\nimport { BLUE } from './colors';\n\nexport type PalConfig = {\n  radius: number;\n  bodHeight: number;\n  bodBob: number;\n  eyeY: number;\n  eyeX: number;\n  eyeRadius: number;\n  mouthThickness: number;\n  mouthY: number;\n  mouthWidth: number;\n  mouthSmile: number;\n  buttTop: number;\n  buttBottom: number;\n  buttThickness: number;\n  color: Color;\n  hipHeight: number;\n  kneeScale: number;\n  legMaxLift: number;\n  kneeMaxOut: number;\n  stepDuration: number;\n  stepRestDuration: number;\n  stepThreshold: number;\n  fullStepDistance: number;\n  legWidth: number;\n  legPairs: number;\n};\n\nexport const classicPalConfig: PalConfig = {\n  radius: 14,\n  bodHeight: 25,\n  bodBob: 15,\n  eyeY: 6,\n  eyeX: 5,\n  eyeRadius: 2,\n  mouthThickness: 2,\n  mouthY: 2,\n  mouthWidth: 8,\n  mouthSmile: 4,\n  buttTop: 6,\n  buttBottom: 12,\n  buttThickness: 1.4,\n  color: BLUE.lighten(0.2),\n  hipHeight: 10,\n  kneeScale: 1.3,\n  legMaxLift: 0.3,\n  kneeMaxOut: 14,\n  stepDuration: 0.2,\n  stepRestDuration: 0.2,\n  stepThreshold: 0.2,\n  fullStepDistance: 20,\n  legWidth: 4,\n  legPairs: 1,\n};\n\nexport const generateRandomPalConfig = (): PalConfig => {\n  const radius = varyRelative(14, 0.2);\n  const hipHeight = varyRelative(radius * 0.7, 0.3);\n  const bodHeight = varyRelative(radius * 2, 0.3);\n  const legLength = bodHeight - (radius - hipHeight); // typical: 24\n\n  return {\n    radius,\n    bodHeight,\n    bodBob: varyRelative(radius, 0.2),\n    eyeY: varyRelative(radius * 0.5, 0.2),\n    eyeX: varyRelative(radius * 0.4, 0.3),\n    eyeRadius: varyRelative(radius * 0.15, 0.4),\n    mouthThickness: varyRelative(radius * 0.15, 0.4),\n    mouthY: varyAbsolute(0, radius * 0.2),\n    mouthWidth: varyRelative(radius * 0.5, 0.3),\n    mouthSmile: varyRelative(radius * 0.3, 0.3),\n    buttTop: varyRelative(radius * 0.4, 0.2),\n    buttBottom: varyRelative(radius * 0.85, 0.15),\n    buttThickness: varyRelative(radius * 0.1, 0.5),\n    color: BLUE.lighten(random(-0.2, 0.2))\n      .saturate(random(-0.2, 0.2))\n      .rotate(random(-10, 10)),\n    hipHeight,\n    kneeScale: varyAbsolute(1.3, 0.3),\n    legMaxLift: random(0.2, 0.5),\n    kneeMaxOut: varyRelative(legLength * 0.6, 0.4),\n    stepDuration: varyRelative(legLength * 0.01, 0.4),\n    stepRestDuration: varyRelative(legLength * 0.0083, 0.4),\n    stepThreshold: varyRelative(legLength * 0.01, 0.4),\n    fullStepDistance: varyRelative(legLength * 0.7, 0.4),\n    legWidth: varyRelative(radius * 0.3, 0.4),\n    legPairs: randomInt(1, 4),\n  };\n};\n","import Color from 'color';\n\n// https://coolors.co/f8ffe5-06d6a0-1b9aaa-ef476f-ffc43d\nexport const LIGHT_BG = new Color('#F8FFE5');\nexport const TEAL = new Color('#06D6A0');\nexport const BLUE = new Color('#1B9AAA');\nexport const RED = new Color('#EF476F');\nexport const YELLOW = new Color('#FFC43D');\n"],"names":["$c22de2dc79644c04$export$771f7f07404bb309","$5WDzG","default","getVelocity","getHeadingVec","scale","this","speed","$gcFVl","fromPolar","heading","entity","position2","super","headingVelocity","position","$c22de2dc79644c04$export$5afbdcac57724934","setTarget","newTarget","target","update","dtMilliseconds","dtSeconds","angleToTarget","data","angleTo","distance","distanceTo","accelerate","angleDelta","$j18jr","normalizeAngle","lastHeading","amt","lastSpeed","constrain","avgSpeed","add","entity1","position1","addComponent","$c22de2dc79644c04$export$322a75620edc3405","setPosition","lastPosition","entity2","position3","$ce4d8978209ce2ae$export$9099ad97b570f7c","onRemove","onAddedToScene","scene","onRemovedFromScene","beforeUpdate","delta","afterUpdate","beforeDraw","ctx","time","draw","afterDraw","getScene","$f2b3fa9969eed8fe$export$6d93b59e0635649d","n","fn","result","i","push","$f2b3fa9969eed8fe$export$45ca8e7f50ccf2e0","a","b","$f2b3fa9969eed8fe$export$2317aae10afd0739","$f2b3fa9969eed8fe$export$dd20421f89978a51","min","max","Math","$f2b3fa9969eed8fe$export$c528f904a3813237","a1","b1","a2","b2","$f2b3fa9969eed8fe$export$da08e9e4ef153133","random","$f2b3fa9969eed8fe$export$160029a481c06c21","floor","$f2b3fa9969eed8fe$export$b67d045d0777d8e","base","amount","$f2b3fa9969eed8fe$export$600e7f3d2284626e","$f2b3fa9969eed8fe$export$77d84a253d94711e","arr","length","$f2b3fa9969eed8fe$export$c60c8772e5576eb","reduce","concat","$f2b3fa9969eed8fe$export$bc025b3e1d5076b6","Array","from","Set","$f2b3fa9969eed8fe$export$863a417fd46116e4","a1Items","item","has","$f2b3fa9969eed8fe$export$90c3d251e7bf13b8","items","getKey","groups","Map","key","existing","get","set","$f2b3fa9969eed8fe$export$f12f126c3f678727","slice","sort","$f2b3fa9969eed8fe$export$2bb92b0ac44012ab","condition","pass","fail","$f2b3fa9969eed8fe$export$24325e3b7bd0ef99","array","idx","indexOf","splice","$f2b3fa9969eed8fe$export$247166439aca6a83","Promise","resolve","window","requestAnimationFrame","$f2b3fa9969eed8fe$export$a1aa52cbcd20b120","cb","shouldCancel","cancel","$f2b3fa9969eed8fe$export$9a3b2517da99ca8f","entries","value","$f2b3fa9969eed8fe$export$c2cdcb18fde9adc3","object","Object","keys","$f2b3fa9969eed8fe$export$81a1504436b4693c","$f2b3fa9969eed8fe$export$f550f419b18f1af2","filter","$f2b3fa9969eed8fe$export$36d1719c1c0093ce","angle","size","$f2b3fa9969eed8fe$export$412d6621f9b9540a","PI","$f2b3fa9969eed8fe$export$4b8705656de00c72","$f2b3fa9969eed8fe$export$1179315e3d8d421f","newArr","j","$f2b3fa9969eed8fe$export$b52d3027a78bd277","prefix","toString","$f2b3fa9969eed8fe$export$8db1dbf62fdd6ba9","fallback","localStorage","getItem","JSON","parse","error","console","log","$f2b3fa9969eed8fe$export$be2397b0af798398","stringified","stringify","setItem","$f2b3fa9969eed8fe$export$a5dc91fc2243086a","ms","timeoutHandle","args","undefined","clearTimeout","setTimeout","$f2b3fa9969eed8fe$export$2ae9c6247c57563e","obj","prototype","hasOwnProperty","call","$f2b3fa9969eed8fe$export$7eb84799c931fe91","$f2b3fa9969eed8fe$export$8d68d48314ecb312","epsilon","abs","$f2b3fa9969eed8fe$export$c951543a9be4c097","setupResolve","setupReject","reject","$b33d7521dbc247e4$export$9099ad97b570f7c","radius","cos","sin","points","memo","p","ZERO","div","x","y","magnitudeSquared","magnitude","sqrt","atan2","isInPolygon","polygon","isInside","currentIdx","previousIdx","currentX","currentY","previousX","previousY","equals","other","dx","dy","sub","angleBetween","dot","negate","ceil","round","withMagnitude","newMagnitude","normalize","withAngle","newAngle","rotate","byAngle","lerp","$6530c4804e35d96d$var$HALF_PI","$6530c4804e35d96d$export$9099ad97b570f7c","setAnimationController","animationController","controlData","legs","bobAmount","$aILhO","assert","forEach","leg","getBod","bob","config","bodBob","$gJsWu","bodHeight","getComponent","$hGok8","PalControlData","shuffle","flatten","times","legPairs","progress","$9fRmW","$ed1d19999f5af634$export$9099ad97b570f7c","circumference","getBoundingBox","$44Lwt","center","pointOnCircumference","radians","containsPoint","point","intersectsCircle","withRadius","freeze","$c6aaf09eac67e66a$export$9099ad97b570f7c","left","top","right","bottom","contains","intersects","getCenter","origin","width","height","$1f74b36af21bb930$var$getLegRadius","hipHeight","legWidth","$1f74b36af21bb930$export$9099ad97b570f7c","footXY","footOrigin","footProjectionOrigin","liftAmount","getIdealFootRestingXY","palData","angleOffset","floorRadius","getFootXY","getFootZ","getHipZ","legMaxLift","getFootOrigin","getKneeXY","kneeRadius","kneeMaxOut","getKneeZ","getKneeOrigin","getHipOrigin","getHipXY","hipRadius","bod","palGeom","kneeScale","$25418d05f9b26617$export$62d771998a1345d1","message","Error","$25418d05f9b26617$export$b8795f4f643ce74f","$5ecafb4b34097001$var$HALF_PI","$5ecafb4b34097001$export$9099ad97b570f7c","setLineDash","beginPath","geom","ellipse","fillStyle","fill","l","drawLeg","drawBod","colorDarkenAmount","legColor","color","darken","hip","projectZ","knee","foot","moveTo","quadraticCurveTo","lineCap","strokeStyle","lineWidth","stroke","save","$93VSc","circle","clip","faceX","eyeX","eyeY","eyeRadius","mouthWidth","mouthY","mouthSmile","mouthThickness","makeButtLine","buttThickness","restore","buttX","buttTop","buttBottom","xy","z","$6QVeV","$93dddba8bf9f6409$export$6d7591033d9fdf14","arc","$93dddba8bf9f6409$export$2d694b79c3fc5e44","path","segments","getStart","segment","$izhPG","lineTo","getEnd","$cGqeu","startAngle","endAngle","isAnticlockwise","$a9b665be6e06130e$export$9099ad97b570f7c","line","start","end","getDelta","getLength","getPointAtPosition","constrainedPosition","getAngleAtPosition","$jIpjz","$55fd51c1078cac82$var$isSlopeVertical","slope","Infinity","$55fd51c1078cac82$export$9099ad97b570f7c","displacement","fromSlopeAndDisplacement","isVertical","verticalX","perpendicularSlope","isParallelTo","perpendicularLineThroughPoint","fromSlopeAndPoint","pointAtIntersectionWith","$c4807a2253bd8ec3$export$9099ad97b570f7c","angleDifference","proportion","mapRange","$5fc6afcedabd2d0b$var$isStepping","stepProgress","$5fc6afcedabd2d0b$export$9099ad97b570f7c","pal","updateLegState","legUpdates","map","leg1","getLegUpdate","sum","canLiftLeg","includes","enoughLegsOnFloor","getLegState","anyStepsJustStarted","some","state","restTimer","stepRestDuration","$5fc6afcedabd2d0b$var$isResting","stepDuration","lastFootOnFloorXY","lastFootOnFloorPalPosition","footLeanDistance","stepThreshold","currentStepMaxLift","fullStepDistance","getInitialLegState","legStates","initialState","getLegLiftAmount","getPredictedIdealFootXYAtEndOfOfStep","timeRemaining","predictedPosition","predictedHeading","$bTQ5J","BLUE","lighten","$f8d002921554d4f8$export$9b1652e9c90e3c24","varyRelative","legLength","varyAbsolute","saturate","randomInt","$parcel$interopDefault","$11cc8","$24218dabe7547fce$export$a283c84a2d1e7223"],"version":3,"file":"index.52511123.js.map"}