{"version":3,"sources":["lib/assert.ts","lib/scene/Scene.ts","lib/scene/SceneObject.ts","lib/utils.ts","lib/geom/Vector2.ts","lib/geom/AABB.ts","lib/geom/Circle.ts","lib/geom/Line2.ts","lib/geom/StraightPathSegment.ts","lib/geom/CirclePathSegment.ts","lib/canvasShapeHelpers.ts","lib/easings.ts","network/effects/Pulse.ts","../node_modules/color-name/index.js","../node_modules/is-arrayish/index.js","../node_modules/simple-swizzle/index.js","../node_modules/color-string/index.js","../node_modules/color-convert/node_modules/color-name/index.js","../node_modules/color-convert/conversions.js","../node_modules/color-convert/route.js","../node_modules/color-convert/index.js","../node_modules/color/index.js","network/colors.ts","network/ConnectionDirection.ts","network/ConnectionSet.ts","network/networkNodes/Consumer.ts","lib/scene/SceneSystem.ts","lib/QuadTree.ts","network/TravellerFinder.ts","network/PathFinder.ts","network/networkNodes/Intersection.ts","lib/scene/Component.ts","lib/scene/SortOrderProvider.ts","lib/scene/Entity.ts","pals/PalController.ts","pals/colors.ts","pals/PalConfig.ts","pals/PalLegGeom.ts","pals/PalGeom.ts","pals/PalWalkAnimationController.ts","pals/PalRenderer.ts","pals/makePal.ts","network/Traveller.ts","lib/geom/Path.ts","network/Junction.ts","network/Road.ts","network/networkNodes/Producer.ts","network/network-main.ts"],"names":[],"mappings":"AiBAA,AkBOa,alBLb,AkBKa,IAAA,EAAA,ClBLb,KkBKa,GlBLb,CACA,CkBIa,SlBJb,CAAA,IAAA,GkBIa,ClBJb,KACA,GkBGa,GAAA,OlBHb,AkBGa,ClBHb,EkBGa,ElBHb,AkBGa,IlBHb,KACA,EkBEa,EAAA,ClBFb,AkBEa,ClBFb,EAAA,IAAA,CkBEa,IlBDb,AkBCa,OAAA,IlBDb,CAAA,IAAA,IAAA,EkBCa,GlBAb,KkBAa,ClBAb,CAAA,IAAA,IAAA,GkBAa,CAAA,ClBCb,MAAA,AkBDa,ClBCb,GkBDa,ClBCb,IAAA,GkBDa,ElBEb,KkBFa,ElBEb,CAAA,IAAA,CkBFa,GlBEb,CkBFa,IlBGb,IkBHa,ElBGb,CAAA,EAAA,AkBHa,ElBGb,GACA,GkBJa,KAAA,OlBIb,CAAA,AkBJa,IlBIb,IAAA,KACA,CkBLa,EAPb,ElBYA,CAAA,CkBZA,ClBYA,CkBZA,ClBYA,CkBZA,IlBaA,IkBbA,OlBaA,CAAA,EkBVa,ElBUb,GAAA,GkBVa,ElBWb,MAAA,CAAA,AkBXwB,IlBWxB,AkBX4B,EAAA,ClBW5B,IACA,GkBZkC,OlBYlC,CAAA,GkBXa,ClBWb,IAAA,GkBXa,ElBYb,GkBZoB,IAAI,EAAA,ClBYxB,CAAA,GAAA,GkBZ8B,ClBY9B,KACA,KkBZa,MlBYb,CAAA,CkBZa,GlBYb,EkBZoB,ElBYpB,EkBZwB,ClBaxB,CkBbwB,QAAM,ClBa9B,CAAA,IAAA,IAAA,CkBZa,GlBab,KkBba,ClBab,CAAA,EkBbmB,ElBanB,EkBbuB,ElBavB,AkBbuB,IlBcvB,IkBd6B,WlBc7B,AkBba,ClBab,IAAA,GkBba,ClBab,KACA,CkBdsB,IAAI,EAAA,ElBc1B,CAAA,IAAA,CkBdgC,GlBchC,KACA,QAAA,CAAA,IAAA,GAAA,IACA,KAAA,CAAA,EAAA,IAAA,KACA,SAAA,CAAA,EAAA,EAAA,KACA,SAAA,CAAA,EAAA,IAAA,KACA,cAAA,CAAA,IAAA,IAAA,IACA,SAAA,CAAA,IAAA,IAAA,KACA,UAAA,CAAA,EAAA,IAAA,GACA,SAAA,CAAA,IAAA,IAAA,KACA,UAAA,CAAA,IAAA,I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","file":"network-main.e048eae0.js","sourceRoot":"../src","sourcesContent":["export function assert(value: unknown, message?: string): asserts value {\n  if (!value) {\n    throw new Error(message || 'Assertion Error');\n  }\n}\n","import { assert } from '../assert';\nimport SceneObject from './SceneObject';\nimport SceneSystem from './SceneSystem';\n\nconst speed = 1;\nconst scale = 1;\nconst repeatUpdate = 1;\n\ntype SystemClass<T extends SceneSystem = SceneSystem> = {\n  systemName: string;\n  new (): T;\n};\n\nexport default class Scene {\n  canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private _scaleFactor: number;\n  private _children: SceneObject[] = [];\n  private _isPlaying: boolean = false;\n  private frameHandle: number | null = null;\n  private lastElapsedTime: number | null = null;\n  private systemsByClass = new Map<SystemClass<SceneSystem>, SceneSystem>();\n\n  constructor(width: number, height: number, scaleFactor: number = 1) {\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = width * scaleFactor;\n    this.canvas.height = height * scaleFactor;\n    this.canvas.style.width = `${width}px`;\n    this.canvas.style.height = `${height}px`;\n    const ctx = this.canvas.getContext('2d');\n    assert(ctx, 'ctx');\n    this.ctx = ctx;\n    this._scaleFactor = scaleFactor * scale;\n\n    this._setupVisiblityChange();\n  }\n\n  get width(): number {\n    return this.canvas.width / this._scaleFactor;\n  }\n\n  get height(): number {\n    return this.canvas.height / this._scaleFactor;\n  }\n\n  get scaleFactor(): number {\n    return this._scaleFactor;\n  }\n\n  get isPlaying(): boolean {\n    return this.frameHandle !== null && this._isPlaying;\n  }\n\n  set isPlaying(newValue: boolean) {\n    assert(\n      this.frameHandle !== null,\n      'cannot set isPlaying without calling start',\n    );\n    this._isPlaying = newValue;\n  }\n\n  get children(): SceneObject[] {\n    return this._children;\n  }\n\n  appendTo(element: HTMLElement) {\n    element.appendChild(this.canvas);\n  }\n\n  hasSystem(systemType: SystemClass): boolean {\n    return this.systemsByClass.has(systemType);\n  }\n\n  getSystem<T extends SceneSystem>(systemType: SystemClass<T>): T {\n    const system = this.systemsByClass.get(systemType);\n    assert(system, `system, ${systemType.systemName} not found`);\n    assert(system instanceof systemType, 'system is wrong instance type');\n    return system;\n  }\n\n  addSystem(system: SceneSystem) {\n    assert(\n      !this.hasSystem(system.constructor as any),\n      'only one system of each type allowed',\n    );\n    this.systemsByClass.set(system.constructor as any, system);\n    system.afterAddToScene(this);\n  }\n\n  removeSystem(systemType: SystemClass) {\n    const system = this.getSystem(systemType);\n    system.beforeRemoveFromScene(this);\n    this.systemsByClass.delete(systemType);\n  }\n\n  addChild(child: SceneObject) {\n    this._children.push(child);\n    child.onAddedToScene(this);\n  }\n\n  addChildBefore(targetChild: SceneObject, newChild: SceneObject) {\n    const index = this._children.indexOf(targetChild);\n    assert(index !== -1, 'target child must be present');\n\n    this.addChildAtIndex(index, newChild);\n  }\n\n  addChildAfter(targetChild: SceneObject, newChild: SceneObject) {\n    const index = this._children.indexOf(targetChild);\n    assert(index !== -1, 'target child must be present');\n\n    this.addChildAtIndex(index + 1, newChild);\n  }\n\n  addChildAtIndex(index: number, child: SceneObject) {\n    this._children.splice(index, 0, child);\n    child.onAddedToScene(this);\n  }\n\n  removeChild(child: SceneObject): boolean {\n    const index = this._children.indexOf(child);\n    if (index === -1) return false;\n\n    this.removeChildAtIndex(index);\n    return true;\n  }\n\n  removeChildAtIndex(index: number): SceneObject {\n    const child = this._children[index];\n    this._children.splice(index, 1);\n    child.onRemovedFromScene();\n    return child;\n  }\n\n  update(delta: number) {\n    for (let i = 0; i < repeatUpdate; i++) {\n      for (const system of this.systemsByClass.values()) {\n        system.beforeUpdate(delta);\n      }\n      this._children.forEach(child => child.update(delta));\n      for (const system of this.systemsByClass.values()) {\n        system.afterUpdate(delta);\n      }\n    }\n  }\n\n  draw(elapsedTime: number) {\n    this.ctx.save();\n    this.ctx.scale(this._scaleFactor, this._scaleFactor);\n    this.ctx.clearRect(0, 0, this.width, this.height);\n\n    for (const system of this.systemsByClass.values()) {\n      system.beforeDraw(this.ctx, elapsedTime);\n    }\n    this._children\n      .sort((a, b) => a.getSortOrder() - b.getSortOrder())\n      .forEach(child => child.draw(this.ctx, elapsedTime));\n    for (const system of this.systemsByClass.values()) {\n      system.afterDraw(this.ctx, elapsedTime);\n    }\n\n    this.ctx.restore();\n  }\n\n  start() {\n    this._isPlaying = true;\n    this.frameHandle = window.requestAnimationFrame(this._tick);\n  }\n\n  stop() {\n    if (this.frameHandle !== null) {\n      window.cancelAnimationFrame(this.frameHandle);\n      this.frameHandle = null;\n    }\n    this._isPlaying = false;\n    this.lastElapsedTime = null;\n  }\n\n  _tick = (elapsedTime: number) => {\n    elapsedTime = elapsedTime * speed;\n    const lastElapsedTime = this.lastElapsedTime;\n    if (lastElapsedTime !== null) {\n      const deltaTime = elapsedTime - lastElapsedTime;\n      if (this.isPlaying) {\n        this.update(deltaTime);\n        this.draw(elapsedTime);\n      }\n    }\n\n    this.lastElapsedTime = elapsedTime;\n    this.frameHandle = window.requestAnimationFrame(this._tick);\n  };\n\n  _setupVisiblityChange() {\n    let playOnVisible = false;\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden && this.isPlaying) {\n        playOnVisible = true;\n        this.stop();\n      }\n      if (playOnVisible && !document.hidden) {\n        playOnVisible = false;\n        this.start();\n      }\n    });\n  }\n}\n","import { assert } from '../assert';\nimport Scene from './Scene';\n\nconst constructorIdCounts = {} as Record<string, number>;\n\nconst getNextCount = (name: string): string => {\n  if (!constructorIdCounts[name]) constructorIdCounts[name] = 0;\n  return `${name}@${constructorIdCounts[name]++}`;\n};\n\nexport default abstract class SceneObject {\n  id: string = getNextCount(this.constructor.name);\n  private scene: Scene | null = null;\n\n  hasScene(): boolean {\n    return this.scene !== null;\n  }\n\n  getScene(): Scene {\n    assert(this.scene, 'scene must be present');\n    return this.scene;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, elapsedTime: number): void {}\n  update(delta: number): void {}\n\n  addTo(scene: Scene): this {\n    scene.addChild(this);\n    return this;\n  }\n\n  onAddedToScene(scene: Scene) {\n    this.scene = scene;\n  }\n\n  onRemovedFromScene() {\n    this.scene = null;\n  }\n\n  getSortOrder(): number {\n    return 0;\n  }\n}\n","export type TimeoutId = ReturnType<typeof setTimeout>;\nexport type IntervalId = ReturnType<typeof setInterval>;\n\nexport function times<T>(n: number, fn: (idx: number) => T): Array<T> {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(fn(i));\n  }\n  return result;\n}\n\nexport function lerp(a: number, b: number, n: number): number {\n  return (b - a) * n + a;\n}\n\nexport function invLerp(a: number, b: number, n: number): number {\n  return (n - a) / (b - a);\n}\n\nexport function constrain(min: number, max: number, n: number): number {\n  return Math.min(max, Math.max(min, n));\n}\n\nexport function constrainWrapped(min: number, max: number, n: number): number {\n  const size = max - min;\n  n = n - min;\n  while (n < 0) {\n    n += size;\n  }\n  n = n % size;\n  return min + n;\n}\n\nexport function mapRange(\n  a1: number,\n  b1: number,\n  a2: number,\n  b2: number,\n  n: number,\n): number {\n  return lerp(a2, b2, invLerp(a1, b1, n));\n}\n\nexport function random(a: number, b?: number) {\n  if (typeof b === 'number') {\n    return lerp(a, b, Math.random());\n  }\n  return lerp(0, a, Math.random());\n}\n\nexport function randomInt(a: number, b?: number) {\n  return Math.floor(random(a, b));\n}\n\nexport function varyAbsolute(base: number, amount: number): number {\n  return random(base - amount, base + amount);\n}\n\nexport function varyRelative(base: number, amount: number): number {\n  return varyAbsolute(base, base * amount);\n}\n\nexport function sample<T>(arr: ReadonlyArray<T>): T {\n  return arr[Math.floor(random(arr.length))];\n}\n\nexport function flatten<T>(arr: ReadonlyArray<ReadonlyArray<T>>): Array<T> {\n  return arr.reduce<Array<T>>((a, b) => a.concat(b), []);\n}\n\nexport function uniq<T>(arr: T[]): Array<T> {\n  return Array.from(new Set(arr));\n}\n\nexport function intersection<T>(a1: T[], a2: T[]): T[] {\n  const a1Items = new Set(a1);\n  const result = new Set<T>();\n  for (const item of a2) {\n    if (a1Items.has(item)) {\n      result.add(item);\n    }\n  }\n  return Array.from(result);\n}\n\nexport function groupBy<T, Key>(\n  items: ReadonlyArray<T>,\n  getKey: (item: T) => Key,\n): Map<Key, Array<T>> {\n  const groups = new Map<Key, T[]>();\n  for (const item of items) {\n    const key = getKey(item);\n    const existing = groups.get(key);\n    if (existing) {\n      existing.push(item);\n    } else {\n      groups.set(key, [item]);\n    }\n  }\n\n  return groups;\n}\n\nexport function sortBy<T, Key extends number | string>(\n  items: ReadonlyArray<T>,\n  getKey: (item: T) => Key,\n): Array<T> {\n  return items.slice().sort((a, b) => (getKey(a) < getKey(b) ? -1 : 1));\n}\n\nexport function partition<T>(\n  items: ReadonlyArray<T>,\n  condition: (item: T) => boolean,\n): [T[], T[]] {\n  const pass = [];\n  const fail = [];\n  for (const item of items) {\n    if (condition(item)) {\n      pass.push(item);\n    } else {\n      fail.push(item);\n    }\n  }\n  return [pass, fail];\n}\n\nexport function randomColor(): string {\n  return `rgb(${Math.floor(random(256))},${Math.floor(\n    random(256),\n  )},${Math.floor(random(256))})`;\n}\n\nexport function removeFromArray<T>(array: Array<T>, item: T) {\n  const idx = array.indexOf(item);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n}\n\nexport function frame(): Promise<number> {\n  return new Promise((resolve) => {\n    window.requestAnimationFrame((time) => resolve(time));\n  });\n}\n\nexport function wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(() => resolve(), ms));\n}\n\nexport async function frameLoop(\n  cb: (time: number, cancel: () => void) => void,\n) {\n  let shouldCancel = false;\n  const cancel = () => {\n    shouldCancel = true;\n  };\n  while (true) {\n    cb(await frame(), cancel);\n    if (shouldCancel) {\n      return;\n    }\n  }\n}\n\nexport function fromEntries<K extends PropertyKey, V>(\n  entries: ReadonlyArray<[K, V]>,\n): Record<K, V> {\n  const result = {} as Record<K, V>;\n  for (const [key, value] of entries) {\n    result[key] = value;\n  }\n  return result;\n}\n\nexport function compact<T>(arr: ReadonlyArray<T>): Array<NonNullable<T>> {\n  return arr.filter(\n    (item): item is NonNullable<T> => item !== null && item !== undefined,\n  );\n}\n\nexport function normalizeAngle(angle: number): number {\n  return constrainWrapped(-Math.PI, Math.PI, angle);\n}\n\nexport function clamp(a: number, b: number, n: number): number {\n  return Math.max(Math.min(a, b), Math.min(Math.max(a, b), n));\n}\n\nexport function shuffle<T>(arr: ReadonlyArray<T>): Array<T> {\n  const newArr = arr.slice();\n  for (let i = newArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n  }\n  return newArr;\n}\n\nexport function getId(prefix = ''): string {\n  return `${prefix}${Math.random().toString(36).slice(1)}`;\n}\n\nexport function getLocalStorageItem(\n  key: string,\n  fallback: unknown = null,\n): unknown {\n  try {\n    // Get from local storage by key\n    const item = window.localStorage.getItem(key);\n    // Parse stored json or if none return initialValue\n    return item ? JSON.parse(item) : fallback;\n  } catch (error) {\n    // If error also return initialValue\n    console.log(error);\n    return fallback;\n  }\n}\n\nexport function setLocalStorageItem(key: string, value: unknown) {\n  const stringified = JSON.stringify(value);\n  try {\n    window.localStorage.setItem(key, stringified);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function debounce<Args extends Array<unknown>>(\n  ms: number,\n  fn: (...args: Args) => void,\n): (...args: Args) => void {\n  let timeoutHandle: TimeoutId | undefined;\n\n  return (...args: Args) => {\n    if (timeoutHandle !== undefined) {\n      clearTimeout(timeoutHandle);\n    }\n    timeoutHandle = setTimeout(() => fn(...args), ms);\n  };\n}\n\nexport function exhaustiveSwitchError(value: never): never {\n  throw new Error(`Unknown switch case ${value}`);\n}\n","import { normalizeAngle, lerp } from '../utils';\n\nexport default class Vector2 {\n  static readonly ZERO = new Vector2(0, 0);\n\n  static fromPolar(angle: number, radius: number) {\n    return new Vector2(radius * Math.cos(angle), radius * Math.sin(angle));\n  }\n\n  static average(points: ReadonlyArray<Vector2>): Vector2 {\n    const sum = points.reduce((memo, p) => memo.add(p), Vector2.ZERO);\n    return sum.div(points.length);\n  }\n\n  constructor(public readonly x: number, public readonly y: number) {}\n\n  toString(): string {\n    return `Vector2(${this.x}, ${this.y})`;\n  }\n\n  get magnitudeSquared(): number {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  get magnitude(): number {\n    return Math.sqrt(this.magnitudeSquared);\n  }\n\n  get angle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  isInPolygon(polygon: ReadonlyArray<Vector2>): boolean {\n    // ray-casting algorithm based on\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n    const { x, y } = this;\n\n    let isInside = false;\n    for (\n      let currentIdx = 0, previousIdx = polygon.length - 1;\n      currentIdx < polygon.length;\n      previousIdx = currentIdx++\n    ) {\n      const { x: currentX, y: currentY } = polygon[currentIdx];\n      const { x: previousX, y: previousY } = polygon[previousIdx];\n      const doesIntersect =\n        currentY > y != previousY > y &&\n        x <\n          ((previousX - currentX) * (y - currentY)) / (previousY - currentY) +\n            currentX;\n\n      if (doesIntersect) {\n        isInside = !isInside;\n      }\n    }\n\n    return isInside;\n  }\n\n  equals(other: Vector2) {\n    return this === other || (this.x === other.x && this.y === other.y);\n  }\n\n  distanceTo({ x, y }: Vector2): number {\n    const dx = x - this.x;\n    const dy = y - this.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  angleTo(other: Vector2): number {\n    return other.sub(this).angle;\n  }\n\n  angleBetween(other: Vector2): number {\n    return normalizeAngle(\n      Math.atan2(other.y, other.x) - Math.atan2(this.y, this.x),\n    );\n  }\n\n  dot(other: Vector2): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  div(scale: number): Vector2 {\n    return new Vector2(this.x / scale, this.y / scale);\n  }\n\n  scale(scale: number): Vector2 {\n    return new Vector2(this.x * scale, this.y * scale);\n  }\n\n  negate(): Vector2 {\n    return this.scale(-1);\n  }\n\n  add({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x + x, this.y + y);\n  }\n\n  sub({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x - x, this.y - y);\n  }\n\n  floor(): Vector2 {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y));\n  }\n\n  ceil(): Vector2 {\n    return new Vector2(Math.ceil(this.x), Math.ceil(this.y));\n  }\n\n  round(): Vector2 {\n    return new Vector2(Math.round(this.x), Math.round(this.y));\n  }\n\n  withMagnitude(newMagnitude: number): Vector2 {\n    return Vector2.fromPolar(this.angle, newMagnitude);\n  }\n\n  withAngle(newAngle: number): Vector2 {\n    return Vector2.fromPolar(newAngle, this.magnitude);\n  }\n\n  rotate(byAngle: number): Vector2 {\n    return this.withAngle(this.angle + byAngle);\n  }\n\n  lerp(other: Vector2, n: number): Vector2 {\n    return new Vector2(lerp(this.x, other.x, n), lerp(this.y, other.y, n));\n  }\n}\n","import Vector2 from './Vector2';\n\nexport default class AABB {\n  static fromLeftTopRightBottom(\n    left: number,\n    top: number,\n    right: number,\n    bottom: number,\n  ): AABB {\n    return new AABB(\n      new Vector2(left, top),\n      new Vector2(right - left, bottom - top),\n    );\n  }\n\n  constructor(public readonly origin: Vector2, public readonly size: Vector2) {\n    Object.freeze(this);\n  }\n\n  contains({ x, y }: Vector2): boolean {\n    return (\n      this.left <= x && x <= this.right && this.top <= y && y <= this.bottom\n    );\n  }\n\n  intersects(other: AABB): boolean {\n    return !(\n      this.right < other.left ||\n      this.left > other.right ||\n      this.bottom < other.top ||\n      this.top > other.bottom\n    );\n  }\n\n  getCenter(): Vector2 {\n    return this.origin.add(this.size.scale(0.5));\n  }\n\n  get left(): number {\n    return this.origin.x;\n  }\n\n  get right(): number {\n    return this.origin.x + this.size.x;\n  }\n\n  get top(): number {\n    return this.origin.y;\n  }\n\n  get bottom(): number {\n    return this.origin.y + this.size.y;\n  }\n}\n","// @flow\nimport Vector2 from './Vector2';\nimport AABB from './AABB';\n\nexport default class Circle {\n  readonly center: Vector2;\n  readonly radius: number;\n\n  constructor(x: number, y: number, radius: number) {\n    this.center = new Vector2(x, y);\n    this.radius = radius;\n    Object.freeze(this);\n  }\n\n  get circumference(): number {\n    return 2 * Math.PI * this.radius;\n  }\n\n  getBoundingBox(): AABB {\n    return new AABB(\n      new Vector2(this.center.x, this.center.y),\n      new Vector2(this.radius * 2, this.radius * 2),\n    );\n  }\n\n  // debugDraw(color: string) {\n  //   const ctx: CanvasRenderingContext2D = window.debugContext;\n  //   ctx.strokeStyle = color;\n  //   ctx.lineWidth = 1;\n  //   ctx.beginPath();\n  //   ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, false);\n  //   ctx.stroke();\n  // }\n\n  pointOnCircumference(radians: number): Vector2 {\n    return new Vector2(\n      this.center.x + Math.cos(radians) * this.radius,\n      this.center.y + Math.sin(radians) * this.radius,\n    );\n  }\n\n  containsPoint(point: Vector2): boolean {\n    return point.distanceTo(this.center) < this.radius;\n  }\n\n  intersectsCircle(other: Circle): boolean {\n    return this.center.distanceTo(other.center) < this.radius + other.radius;\n  }\n\n  withRadius(radius: number): Circle {\n    return new Circle(this.center.x, this.center.y, radius);\n  }\n}\n","// @flow\nimport { assert } from '../assert';\nimport Vector2 from './Vector2';\n\nconst isSlopeVertical = (slope: number) =>\n  slope === Infinity || slope === -Infinity;\n\nexport default class Line2 {\n  static fromSlopeAndDisplacement(slope: number, displacement: number) {\n    assert(\n      !isSlopeVertical(slope),\n      'cannot create vertical line from displacement',\n    );\n\n    const start = new Vector2(0, displacement);\n    const end = new Vector2(1, slope + displacement);\n    return new Line2(start, end);\n  }\n\n  static fromSlopeAndPoint(slope: number, point: Vector2): Line2 {\n    if (isSlopeVertical(slope)) {\n      return new Line2(point, new Vector2(point.x, point.y + 1));\n    }\n\n    const displacement = point.y - point.x * slope;\n    return Line2.fromSlopeAndDisplacement(slope, displacement);\n  }\n\n  readonly start: Vector2;\n  readonly end: Vector2;\n\n  constructor(a: Vector2, b: Vector2) {\n    this.start = a;\n    this.end = b;\n  }\n\n  getDelta(): Vector2 {\n    return this.end.sub(this.start);\n  }\n\n  get slope(): number {\n    return (this.end.y - this.start.y) / (this.end.x - this.start.x);\n  }\n\n  get displacement(): number {\n    return this.start.y - this.start.x * this.slope;\n  }\n\n  get isVertical(): boolean {\n    return isSlopeVertical(this.slope);\n  }\n\n  get verticalX(): number {\n    assert(this.isVertical, 'verticalX is not defined on non vertical lines');\n    return this.start.x;\n  }\n\n  get perpendicularSlope(): number {\n    if (this.isVertical) return 0;\n    return -1 / this.slope;\n  }\n\n  isParallelTo(other: Line2): boolean {\n    return (this.isVertical && other.isVertical) || this.slope === other.slope;\n  }\n\n  perpendicularLineThroughPoint(point: Vector2): Line2 {\n    return Line2.fromSlopeAndPoint(this.perpendicularSlope, point);\n  }\n\n  pointAtIntersectionWith(other: Line2): Vector2 {\n    assert(!this.isParallelTo(other), 'parallel lines do not intersect');\n\n    let x;\n    if (this.isVertical) {\n      x = this.verticalX;\n    } else if (other.isVertical) {\n      x = other.verticalX;\n    } else {\n      x = (this.displacement - other.displacement) / (other.slope - this.slope);\n    }\n\n    const y = this.isVertical\n      ? other.slope * x + other.displacement\n      : this.slope * x + this.displacement;\n\n    return new Vector2(x, y);\n  }\n}\n","// @flow\nimport { constrain } from '../utils';\nimport Vector2 from './Vector2';\nimport { PathSegment } from './Path';\nimport Line2 from './Line2';\n\nexport default class StraightPathSegment implements PathSegment {\n  readonly line: Line2;\n  private readonly delta: Vector2;\n\n  constructor(start: Vector2, end: Vector2) {\n    this.line = new Line2(start, end);\n    this.delta = this.line.getDelta();\n    Object.freeze(this);\n  }\n\n  getStart(): Vector2 {\n    return this.line.start;\n  }\n\n  getEnd(): Vector2 {\n    return this.line.end;\n  }\n\n  getDelta(): Vector2 {\n    return this.delta;\n  }\n\n  getLength(): number {\n    return this.delta.magnitude;\n  }\n\n  get angle(): number {\n    return this.delta.angle;\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const constrainedPosition = constrain(0, this.getLength(), position);\n    return this.delta.withMagnitude(constrainedPosition).add(this.line.start);\n  }\n\n  getAngleAtPosition(): number {\n    return this.delta.angle;\n  }\n}\n","// @flow\nimport { constrain, mapRange } from '../utils';\nimport Vector2 from './Vector2';\nimport Circle from './Circle';\nimport { PathSegment } from './Path';\n\nexport default class CirclePathSegment implements PathSegment {\n  readonly circle: Circle;\n  readonly startAngle: number;\n  readonly endAngle: number;\n\n  constructor(\n    center: Vector2,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n  ) {\n    this.circle = new Circle(center.x, center.y, radius);\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    Object.freeze(this);\n  }\n\n  getStart(): Vector2 {\n    return this.circle.pointOnCircumference(this.startAngle);\n  }\n\n  getEnd(): Vector2 {\n    return this.circle.pointOnCircumference(this.endAngle);\n  }\n\n  get angleDifference(): number {\n    return Math.atan2(\n      Math.sin(this.endAngle - this.startAngle),\n      Math.cos(this.endAngle - this.startAngle),\n    );\n  }\n\n  getLength(): number {\n    const proportion = Math.abs(this.angleDifference) / (Math.PI * 2);\n    return this.circle.circumference * proportion;\n  }\n\n  get isAnticlockwise(): boolean {\n    return this.angleDifference < 0;\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const angle = mapRange(\n      0,\n      this.getLength(),\n      this.startAngle,\n      this.startAngle + this.angleDifference,\n      constrain(0, this.getLength(), position),\n    );\n    return this.circle.pointOnCircumference(angle);\n  }\n\n  getAngleAtPosition(position: number): number {\n    if (this.isAnticlockwise) {\n      return (\n        mapRange(\n          0,\n          this.getLength(),\n          this.startAngle,\n          this.startAngle + this.angleDifference,\n          constrain(0, this.getLength(), position),\n        ) -\n        Math.PI / 2\n      );\n    } else {\n      return (\n        mapRange(\n          0,\n          this.getLength(),\n          this.startAngle,\n          this.startAngle + this.angleDifference,\n          constrain(0, this.getLength(), position),\n        ) +\n        Math.PI / 2\n      );\n    }\n  }\n}\n","// @flow\nimport Path from './geom/Path';\nimport StraightPathSegment from './geom/StraightPathSegment';\nimport CirclePathSegment from './geom/CirclePathSegment';\n\nexport function circle(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  radius: number,\n) {\n  ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n}\n\nexport function path(ctx: CanvasRenderingContext2D, path: Path) {\n  if (path.segments.length) {\n    ctx.moveTo(path.segments[0].getStart().x, path.segments[0].getStart().y);\n  }\n\n  for (const segment of path.segments) {\n    if (segment instanceof StraightPathSegment) {\n      ctx.lineTo(segment.getEnd().x, segment.getEnd().y);\n    } else if (segment instanceof CirclePathSegment) {\n      ctx.arc(\n        segment.circle.center.x,\n        segment.circle.center.y,\n        segment.circle.radius,\n        segment.startAngle,\n        segment.endAngle,\n        segment.isAnticlockwise,\n      );\n    } else {\n      throw new Error(`Unknown path segment type: ${segment.toString()}`);\n    }\n  }\n}\n","/** n should be between 0 and 1 */\nexport type Easing = (n: number) => number;\n\n// https://gist.github.com/rezoner/713615dabedb59a15470\n// http://gsgd.co.uk/sandbox/jquery/easing/\nexport const reverse = (easing: (n: number) => number) => (n: number): number =>\n  easing(1 - n);\n\nexport const linear = (n: number): number => n;\n\nexport const inQuad = (t: number): number => t * t;\n\nexport const outQuad = (t: number): number => t * (2 - t);\n\nexport const inOutQuad = (t: number): number =>\n  t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n\nexport const inCubic = (t: number): number => t * t * t;\n\nexport const outCubic = (t: number): number => --t * t * t + 1;\n\nexport const inOutCubic = (t: number): number =>\n  t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n\nexport const inQuart = (t: number): number => t * t * t * t;\n\nexport const outQuart = (t: number): number => 1 - --t * t * t * t;\n\nexport const inOutQuart = (t: number): number =>\n  t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n\nexport const inQuint = (t: number): number => t * t * t * t * t;\n\nexport const outQuint = (t: number): number => 1 + --t * t * t * t * t;\n\nexport const inOutQuint = (t: number): number =>\n  t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n\nexport const inSine = (t: number): number =>\n  -1 * Math.cos((t / 1) * (Math.PI * 0.5)) + 1;\n\nexport const outSine = (t: number): number =>\n  Math.sin((t / 1) * (Math.PI * 0.5));\n\nexport const inOutSine = (t: number): number =>\n  (-1 / 2) * (Math.cos(Math.PI * t) - 1);\n\nexport const inExpo = (t: number): number =>\n  t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n\nexport const outExpo = (t: number): number =>\n  t == 1 ? 1 : -Math.pow(2, -10 * t) + 1;\n\nexport const inOutExpo = (t: number): number => {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  if ((t /= 1 / 2) < 1) return (1 / 2) * Math.pow(2, 10 * (t - 1));\n  return (1 / 2) * (-Math.pow(2, -10 * --t) + 2);\n};\n\nexport const inCirc = (t: number): number => -1 * (Math.sqrt(1 - t * t) - 1);\n\nexport const outCirc = (t: number): number => Math.sqrt(1 - (t = t - 1) * t);\n\nexport const inOutCirc = (t: number): number => {\n  if ((t /= 1 / 2) < 1) return (-1 / 2) * (Math.sqrt(1 - t * t) - 1);\n  return (1 / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1);\n};\n\nexport const inElastic = (t: number): number => {\n  let s = 1.70158;\n  let p = 0;\n  let a = 1;\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  if (!p) p = 0.3;\n  if (a < 1) {\n    a = 1;\n    s = p / 4;\n  } else {\n    s = (p / (2 * Math.PI)) * Math.asin(1 / a);\n  }\n  return -(\n    a *\n    Math.pow(2, 10 * (t -= 1)) *\n    Math.sin(((t - s) * (2 * Math.PI)) / p)\n  );\n};\n\nexport const outElastic = (t: number): number => {\n  let s = 1.70158;\n  let p = 0;\n  let a = 1;\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  if (!p) p = 0.3;\n  if (a < 1) {\n    a = 1;\n    s = p / 4;\n  } else {\n    s = (p / (2 * Math.PI)) * Math.asin(1 / a);\n  }\n  return a * Math.pow(2, -10 * t) * Math.sin(((t - s) * (2 * Math.PI)) / p) + 1;\n};\n\nexport const inOutElastic = (t: number): number => {\n  let s = 1.70158;\n  let p = 0;\n  let a = 1;\n  if (t == 0) return 0;\n  if ((t /= 1 / 2) == 2) return 1;\n  if (!p) p = 0.3 * 1.5;\n  if (a < 1) {\n    a = 1;\n    s = p / 4;\n  } else {\n    s = (p / (2 * Math.PI)) * Math.asin(1 / a);\n  }\n  if (t < 1)\n    return (\n      -0.5 *\n      (a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t - s) * (2 * Math.PI)) / p))\n    );\n  return (\n    a *\n      Math.pow(2, -10 * (t -= 1)) *\n      Math.sin(((t - s) * (2 * Math.PI)) / p) *\n      0.5 +\n    1\n  );\n};\n\nexport const inBack = (s: number = 1.70158) => (t: number): number => {\n  return 1 * t * t * ((s + 1) * t - s);\n};\n\nexport const outBack = (s: number = 1.70158) => (t: number): number => {\n  t = t - 1;\n  return 1 * (t * t * ((s + 1) * t + s) + 1);\n};\n\nexport const inOutBack = (s: number = 1.70158) => (t: number): number => {\n  if ((t /= 1 / 2) < 1) return (1 / 2) * (t * t * (((s *= 1.525) + 1) * t - s));\n  return (1 / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n};\n\nexport const inBounce = (t: number): number => {\n  return 1 - outBounce(1 - t);\n};\n\nexport const outBounce = (t: number): number => {\n  if ((t /= 1) < 1 / 2.75) {\n    return 7.5625 * t * t;\n  } else if (t < 2 / 2.75) {\n    return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n  } else if (t < 2.5 / 2.75) {\n    return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n  } else {\n    return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n  }\n};\n\nexport const inOutBounce = (t: number): number => {\n  if (t < 1 / 2) return inBounce(t * 2) * 0.5;\n  return outBounce(t * 2 - 1) * 0.5 + 0.5;\n};\n","import Color from 'color';\nimport SceneObject from '../../lib/scene/SceneObject';\nimport * as ShapeHelpers from '../../lib/canvasShapeHelpers';\nimport Circle from '../../lib/geom/Circle';\nimport { linear, Easing } from '../../lib/easings';\nimport { lerp } from '../../lib/utils';\n\ntype PulseOptions = {\n  x: number;\n  y: number;\n  startRadius: number;\n  endRadius: number;\n  duration: number;\n  color: Color;\n  easeRadius?: Easing;\n  easeOpacity?: Easing;\n  removeOnComplete?: boolean;\n};\n\nexport default class Pulse extends SceneObject {\n  _circle: Circle;\n  _startRadius: number;\n  _endRadius: number;\n  _duration: number;\n  _color: Color;\n  _progress: number;\n  _easeRadius: Easing;\n  _easeOpacity: Easing;\n  _removeOnComplete: boolean;\n\n  constructor({\n    x,\n    y,\n    startRadius,\n    endRadius,\n    duration,\n    color,\n    easeRadius = linear,\n    easeOpacity = linear,\n    removeOnComplete = false,\n  }: PulseOptions) {\n    super();\n    this._circle = new Circle(x, y, startRadius);\n    this._startRadius = startRadius;\n    this._endRadius = endRadius;\n    this._duration = duration;\n    this._color = color;\n    this._progress = 0;\n    this._easeRadius = easeRadius;\n    this._easeOpacity = easeOpacity;\n    this._removeOnComplete = removeOnComplete;\n  }\n\n  update(deltaTime: number) {\n    const deltaProgress = deltaTime / this._duration;\n    this._progress = Math.min(1, this._progress + deltaProgress);\n    this._circle = this._circle.withRadius(\n      lerp(\n        this._startRadius,\n        this._endRadius,\n        this._easeRadius(this._progress),\n      ),\n    );\n\n    if (this._progress === 1 && this._removeOnComplete) {\n      this.getScene().removeChild(this);\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    const opacity = this._easeOpacity(this._progress);\n    ctx.fillStyle = this._color.fade(opacity).toString();\n    ShapeHelpers.circle(\n      ctx,\n      this._circle.center.x,\n      this._circle.center.y,\n      this._circle.radius,\n    );\n    ctx.fill();\n  }\n}\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (obj == null) { // eslint-disable-line no-eq-null,eqeqeq\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tif (!mixinColor || !mixinColor.rgb) {\n\t\t\tthrow new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n\t\t}\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","import Color from 'color';\n\n// https://coolors.co/f8ffe5-06d6a0-1b9aaa-ef476f-ffc43d\nexport const LIGHT_BG = new Color('#F8FFE5');\nexport const TEAL = new Color('#06D6A0');\nexport const BLUE = new Color('#1B9AAA');\nexport const RED = new Color('#EF476F');\nexport const YELLOW = new Color('#FFC43D');\n","enum ConnectionDirection {\n  IN = 'in',\n  OUT = 'out',\n}\n\nexport default ConnectionDirection;\n","import { sample } from '../lib/utils';\nimport Road from './Road';\nimport ConnectionDirection from './ConnectionDirection';\n\nexport default class ConnectionSet {\n  incoming: Road[] = [];\n  outgoing: Road[] = [];\n\n  add(target: Road, direction: ConnectionDirection) {\n    switch (direction) {\n      case ConnectionDirection.IN:\n        this.addIncoming(target);\n        break;\n      case ConnectionDirection.OUT:\n        this.addOutgoing(target);\n        break;\n      default:\n        throw new Error(`unknow connection direction ${direction}`);\n    }\n  }\n\n  addIncoming(target: Road) {\n    this.incoming.push(target);\n  }\n\n  addOutgoing(target: Road) {\n    this.outgoing.push(target);\n  }\n\n  sampleIncoming(): Road {\n    return sample(this.incoming);\n  }\n\n  sampleOutgoing(): Road {\n    return sample(this.outgoing);\n  }\n}\n","// @flow\nimport { assert } from '../../lib/assert';\nimport SceneObject from '../../lib/scene/SceneObject';\nimport Circle from '../../lib/geom/Circle';\nimport Vector2 from '../../lib/geom/Vector2';\nimport * as ShapeHelpers from '../../lib/canvasShapeHelpers';\nimport { inBack, reverse, linear } from '../../lib/easings';\nimport { constrain, mapRange } from '../../lib/utils';\nimport Pulse from '../effects/Pulse';\nimport { RED } from '../colors';\nimport ConnectionSet from '../ConnectionSet';\nimport ConnectionDirection from '../ConnectionDirection';\nimport Road from '../Road';\nimport { NetworkNode } from './NetworkNode';\n\nconst DEFAULT_COOLDOWN = 1000;\n\nconst RADIUS = 20;\nconst VISUAL_CONNECTION_RADIUS = 30;\nconst PULSE_RADIUS = 25;\n\nconst CLOCK_FADE_DURATION = 150;\nconst PULSE_DURATION = 500;\n\nconst MAIN_COLOR = RED.lighten(0.2).desaturate(0.5);\nconst CLOCK_COLOR = RED.darken(0.2);\nconst PULSE_COLOR = RED.lighten(0.2).fade(0.4);\n\nexport default class Consumer extends SceneObject implements NetworkNode {\n  isDestination = true;\n  _circle: Circle;\n  _visualConnectionCircle: Circle;\n  _cooldown: number;\n  _timer: number = 0;\n  _connectionSet: ConnectionSet = new ConnectionSet();\n\n  constructor(x: number, y: number, cooldown: number = DEFAULT_COOLDOWN) {\n    super();\n    this._circle = new Circle(x, y, RADIUS);\n    this._visualConnectionCircle = new Circle(x, y, VISUAL_CONNECTION_RADIUS);\n    this._cooldown = cooldown;\n  }\n\n  get position(): Vector2 {\n    return this._circle.center;\n  }\n\n  get canConsumeTraveller(): boolean {\n    return this._timer >= this._cooldown;\n  }\n\n  get incomingConnections(): Road[] {\n    return this._connectionSet.incoming;\n  }\n\n  get outgoingConnections(): Road[] {\n    return this._connectionSet.outgoing;\n  }\n\n  getVisualConnectionPointAtAngle(radians: number): Vector2 {\n    return this._visualConnectionCircle.pointOnCircumference(radians);\n  }\n\n  getAllReachableNodes(visited: Set<NetworkNode> = new Set()): NetworkNode[] {\n    visited.add(this);\n    return [this];\n  }\n\n  connectTo(node: Road, direction: ConnectionDirection) {\n    this._connectionSet.add(node, direction);\n  }\n\n  consumeTraveller() {\n    assert(this.canConsumeTraveller, 'must be ready to consumer traveller');\n    this._resetTimer();\n    this._pulse();\n  }\n\n  update(delta: number) {\n    this._timer = constrain(0, this._cooldown, this._timer + delta);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const progress = this._timer / this._cooldown;\n    const colorMixAmount = constrain(\n      0,\n      1,\n      mapRange(0, CLOCK_FADE_DURATION, 1, 0, this._timer),\n    );\n    const bgColor = MAIN_COLOR.mix(CLOCK_COLOR, colorMixAmount);\n\n    ctx.beginPath();\n    ctx.fillStyle = bgColor.toString();\n    ShapeHelpers.circle(\n      ctx,\n      this._circle.center.x,\n      this._circle.center.y,\n      this._circle.radius,\n    );\n    ctx.fill();\n\n    ctx.beginPath();\n    ctx.fillStyle = CLOCK_COLOR.toString();\n    ctx.moveTo(this._circle.center.x, this._circle.center.y);\n    ShapeHelpers.circle(\n      ctx,\n      this._circle.center.x,\n      this._circle.center.y,\n      this._circle.radius * progress,\n    );\n    ctx.fill();\n  }\n\n  _resetTimer() {\n    this._timer = 0;\n  }\n\n  _pulse() {\n    this.getScene().addChildBefore(\n      this,\n      new Pulse({\n        x: this._circle.center.x,\n        y: this._circle.center.y,\n        endRadius: RADIUS,\n        startRadius: PULSE_RADIUS,\n        duration: PULSE_DURATION,\n        color: PULSE_COLOR,\n        easeRadius: inBack(4),\n        easeOpacity: reverse(linear),\n        removeOnComplete: true,\n      }),\n    );\n  }\n}\n","// @flow\nimport { assert } from '../assert';\nimport Scene from './Scene';\n\nconst DEFAULT_NAME = '$$AbstractSceneSystem$$';\n\nexport default abstract class SceneSystem {\n  static systemName = DEFAULT_NAME;\n  private scene: Scene | null = null;\n\n  constructor() {\n    assert(\n      this.constructor !== SceneSystem,\n      'SceneSystem is an abstract class that must be extended',\n    );\n    assert(\n      (this.constructor as any).systemName !== DEFAULT_NAME,\n      'classes extending SceneSystem must override SceneSystem.systemName',\n    );\n  }\n\n  getScene(): Scene {\n    assert(this.scene, 'scene is required');\n    return this.scene;\n  }\n\n  afterAddToScene(scene: Scene) {\n    this.scene = scene;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  beforeRemoveFromScene(scene: Scene) {\n    this.scene = null;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  beforeUpdate(delta: number) {}\n\n  // eslint-disable-next-line no-unused-vars\n  afterUpdate(delta: number) {}\n\n  // eslint-disable-next-line no-unused-vars\n  beforeDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  // eslint-disable-next-line no-unused-vars\n  afterDraw(ctx: CanvasRenderingContext2D, time: number) {}\n}\n","import AABB from './geom/AABB';\nimport Circle from './geom/Circle';\nimport Vector2 from './geom/Vector2';\n\ntype Subdivisions<T> = [QuadTree<T>, QuadTree<T>, QuadTree<T>, QuadTree<T>];\n\nexport default class QuadTree<T> {\n  static NODE_CAPACITY = 4;\n\n  boundary: AABB;\n  _items: (T | void)[] = [];\n  _nextItemIndex: number = 0;\n  _subdivisions: null | Subdivisions<T> = null;\n  _getPosition: (item: T) => Vector2;\n\n  constructor(boundary: AABB, getPosition: (item: T) => Vector2) {\n    this.boundary = boundary;\n    this._getPosition = getPosition;\n  }\n\n  // debugDraw(color: string) {\n  //   this.boundary.debugDraw(color);\n  //   if (this._subdivisions) {\n  //     this._subdivisions.forEach(subdivision => subdivision.debugDraw(color));\n  //   }\n  // }\n\n  insert(item: T): boolean {\n    const point = this._getPosition(item);\n    if (!this.boundary.contains(point)) return false;\n\n    if (this._nextItemIndex < QuadTree.NODE_CAPACITY) {\n      this._items[this._nextItemIndex] = item;\n      this._nextItemIndex++;\n      return true;\n    }\n\n    const subdivisions = this._getSubdivisions();\n\n    if (subdivisions[0].insert(item)) return true;\n    if (subdivisions[1].insert(item)) return true;\n    if (subdivisions[2].insert(item)) return true;\n    if (subdivisions[3].insert(item)) return true;\n\n    throw new Error('Couldnt insert item');\n  }\n\n  remove(item: T): boolean {\n    const point = this._getPosition(item);\n    if (!this.boundary.contains(point)) return false;\n\n    const index = this._items.indexOf(item);\n    if (index !== -1) {\n      this._items.splice(index, 1);\n      this._nextItemIndex--;\n      return true;\n    }\n\n    const subdivisions = this._subdivisions;\n    if (subdivisions) {\n      if (subdivisions[0].remove(item)) return true;\n      if (subdivisions[1].remove(item)) return true;\n      if (subdivisions[2].remove(item)) return true;\n      if (subdivisions[3].remove(item)) return true;\n    }\n\n    return false;\n  }\n\n  clear() {\n    for (let i = 0; i < this._nextItemIndex; i++) {\n      this._items[i] = undefined;\n      this._nextItemIndex = 0;\n    }\n\n    if (this._subdivisions) {\n      this._subdivisions.forEach(subdivision => subdivision.clear());\n    }\n  }\n\n  findItemsInRect(rect: AABB): T[] {\n    const foundItems = [] as Array<T>;\n\n    if (!this.boundary.intersects(rect)) return foundItems;\n\n    for (let i = 0; i < this._nextItemIndex; i++) {\n      const item = this._items[i];\n      if (item == null) continue;\n      const point = this._getPosition(item);\n      if (rect.contains(point)) foundItems.push(item);\n    }\n\n    const subdivisions = this._subdivisions;\n    if (!subdivisions) return foundItems;\n\n    if (subdivisions[0].boundary.intersects(rect)) {\n      foundItems.push(...subdivisions[0].findItemsInRect(rect));\n    }\n    if (subdivisions[1].boundary.intersects(rect)) {\n      foundItems.push(...subdivisions[1].findItemsInRect(rect));\n    }\n    if (subdivisions[2].boundary.intersects(rect)) {\n      foundItems.push(...subdivisions[2].findItemsInRect(rect));\n    }\n    if (subdivisions[3].boundary.intersects(rect)) {\n      foundItems.push(...subdivisions[3].findItemsInRect(rect));\n    }\n\n    return foundItems;\n  }\n\n  findItemsInCircle(circle: Circle): T[] {\n    return this.findItemsInRect(circle.getBoundingBox()).filter(item =>\n      circle.containsPoint(this._getPosition(item)),\n    );\n  }\n\n  _getSubdivisions(): Subdivisions<T> {\n    if (this._subdivisions) return this._subdivisions;\n\n    const center = this.boundary.getCenter();\n    const subdivisions: Subdivisions<T> = [\n      new QuadTree(\n        AABB.fromLeftTopRightBottom(\n          this.boundary.left,\n          this.boundary.top,\n          center.x,\n          center.y,\n        ),\n        this._getPosition,\n      ),\n      new QuadTree(\n        AABB.fromLeftTopRightBottom(\n          center.x,\n          this.boundary.top,\n          this.boundary.right,\n          center.y,\n        ),\n        this._getPosition,\n      ),\n      new QuadTree(\n        AABB.fromLeftTopRightBottom(\n          this.boundary.left,\n          center.y,\n          center.x,\n          this.boundary.bottom,\n        ),\n        this._getPosition,\n      ),\n      new QuadTree(\n        AABB.fromLeftTopRightBottom(\n          center.x,\n          center.y,\n          this.boundary.right,\n          this.boundary.bottom,\n        ),\n        this._getPosition,\n      ),\n    ];\n\n    this._subdivisions = subdivisions;\n    return subdivisions;\n  }\n}\n","// @flow\nimport Scene from '../lib/scene/Scene';\nimport SceneSystem from '../lib/scene/SceneSystem';\nimport QuadTree from '../lib/QuadTree';\nimport Circle from '../lib/geom/Circle';\nimport AABB from '../lib/geom/AABB';\nimport Traveller from './Traveller';\n\nexport default class TravellerFinder extends SceneSystem {\n  static systemName = 'TravellerFinder';\n\n  _quadTree!: QuadTree<Traveller>;\n\n  removeTraveller(traveller: Traveller) {\n    this._quadTree.remove(traveller);\n  }\n\n  afterAddToScene(scene: Scene) {\n    super.afterAddToScene(scene);\n    this._quadTree = new QuadTree(\n      AABB.fromLeftTopRightBottom(0, 0, scene.width, scene.height),\n      traveller => traveller.position,\n    );\n  }\n\n  beforeUpdate() {\n    const scene = this.getScene();\n    this._quadTree.clear();\n    scene.children.forEach(child => {\n      if (child instanceof Traveller) {\n        this._quadTree.insert(child);\n      }\n    });\n    // this._quadTree.debugDraw('red');\n  }\n\n  findTravellersInCircle(circle: Circle) {\n    return this._quadTree.findItemsInCircle(circle);\n  }\n}\n","// @flow\nimport { assert } from '../lib/assert';\nimport Road from './Road';\nimport { NetworkNode } from './networkNodes/NetworkNode';\n\nconst PathFinder = {\n  getNextRoad(initialNode: NetworkNode, destinationNode: NetworkNode): Road {\n    const remainingNodes = new Set(initialNode.getAllReachableNodes());\n    remainingNodes.add(initialNode);\n    assert(\n      remainingNodes.has(destinationNode),\n      'destination must be reachable',\n    );\n    const bestCosts = new Map();\n    const prevRoads = new Map();\n\n    bestCosts.set(initialNode, 0);\n\n    while (remainingNodes.size) {\n      const { node, cost } = PathFinder._nodeWithShortestDistance(\n        remainingNodes,\n        bestCosts,\n      );\n      remainingNodes.delete(node);\n\n      if (node === destinationNode) {\n        return PathFinder._nextRoadFromRoute(\n          prevRoads,\n          initialNode,\n          destinationNode,\n        );\n      }\n\n      PathFinder._updateNeighbours(node, bestCosts, cost, prevRoads);\n    }\n\n    throw new Error('unreachable i hope');\n  },\n\n  _nodeWithShortestDistance(\n    nodes: Set<NetworkNode>,\n    costs: Map<NetworkNode, number>,\n  ): { node: NetworkNode; cost: number } {\n    let bestCost = Infinity;\n    let bestNode = null;\n\n    nodes.forEach(node => {\n      const cost = costs.get(node);\n      if (cost != null && cost <= bestCost) {\n        bestCost = cost;\n        bestNode = node;\n      }\n    });\n\n    assert(bestNode, 'node must be found');\n    return { node: bestNode, cost: bestCost };\n  },\n  _updateNeighbours(\n    node: NetworkNode,\n    bestCosts: Map<NetworkNode, number>,\n    cost: number,\n    prevRoads: Map<NetworkNode, Road>,\n  ) {\n    node.outgoingConnections.forEach(road => {\n      const nextNode = road.to;\n      const nextNodeCost = bestCosts.get(nextNode);\n      const altNextNodeCost = cost + road.expectedTimeFromStartToEnd;\n      if (nextNodeCost == null || altNextNodeCost <= nextNodeCost) {\n        bestCosts.set(nextNode, altNextNodeCost);\n        prevRoads.set(nextNode, road);\n      }\n    });\n  },\n  _nextRoadFromRoute(\n    prevRoads: Map<NetworkNode, Road>,\n    start: NetworkNode,\n    finish: NetworkNode,\n  ): Road {\n    let node = finish;\n    while (prevRoads.has(node)) {\n      const road = prevRoads.get(node);\n      assert(road, 'road must exist');\n      node = road.from;\n      if (node === start) return road;\n    }\n\n    throw new Error('prev road must be found');\n  },\n};\n\nexport default PathFinder;\n","// @flow\nimport { assert } from '../../lib/assert';\nimport Vector2 from '../../lib/geom/Vector2';\nimport { uniq, flatten } from '../../lib/utils';\nimport ConnectionSet from '../ConnectionSet';\nimport ConnectionDirection from '../ConnectionDirection';\nimport PathFinder from '../PathFinder';\nimport Road from '../Road';\nimport Traveller from '../Traveller';\nimport { NetworkNode } from './NetworkNode';\n\nexport default class Intersection implements NetworkNode {\n  isDestination = false;\n  position: Vector2;\n  _connectionSet: ConnectionSet = new ConnectionSet();\n\n  constructor(x: number, y: number) {\n    this.position = new Vector2(x, y);\n  }\n\n  get incomingConnections(): ReadonlyArray<Road> {\n    return this._connectionSet.incoming;\n  }\n\n  get outgoingConnections(): ReadonlyArray<Road> {\n    return this._connectionSet.outgoing;\n  }\n\n  get canConsumeTraveller(): boolean {\n    return true;\n  }\n\n  consumeTraveller(traveller: Traveller) {\n    const destination = traveller.destination;\n    assert(destination, 'traveller must have destination');\n\n    const nextRoad = PathFinder.getNextRoad(this, destination);\n    assert(\n      this.outgoingConnections.includes(nextRoad),\n      'nextRoad must be from this intersection',\n    );\n\n    traveller.removeFromCurrentRoad();\n    nextRoad.addTravellerAtStart(traveller);\n  }\n\n  getAllReachableNodes(visited: Set<NetworkNode> = new Set()): NetworkNode[] {\n    visited.add(this);\n    return uniq(\n      flatten(\n        this._connectionSet.outgoing.map(road =>\n          road.getAllReachableNodes(visited),\n        ),\n      ),\n    );\n  }\n\n  getVisualConnectionPointAtAngle(): Vector2 {\n    return this.position;\n  }\n\n  getClosestOutgoingTraveller(): Traveller | null {\n    let bestTraveller = null;\n    let shortestDistance = Infinity;\n    this.outgoingConnections.forEach(road => {\n      const traveller = road.getTravellerAfterPosition(-1);\n      if (traveller && traveller.positionOnCurrentRoad < shortestDistance) {\n        bestTraveller = traveller;\n        shortestDistance = traveller.positionOnCurrentRoad;\n      }\n    });\n\n    return bestTraveller;\n  }\n\n  getClosestIncomingTraveller(): Traveller | null {\n    let bestTraveller = null;\n    let shortestDistance = Infinity;\n    this.incomingConnections.forEach(road => {\n      const traveller = road.getTravellerBeforePosition(road.length);\n      if (\n        traveller &&\n        traveller.distanceToEndOfCurrentRoad < shortestDistance\n      ) {\n        bestTraveller = traveller;\n        shortestDistance = traveller.distanceToEndOfCurrentRoad;\n      }\n    });\n\n    return bestTraveller;\n  }\n\n  connectTo(node: Road, direction: ConnectionDirection) {\n    this._connectionSet.add(node, direction);\n  }\n}\n","import Entity from './Entity';\nimport Scene from './Scene';\n\nexport default abstract class Component {\n  readonly entity: Entity;\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  onRemove() {}\n\n  onAddedToScene(scene: Scene) {}\n\n  onRemovedFromScene(scene: Scene) {}\n\n  beforeUpdate(delta: number) {}\n\n  update(delta: number) {}\n\n  afterUpdate(delta: number) {}\n\n  beforeDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  draw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  afterDraw(ctx: CanvasRenderingContext2D, time: number) {}\n}\n","import Component from './Component';\nimport Entity from './Entity';\n\nexport default class SortOrderProvider extends Component {\n  constructor(\n    entity: Entity,\n    private getSortOrderFn: (entity: Entity) => number,\n  ) {\n    super(entity);\n  }\n\n  getSortOrder(): number {\n    return this.getSortOrderFn(this.entity);\n  }\n}\n","import SceneObject from './SceneObject';\nimport Component from './Component';\nimport { assert } from '../assert';\nimport SortOrderProvider from './SortOrderProvider';\nimport Scene from './Scene';\n\ntype ComponentClass<T extends Component = Component, Arg = any> = {\n  name: string;\n  new (entity: Entity, arg: Arg): T;\n};\n\nexport default class Entity extends SceneObject {\n  private componentInstances = new Map<\n    ComponentClass<Component, any>,\n    Component\n  >();\n\n  addComponent<T extends Component, A>(\n    component: ComponentClass<T, A>,\n    arg: A,\n  ): T {\n    assert(\n      !this.componentInstances.has(component),\n      `component instance ${component.name} already exists`,\n    );\n    const instance = new component(this, arg);\n    this.componentInstances.set(component, instance);\n    return instance;\n  }\n\n  hasComponent(component: ComponentClass): boolean {\n    return this.componentInstances.has(component);\n  }\n\n  getComponent<T extends Component>(component: ComponentClass<T>): T {\n    const instance = this.componentInstances.get(component);\n    assert(instance, `no instance for ${component.name} exists`);\n    assert(instance instanceof component, 'wrong instance type');\n    return instance;\n  }\n\n  removeComponent<T extends Component>(component: ComponentClass<T>): T {\n    const instance = this.getComponent(component);\n    this.componentInstances.delete(component);\n    instance.onRemove();\n    return instance;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, elapsedTime: number): void {\n    for (const component of this.componentInstances.values()) {\n      component.beforeDraw(ctx, elapsedTime);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.draw(ctx, elapsedTime);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.afterDraw(ctx, elapsedTime);\n    }\n  }\n  update(delta: number): void {\n    for (const component of this.componentInstances.values()) {\n      component.beforeUpdate(delta);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.update(delta);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.afterUpdate(delta);\n    }\n  }\n\n  onAddedToScene(scene: Scene) {\n    super.onAddedToScene(scene);\n    for (const component of this.componentInstances.values()) {\n      component.onAddedToScene(scene);\n    }\n  }\n\n  onRemovedFromScene() {\n    const scene = this.getScene();\n    super.onRemovedFromScene();\n    for (const component of this.componentInstances.values()) {\n      component.onRemovedFromScene(scene);\n    }\n  }\n\n  getSortOrder() {\n    if (this.hasComponent(SortOrderProvider)) {\n      return this.getComponent(SortOrderProvider).getSortOrder();\n    } else {\n      return super.getSortOrder();\n    }\n  }\n}\n","import Component from '../lib/scene/Component';\nimport { constrain, normalizeAngle } from '../lib/utils';\nimport Vector2 from '../lib/geom/Vector2';\nimport Entity from '../lib/scene/Entity';\n\nconst MAX_SPEED = 80;\nconst ACCELERATION = 200;\nconst DECELERATION = 200;\n\nexport class PalControlData extends Component {\n  speed: number = 0;\n  position: Vector2;\n  heading: number = 0;\n  headingVelocity: number = 0;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.position = position;\n  }\n\n  getVelocity(): Vector2 {\n    return this.getHeadingVec().scale(this.speed);\n  }\n\n  private getHeadingVec(): Vector2 {\n    return Vector2.fromPolar(this.heading, 1);\n  }\n}\n\nexport class PalTargetController extends Component {\n  private data: PalControlData;\n  private target: Vector2;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.target = position;\n    this.data = entity.addComponent(PalControlData, position);\n  }\n\n  setTarget(newTarget: Vector2) {\n    this.target = newTarget;\n  }\n\n  update(dtMilliseconds: number) {\n    const dtSeconds = dtMilliseconds / 1000;\n    const angleToTarget = this.data.position.angleTo(this.target);\n\n    const distance = this.target.distanceTo(this.data.position);\n    if (distance > 15) {\n      this.accelerate(ACCELERATION, dtSeconds);\n    } else {\n      this.accelerate(-DECELERATION, dtSeconds);\n    }\n\n    if (distance > 10) {\n      const angleDelta = normalizeAngle(angleToTarget - this.data.heading);\n      const lastHeading = this.data.heading;\n      this.data.heading += angleDelta / 10;\n      this.data.headingVelocity =\n        normalizeAngle(this.data.heading - lastHeading) / dtSeconds;\n    } else {\n      this.data.headingVelocity = 0;\n    }\n  }\n\n  private accelerate(amt: number, dtSeconds: number) {\n    const lastSpeed = this.data.speed;\n    this.data.speed = constrain(\n      0,\n      MAX_SPEED,\n      this.data.speed + amt * dtSeconds,\n    );\n    const avgSpeed = (lastSpeed + this.data.speed) / 2;\n    this.data.position = this.data.position.add(\n      Vector2.fromPolar(this.data.heading, avgSpeed * dtSeconds),\n    );\n  }\n}\n\nexport class PalAbsoluteController extends Component {\n  private data: PalControlData;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.data = entity.addComponent(PalControlData, position);\n  }\n\n  setPosition(position: Vector2, heading: number, dtSeconds: number) {\n    const lastPosition = this.data.position;\n    const lastHeading = this.data.heading;\n\n    this.data.heading = heading;\n    this.data.headingVelocity =\n      normalizeAngle(this.data.heading - lastHeading) / dtSeconds;\n    this.data.speed = lastPosition.distanceTo(position) / dtSeconds;\n    this.data.position = position;\n  }\n}\n","import Color from 'color';\n\n// https://coolors.co/f8ffe5-06d6a0-1b9aaa-ef476f-ffc43d\nexport const LIGHT_BG = new Color('#F8FFE5');\nexport const TEAL = new Color('#06D6A0');\nexport const BLUE = new Color('#1B9AAA');\nexport const RED = new Color('#EF476F');\nexport const YELLOW = new Color('#FFC43D');\n","import Color from 'color';\nimport { varyRelative, varyAbsolute, random, randomInt } from '../lib/utils';\nimport { BLUE } from './colors';\n\nexport type PalConfig = {\n  radius: number;\n  bodHeight: number;\n  bodBob: number;\n  eyeY: number;\n  eyeX: number;\n  eyeRadius: number;\n  mouthThickness: number;\n  mouthY: number;\n  mouthWidth: number;\n  mouthSmile: number;\n  buttTop: number;\n  buttBottom: number;\n  buttThickness: number;\n  color: Color;\n  hipHeight: number;\n  kneeScale: number;\n  legMaxLift: number;\n  kneeMaxOut: number;\n  stepDuration: number;\n  stepRestDuration: number;\n  stepThreshold: number;\n  fullStepDistance: number;\n  legWidth: number;\n  legPairs: number;\n};\n\nexport const classicPalConfig: PalConfig = {\n  radius: 14,\n  bodHeight: 25,\n  bodBob: 15,\n  eyeY: 6,\n  eyeX: 5,\n  eyeRadius: 2,\n  mouthThickness: 2,\n  mouthY: 2,\n  mouthWidth: 8,\n  mouthSmile: 4,\n  buttTop: 6,\n  buttBottom: 12,\n  buttThickness: 1.4,\n  color: BLUE.lighten(0.2),\n  hipHeight: 10,\n  kneeScale: 1.3,\n  legMaxLift: 0.3,\n  kneeMaxOut: 14,\n  stepDuration: 0.2,\n  stepRestDuration: 0.2,\n  stepThreshold: 0.2,\n  fullStepDistance: 20,\n  legWidth: 4,\n  legPairs: 1,\n};\n\nexport const generateRandomPalConfig = (): PalConfig => {\n  const radius = varyRelative(14, 0.2);\n  const hipHeight = varyRelative(radius * 0.7, 0.3);\n  const bodHeight = varyRelative(radius * 2, 0.3);\n  const legLength = bodHeight - (radius - hipHeight); // typical: 24\n\n  return {\n    radius,\n    bodHeight,\n    bodBob: varyRelative(radius, 0.2),\n    eyeY: varyRelative(radius * 0.5, 0.2),\n    eyeX: varyRelative(radius * 0.4, 0.3),\n    eyeRadius: varyRelative(radius * 0.15, 0.4),\n    mouthThickness: varyRelative(radius * 0.15, 0.4),\n    mouthY: varyAbsolute(0, radius * 0.2),\n    mouthWidth: varyRelative(radius * 0.5, 0.3),\n    mouthSmile: varyRelative(radius * 0.3, 0.3),\n    buttTop: varyRelative(radius * 0.4, 0.2),\n    buttBottom: varyRelative(radius * 0.85, 0.15),\n    buttThickness: varyRelative(radius * 0.1, 0.5),\n    color: BLUE.lighten(random(-0.2, 0.2))\n      .saturate(random(-0.2, 0.2))\n      .rotate(random(-10, 10)),\n    hipHeight,\n    kneeScale: varyAbsolute(1.3, 0.3),\n    legMaxLift: random(0.2, 0.5),\n    kneeMaxOut: varyRelative(legLength * 0.6, 0.4),\n    stepDuration: varyRelative(legLength * 0.01, 0.4),\n    stepRestDuration: varyRelative(legLength * 0.0083, 0.4),\n    stepThreshold: varyRelative(legLength * 0.01, 0.4),\n    fullStepDistance: varyRelative(legLength * 0.7, 0.4),\n    legWidth: varyRelative(radius * 0.3, 0.4),\n    legPairs: randomInt(1, 4),\n  };\n};\n","import PalGeom from './PalGeom';\nimport { PalConfig } from './PalConfig';\nimport Vector2 from '../lib/geom/Vector2';\nimport { PalControlData } from './PalController';\nimport { lerp } from '../lib/utils';\n\nconst getLegRadius = ({ radius, hipHeight, legWidth }: PalConfig) =>\n  Math.sqrt(radius * radius - (radius - hipHeight) * (radius - hipHeight)) -\n  legWidth;\n\nexport type PalLegGeomUpdate = {\n  footXY: Vector2;\n  footProjectionOrigin: Vector2;\n  liftAmount: number;\n};\n\nexport default class PalLegGeom {\n  hipRadius: number;\n  kneeRadius: number;\n  floorRadius: number;\n\n  footXY: Vector2;\n  footOrigin: Vector2;\n  liftAmount: number = 0;\n\n  constructor(\n    private palData: PalControlData,\n    private palGeom: PalGeom,\n    private config: PalConfig,\n    public angleOffset: number,\n  ) {\n    this.hipRadius = getLegRadius(config);\n    this.kneeRadius = getLegRadius(config) * config.kneeScale;\n    this.floorRadius = getLegRadius(config);\n\n    this.footXY = this.getIdealFootRestingXY();\n    this.footOrigin = this.getIdealFootRestingXY();\n  }\n\n  update(update: PalLegGeomUpdate) {\n    this.footXY = update.footXY;\n    this.footOrigin = update.footProjectionOrigin;\n    this.liftAmount = update.liftAmount;\n  }\n\n  getIdealFootRestingXY(): Vector2 {\n    return Vector2.fromPolar(\n      this.palData.heading + this.angleOffset,\n      this.floorRadius,\n    ).add(this.palData.position);\n  }\n\n  getFootXY(): Vector2 {\n    return this.footXY;\n  }\n\n  getFootZ(): number {\n    return lerp(0, this.getHipZ() * this.config.legMaxLift, this.liftAmount);\n  }\n\n  getFootOrigin(): Vector2 {\n    return this.footOrigin;\n  }\n\n  getKneeXY(): Vector2 {\n    return this.palData.position\n      .add(\n        Vector2.fromPolar(\n          this.palData.heading + this.angleOffset,\n          this.kneeRadius,\n        ),\n      )\n      .add(\n        Vector2.fromPolar(\n          this.palData.heading,\n          this.liftAmount * this.config.kneeMaxOut,\n        ),\n      );\n  }\n\n  getKneeZ(): number {\n    return (this.getFootZ() + this.getHipZ()) / 2;\n  }\n\n  getKneeOrigin(): Vector2 {\n    return this.getHipOrigin().lerp(this.getFootOrigin(), 0.5);\n  }\n\n  getHipXY(): Vector2 {\n    return this.palData.position.add(\n      Vector2.fromPolar(\n        this.palData.heading + this.angleOffset,\n        this.hipRadius,\n      ),\n    );\n    // return this._hipEllipse\n    //   .pointOnCircumference(this.angle)\n    //   .add(this.palData.bod.center);\n  }\n\n  getHipZ(): number {\n    const bod = this.palGeom.getBod();\n    return (\n      this.palData.position.y -\n      bod.center.y -\n      (bod.radius - this.config.hipHeight)\n    );\n  }\n\n  getHipOrigin(): Vector2 {\n    return this.palData.position;\n  }\n}\n","import Component from '../lib/scene/Component';\nimport Entity from '../lib/scene/Entity';\nimport Circle from '../lib/geom/Circle';\nimport { PalControlData } from './PalController';\nimport { shuffle, flatten, times, lerp } from '../lib/utils';\nimport { PalConfig } from './PalConfig';\nimport PalLegGeom, { PalLegGeomUpdate } from './PalLegGeom';\nimport { assert } from '../lib/assert';\n\nconst HALF_PI = Math.PI / 2;\n\nexport type PalGeomUpdate = {\n  bobAmount: number;\n  legs: Array<PalLegGeomUpdate>;\n};\n\nexport interface PalAnimationController {\n  update(\n    dtMilliseconds: number,\n    controlData: PalControlData,\n    legs: Array<PalLegGeom>,\n  ): PalGeomUpdate;\n}\n\nexport default class PalGeom extends Component {\n  private controlData: PalControlData;\n  legs: Array<PalLegGeom>;\n  private animationController: PalAnimationController | null = null;\n  private bobAmount: number = 0;\n\n  constructor(entity: Entity, private config: PalConfig) {\n    super(entity);\n    this.controlData = entity.getComponent(PalControlData);\n    this.legs = shuffle(\n      flatten(\n        times(config.legPairs, n => {\n          const progress = (n + 1) / (config.legPairs + 1);\n          return [\n            new PalLegGeom(\n              this.controlData,\n              this,\n              config,\n              lerp(HALF_PI - 1, HALF_PI + 1, progress),\n            ),\n            new PalLegGeom(\n              this.controlData,\n              this,\n              config,\n              lerp(-HALF_PI + 1, -HALF_PI - 1, progress),\n            ),\n          ];\n        }),\n      ),\n    );\n  }\n\n  setAnimationController(animationController: PalAnimationController) {\n    this.animationController = animationController;\n  }\n\n  update(dtMilliseconds: number) {\n    if (this.animationController) {\n      const update = this.animationController.update(\n        dtMilliseconds,\n        this.controlData,\n        this.legs,\n      );\n      this.bobAmount = update.bobAmount;\n\n      assert(update.legs.length === this.legs.length);\n      this.legs.forEach((leg, i) => leg.update(update.legs[i]));\n    }\n  }\n\n  getBod(): Circle {\n    const bob = this.config.bodBob * this.bobAmount;\n\n    return new Circle(\n      this.controlData.position.x,\n      this.controlData.position.y - this.config.bodHeight - bob,\n      this.config.radius,\n    );\n  }\n}\n","import { PalAnimationController, PalGeomUpdate } from './PalGeom';\nimport { PalControlData } from './PalController';\nimport PalLegGeom, { PalLegGeomUpdate } from './PalLegGeom';\nimport Vector2 from '../lib/geom/Vector2';\nimport { PalConfig } from './PalConfig';\nimport { constrain, mapRange } from '../lib/utils';\nimport { assert } from '../lib/assert';\n\ntype LegState = {\n  lastFootOnFloorXY: Vector2;\n  lastFootOnFloorPalPosition: Vector2;\n  stepProgress: number;\n  restTimer: number;\n  currentStepMaxLift: number;\n};\n\nfunction isStepping({ stepProgress }: LegState): boolean {\n  return stepProgress > 0;\n}\n\nfunction isResting({ restTimer }: LegState): boolean {\n  return restTimer > 0;\n}\n\nexport default class PalWalkAnimationController\n  implements PalAnimationController {\n  private legStates = new Map<PalLegGeom, LegState>();\n\n  constructor(private config: PalConfig) {}\n\n  update(\n    dtMilliseconds: number,\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n  ): PalGeomUpdate {\n    const dtSeconds = dtMilliseconds / 1000;\n\n    for (const leg of legs) {\n      this.updateLegState(dtSeconds, pal, legs, leg);\n    }\n    const legUpdates = legs.map(leg => this.getLegUpdate(pal, leg));\n\n    const totalLift = legUpdates.reduce(\n      (sum, update) => sum + update.liftAmount,\n      0,\n    );\n    const avgLift = totalLift / legs.length;\n\n    return {\n      bobAmount: avgLift,\n      legs: legUpdates,\n    };\n  }\n\n  private canLiftLeg(\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n    leg: PalLegGeom,\n  ): boolean {\n    assert(legs.includes(leg), 'whos leg even is this');\n    const enoughLegsOnFloor =\n      legs.filter(l => l !== leg && !isStepping(this.getLegState(pal, leg)))\n        .length > Math.floor(Math.log(legs.length));\n\n    const anyStepsJustStarted = legs.some(leg => {\n      const state = this.getLegState(pal, leg);\n      return (\n        state.stepProgress > 0 && state.stepProgress < 1 / (legs.length / 2)\n      );\n    });\n\n    return enoughLegsOnFloor && !anyStepsJustStarted;\n  }\n\n  private updateLegState(\n    dtSeconds: number,\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n    leg: PalLegGeom,\n  ) {\n    const state = this.getLegState(pal, leg);\n\n    state.restTimer = constrain(\n      0,\n      this.config.stepRestDuration,\n      state.restTimer - dtSeconds,\n    );\n    if (isResting(state)) return;\n\n    if (isStepping(state)) {\n      state.stepProgress = constrain(\n        0,\n        1,\n        state.stepProgress + dtSeconds / this.config.stepDuration,\n      );\n\n      if (state.stepProgress === 1) {\n        state.lastFootOnFloorXY = this.getFootXY(pal, leg, state);\n        state.lastFootOnFloorPalPosition = pal.position;\n        state.stepProgress = 0;\n        state.restTimer = this.config.stepDuration;\n      }\n    } else {\n      const footLeanDistance = leg\n        .getFootXY()\n        .distanceTo(leg.getIdealFootRestingXY());\n      if (\n        footLeanDistance > this.config.stepThreshold &&\n        this.canLiftLeg(pal, legs, leg)\n      ) {\n        state.currentStepMaxLift = constrain(\n          0,\n          1,\n          mapRange(\n            this.config.stepThreshold,\n            this.config.fullStepDistance,\n            0.1,\n            1,\n            footLeanDistance,\n          ),\n        );\n        state.stepProgress = constrain(\n          0,\n          1,\n          state.stepProgress + dtSeconds / this.config.stepDuration,\n        );\n      }\n    }\n  }\n\n  private getInitialLegState(pal: PalControlData, leg: PalLegGeom): LegState {\n    return {\n      lastFootOnFloorXY: leg.getIdealFootRestingXY(),\n      lastFootOnFloorPalPosition: pal.position,\n      stepProgress: 0,\n      restTimer: 0,\n      currentStepMaxLift: 1,\n    };\n  }\n\n  private getLegState(pal: PalControlData, leg: PalLegGeom): LegState {\n    const state = this.legStates.get(leg);\n    if (state) {\n      return state;\n    }\n\n    const initialState = this.getInitialLegState(pal, leg);\n    this.legStates.set(leg, initialState);\n    return initialState;\n  }\n\n  private getLegUpdate(pal: PalControlData, leg: PalLegGeom): PalLegGeomUpdate {\n    const state = this.getLegState(pal, leg);\n    return {\n      footXY: this.getFootXY(pal, leg, state),\n      footProjectionOrigin: this.getFootOrigin(pal, leg, state),\n      liftAmount: this.getLegLiftAmount(state),\n    };\n  }\n\n  private getFootXY(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    if (isStepping(state)) {\n      const start = state.lastFootOnFloorXY;\n      const target = this.getPredictedIdealFootXYAtEndOfOfStep(pal, leg, state);\n      return start.lerp(target, state.stepProgress);\n    }\n\n    return state.lastFootOnFloorXY;\n  }\n\n  private getFootOrigin(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    if (isStepping(state)) {\n      return state.lastFootOnFloorPalPosition.lerp(\n        pal.position,\n        state.stepProgress,\n      );\n    }\n\n    return state.lastFootOnFloorPalPosition;\n  }\n\n  private getPredictedIdealFootXYAtEndOfOfStep(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    const timeRemaining = (1.4 - state.stepProgress) * this.config.stepDuration;\n\n    const predictedPosition = pal\n      .getVelocity()\n      .scale(timeRemaining)\n      .add(pal.position);\n\n    const predictedHeading = pal.heading + pal.headingVelocity * timeRemaining;\n\n    return Vector2.fromPolar(\n      predictedHeading + leg.angleOffset,\n      leg.floorRadius,\n    ).add(predictedPosition);\n  }\n\n  private getLegLiftAmount({\n    stepProgress,\n    currentStepMaxLift,\n  }: LegState): number {\n    return Math.sin(stepProgress * Math.PI) * currentStepMaxLift;\n  }\n}\n","import Component from '../lib/scene/Component';\nimport { PalControlData } from './PalController';\nimport Entity from '../lib/scene/Entity';\nimport PalGeom from './PalGeom';\nimport * as ShapeHelpers from '../lib/canvasShapeHelpers';\nimport { normalizeAngle, constrain } from '../lib/utils';\nimport Circle from '../lib/geom/Circle';\nimport { PalConfig } from './PalConfig';\nimport PalLegGeom from './PalLegGeom';\nimport Vector2 from '../lib/geom/Vector2';\n\nconst Y_SCALE = 0.3;\nconst HALF_PI = Math.PI / 2;\n\nexport default class PalRenderer extends Component {\n  private data: PalControlData;\n  private geom: PalGeom;\n\n  constructor(entity: Entity, private config: PalConfig) {\n    super(entity);\n    this.data = entity.getComponent(PalControlData);\n    this.geom = entity.getComponent(PalGeom);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const heading = normalizeAngle(this.data.heading);\n\n    ctx.setLineDash([]);\n    ctx.beginPath();\n\n    const bod = this.geom.getBod();\n    ctx.ellipse(\n      this.data.position.x,\n      this.data.position.y,\n      bod.radius * 0.8,\n      bod.radius * 0.8 * 0.3,\n      0,\n      0,\n      2 * Math.PI,\n    );\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n    ctx.fill();\n\n    this.geom.legs\n      .filter(l => normalizeAngle(l.angleOffset + heading) < 0)\n      .forEach(leg => this.drawLeg(ctx, leg));\n    this.geom.legs\n      .filter(l => normalizeAngle(l.angleOffset + heading) >= 0)\n      .forEach(leg => this.drawLeg(ctx, leg));\n    this.drawBod(ctx, bod);\n  }\n\n  private drawLeg(ctx: CanvasRenderingContext2D, leg: PalLegGeom) {\n    ctx.beginPath();\n\n    const angle = this.data.heading + leg.angleOffset;\n\n    const colorDarkenAmount = constrain(\n      0,\n      1,\n      Math.abs(normalizeAngle(-HALF_PI - angle) / HALF_PI),\n    );\n    const legColor = this.config.color.darken(\n      0.2 * (1 - colorDarkenAmount * colorDarkenAmount),\n    );\n\n    const hip = this.projectZ(\n      leg.getHipXY(),\n      leg.getHipZ(),\n      leg.getHipOrigin(),\n    );\n    const knee = this.projectZ(\n      leg.getKneeXY(),\n      leg.getKneeZ(),\n      leg.getKneeOrigin(),\n    );\n    const foot = this.projectZ(\n      leg.getFootXY(),\n      leg.getFootZ(),\n      leg.getFootOrigin(),\n    );\n\n    ctx.moveTo(hip.x, hip.y);\n    ctx.quadraticCurveTo(knee.x, knee.y, foot.x, foot.y);\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = legColor.toString();\n    ctx.lineWidth = this.config.legWidth;\n    ctx.stroke();\n  }\n\n  private drawBod(ctx: CanvasRenderingContext2D, bod: Circle) {\n    ctx.save();\n    ctx.beginPath();\n    ShapeHelpers.circle(ctx, bod.center.x, bod.center.y, this.config.radius);\n    ctx.fillStyle = this.config.color.toString();\n    ctx.fill();\n    ctx.clip();\n\n    const faceX =\n      (normalizeAngle(HALF_PI - this.data.heading) / HALF_PI) *\n      this.config.radius;\n\n    // EYES\n    ctx.beginPath();\n    ShapeHelpers.circle(\n      ctx,\n      faceX + bod.center.x + this.config.eyeX,\n      bod.center.y - this.config.eyeY,\n      this.config.eyeRadius,\n    );\n    ShapeHelpers.circle(\n      ctx,\n      faceX + bod.center.x - this.config.eyeX,\n      bod.center.y - this.config.eyeY,\n      this.config.eyeRadius,\n    );\n    ctx.fillStyle = this.config.color.darken(0.5).toString();\n    ctx.fill();\n\n    // MOUTH\n    ctx.beginPath();\n    ctx.moveTo(\n      faceX + bod.center.x - this.config.mouthWidth,\n      bod.center.y - this.config.mouthY,\n    );\n    ctx.quadraticCurveTo(\n      faceX + bod.center.x,\n      bod.center.y - this.config.mouthY + this.config.mouthSmile,\n      faceX + bod.center.x + this.config.mouthWidth,\n      bod.center.y - this.config.mouthY,\n    );\n    ctx.lineWidth = this.config.mouthThickness;\n    ctx.strokeStyle = this.config.color.darken(0.5).toString();\n    ctx.stroke();\n\n    // BUTT\n    ctx.beginPath();\n    this.makeButtLine(ctx, bod, faceX + this.config.radius * 2);\n    this.makeButtLine(ctx, bod, faceX - this.config.radius * 2);\n    ctx.lineWidth = this.config.buttThickness;\n    ctx.strokeStyle = this.config.color.darken(0.3).toString();\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  private makeButtLine(\n    ctx: CanvasRenderingContext2D,\n    bod: Circle,\n    buttX: number,\n  ) {\n    ctx.moveTo(buttX * 1.6 + bod.center.x, bod.center.y + this.config.buttTop);\n    ctx.quadraticCurveTo(\n      buttX * 1.7 + bod.center.x,\n      bod.center.y + (this.config.buttTop + this.config.buttBottom) * 0.65,\n      buttX + bod.center.x,\n      bod.center.y + this.config.buttBottom,\n    );\n  }\n\n  private projectZ(xy: Vector2, z: number, origin: Vector2): Vector2 {\n    return new Vector2(xy.x, origin.y - z + (xy.y - origin.y) * Y_SCALE);\n  }\n}\n","import Entity from '../lib/scene/Entity';\nimport { PalTargetController, PalAbsoluteController } from './PalController';\nimport Vector2 from '../lib/geom/Vector2';\nimport { generateRandomPalConfig } from './PalConfig';\nimport PalGeom from './PalGeom';\nimport PalWalkAnimationController from './PalWalkAnimationController';\nimport PalRenderer from './PalRenderer';\n\nexport function makeTargetPal(position: Vector2): Entity {\n  const pal = new Entity();\n  pal.addComponent(PalTargetController, position);\n  const config = generateRandomPalConfig();\n  const geom = pal.addComponent(PalGeom, config);\n  geom.setAnimationController(new PalWalkAnimationController(config));\n  pal.addComponent(PalRenderer, config);\n  return pal;\n}\n\nexport function makeAbsolutePal(position: Vector2): Entity {\n  const pal = new Entity();\n  pal.addComponent(PalAbsoluteController, position);\n  const config = generateRandomPalConfig();\n  const geom = pal.addComponent(PalGeom, config);\n  geom.setAnimationController(new PalWalkAnimationController(config));\n  pal.addComponent(PalRenderer, config);\n  return pal;\n}\n","import { assert } from '../lib/assert';\nimport SceneObject from '../lib/scene/SceneObject';\nimport Circle from '../lib/geom/Circle';\nimport Vector2 from '../lib/geom/Vector2';\nimport { outBack, inBack } from '../lib/easings';\nimport { sample, constrain, mapRange, random } from '../lib/utils';\nimport TravellerFinder from './TravellerFinder';\nimport { NetworkNode } from './networkNodes/NetworkNode';\nimport Intersection from './networkNodes/Intersection';\nimport Road from './Road';\nimport Entity from '../lib/scene/Entity';\nimport { makeAbsolutePal } from '../pals/makePal';\nimport { PalAbsoluteController } from '../pals/PalController';\n\n// const TRAVELLER_COLOR = BLUE.fade(0.4);\n// const TRAVELLER_RADIUS = 14;\nconst MIN_TRAVELLER_COMFORTABLE_RADIUS = 60;\nconst MAX_TRAVELLER_COMFORTABLE_RADIUS = 60;\nconst MIN_TRAVELLER_SAFE_RADIUS = 30;\nconst MAX_TRAVELLER_SAFE_RADIUS = 30;\nconst NEARBY_RADIUS = 200;\n\nconst INITIAL_SPEED = 5;\nconst MAX_SPEED = 80;\nconst ACCELERATION = 200;\nconst DECELERATION = -200;\nconst ROAD_END_OVERSHOOT = 0;\n\nconst PATIENCE = 1500;\nconst FORCE_ACCELERATE_DURATION = 100;\n\nconst ENTER_DURATION = 400;\nconst EXIT_DURATION = 400;\n\nconst enterEase = outBack(3);\nconst exitEase = inBack(3);\n\nenum StopReason {\n  STOPPED_FOR_DESTINATION = 'STOPPED_FOR_DESTINATION',\n  STOPPED_FOR_TRAFFIC_IN_FRONT = 'STOPPED_FOR_TRAFFIC_IN_FRONT',\n  STOPPED_FOR_TRAFFIC_NEARBY = 'STOPPED_FOR_TRAFFIC_NEARBY',\n}\n\nexport default class Traveller extends SceneObject {\n  static MAX_SPEED = MAX_SPEED;\n  static StopReason = StopReason;\n\n  comfortableRadius = random(\n    MIN_TRAVELLER_COMFORTABLE_RADIUS,\n    MAX_TRAVELLER_COMFORTABLE_RADIUS,\n  );\n  safeRadius = random(MIN_TRAVELLER_SAFE_RADIUS, MAX_TRAVELLER_SAFE_RADIUS);\n  _currentRoad: Road | null = null;\n  _destination: NetworkNode | null = null;\n  _positionOnCurrentRoad: number = 0;\n  _speed: number = INITIAL_SPEED;\n  _age: number = 0;\n  _exitStartedAt: number | null = null;\n  _stoppedTime: number = 0;\n  _forceAccelerateTimer: number = 0;\n  _stopReason: StopReason | null = null;\n  _stoppedFor: Traveller[] = [];\n  _pal: Entity | null = null;\n\n  get currentRoad(): Road | null {\n    return this._currentRoad;\n  }\n\n  get position(): Vector2 {\n    assert(this._currentRoad, 'currentRoad must be defined');\n    return this._currentRoad.getPointAtPosition(this._positionOnCurrentRoad);\n  }\n\n  // get predictedPositionInDirectionOfTravel(): Vector2 {\n  //   assert(this._currentRoad, 'currentRoad must be defined');\n  //   return this._getPredictedPointForPosition(\n  //     this._currentRoad,\n  //     this._positionOnCurrentRoad + 1,\n  //   );\n  // }\n\n  get predictedStopPoint(): Vector2 {\n    const currentRoad = this._currentRoad;\n    assert(currentRoad, 'currentRoad must be defined');\n    const stopPosition = this._getPredictedStopPositionIfDecelerating();\n    return this._getPredictedPointForPosition(currentRoad, stopPosition);\n  }\n\n  get predictedStopArea(): Circle {\n    const center = this.predictedStopPoint;\n    return new Circle(center.x, center.y, this.safeRadius);\n  }\n\n  get potentialNextPredictedStopPoint(): Vector2 {\n    const currentRoad = this._currentRoad;\n    assert(currentRoad, 'currentRoad must be defined');\n    const stopPosition = this._getPredictedStopPositionIfDecelerating();\n    return this._getPredictedPointForPosition(currentRoad, stopPosition + 1);\n  }\n\n  get positionOnCurrentRoad(): number {\n    return this._positionOnCurrentRoad;\n  }\n\n  get distanceToEndOfCurrentRoad(): number {\n    assert(this._currentRoad, 'traveller is not on a road');\n    return this._currentRoad.length - this._positionOnCurrentRoad;\n  }\n\n  get destination(): NetworkNode | null {\n    return this._destination;\n  }\n\n  get speed(): number {\n    return this._speed;\n  }\n\n  get isStopped(): boolean {\n    return this.speed === 0;\n  }\n\n  get stoppedTime(): number {\n    return this._stoppedTime;\n  }\n\n  get stopReason(): StopReason | null {\n    return this._stopReason;\n  }\n\n  isStoppedFor(other: Traveller): boolean {\n    return this._stoppedFor.includes(other);\n  }\n\n  onAddedToRoad(road: Road) {\n    this._currentRoad = road;\n    this._positionOnCurrentRoad = 0;\n    if (!this._destination) {\n      this._pickDestination();\n    }\n  }\n\n  onRemovedFromRoad() {\n    this.getScene()\n      .getSystem(TravellerFinder)\n      .removeTraveller(this);\n    this._currentRoad = null;\n  }\n\n  onRemovedFromScene() {\n    this.removeFromCurrentRoad();\n  }\n\n  removeFromCurrentRoad() {\n    if (this._currentRoad) this._currentRoad.removeTraveller(this);\n  }\n\n  update(dtMilliseconds: number) {\n    this._age += dtMilliseconds;\n    this._stopReason = null;\n    this._stoppedFor = [];\n\n    const currentRoad = this._currentRoad;\n    assert(currentRoad, 'current road must be defined');\n\n    this._move(dtMilliseconds, currentRoad);\n\n    const pal = this._getPal();\n    pal\n      .getComponent(PalAbsoluteController)\n      .setPosition(\n        this.position,\n        currentRoad.getAngleAtPosition(this._positionOnCurrentRoad),\n        dtMilliseconds / 1000,\n      );\n    pal.update(dtMilliseconds);\n\n    this._getEnterTransitionScale();\n    // if (window.debugDraw) this._debugDraw();\n\n    this._checkAtEndOfRoad(currentRoad);\n    this._checkExit();\n  }\n\n  draw(ctx: CanvasRenderingContext2D, elapsedTime: number) {\n    const currentRoad = this._currentRoad;\n    assert(currentRoad, 'current road must be defined');\n\n    this._getPal().draw(ctx, elapsedTime);\n\n    // const position = this.position;\n    // const scale =\n    //   this._getEnterTransitionScale() * this._getExitTransitionScale();\n\n    // ctx.beginPath();\n    // ctx.fillStyle = TRAVELLER_COLOR.toString();\n    // ShapeHelpers.circle(ctx, position.x, position.y, TRAVELLER_RADIUS * scale);\n    // ctx.fill();\n  }\n\n  getSortOrder(): number {\n    return this.position.y;\n  }\n\n  get _isExiting(): boolean {\n    return this._exitStartedAt !== null;\n  }\n\n  _getPal(): Entity {\n    if (!this._pal) {\n      this._pal = makeAbsolutePal(this.position);\n    }\n\n    return this._pal;\n  }\n\n  // _debugDraw() {\n  //   const currentRoad = this._currentRoad;\n  //   if (!currentRoad) return;\n\n  //   const predictedStopPoint = this.predictedStopPoint;\n  //   new Circle(\n  //     this.position.x,\n  //     this.position.y,\n  //     this.comfortableRadius\n  //   ).debugDraw(\"rgba(0, 255, 0, 0.4)\");\n  //   new Circle(this.position.x, this.position.y, this.safeRadius).debugDraw(\n  //     this._forceAccelerateTimer ? \"cyan\" : \"red\"\n  //   );\n  //   predictedStopPoint.debugDraw(\"lime\");\n  //   this.predictedStopArea.debugDraw(\"rgba(255, 0, 255, 0.5)\");\n\n  //   const ctx: CanvasRenderingContext2D = window.debugContext;\n  //   ctx.fillText(\n  //     `${this.id} ${Math.round(this._stoppedTime)}`,\n  //     this.position.x,\n  //     this.position.y\n  //   );\n  // }\n\n  _getEnterTransitionScale() {\n    return enterEase(\n      constrain(0, 1, mapRange(0, ENTER_DURATION, 0, 1, this._age)),\n    );\n  }\n\n  _getExitTransitionScale() {\n    if (this._exitStartedAt === null) return 1;\n    return (\n      1 -\n      exitEase(\n        constrain(\n          0,\n          1,\n          mapRange(\n            this._exitStartedAt,\n            this._exitStartedAt + EXIT_DURATION,\n            0,\n            1,\n            this._age,\n          ),\n        ),\n      )\n    );\n  }\n\n  _getPredictedStopPositionIfDecelerating(): number {\n    const timeToStop = -this._speed / DECELERATION;\n    return (\n      this._positionOnCurrentRoad +\n      this._speed * timeToStop +\n      0.5 * DECELERATION * timeToStop * timeToStop\n    );\n  }\n\n  _getPredictedPointForPosition(currentRoad: Road, position: number): Vector2 {\n    if (position <= currentRoad.length) {\n      return currentRoad.getPointAtPosition(position);\n    }\n\n    const overshoot = position - currentRoad.length;\n    const overshootAngle = currentRoad.getAngleAtPosition(currentRoad.length);\n    return Vector2.fromPolar(overshootAngle, overshoot).add(currentRoad.end);\n  }\n\n  _pickDestination() {\n    if (!this._currentRoad) return;\n    const potentialDestinations = this._currentRoad\n      .getAllReachableNodes()\n      .filter(node => node.isDestination);\n    const destination = sample(potentialDestinations);\n    this._destination = destination;\n  }\n\n  _move(dtMilliseconds: number, currentRoad: Road) {\n    const dtSeconds = dtMilliseconds / 1000;\n\n    this._forceAccelerateTimer = constrain(\n      0,\n      FORCE_ACCELERATE_DURATION,\n      this._forceAccelerateTimer - dtMilliseconds,\n    );\n\n    if (\n      this._forceAccelerateTimer <= 0 &&\n      this._shouldDecelerate(currentRoad)\n    ) {\n      this._accelerate(DECELERATION, dtSeconds, currentRoad);\n    } else {\n      this._accelerate(ACCELERATION, dtSeconds, currentRoad);\n    }\n\n    if (this._speed === 0) {\n      this._stoppedTime += dtMilliseconds;\n    } else {\n      this._stoppedTime = 0;\n    }\n  }\n\n  _shouldDecelerate(currentRoad: Road): boolean {\n    const predictedStopPosition = this._getPredictedStopPositionIfDecelerating();\n    if (\n      currentRoad.to === this._destination &&\n      currentRoad.length + ROAD_END_OVERSHOOT < predictedStopPosition\n    ) {\n      this._stopReason = StopReason.STOPPED_FOR_DESTINATION;\n      return true;\n    }\n\n    const nextTravellerOnRoad = currentRoad.getTravellerAfterPosition(\n      this._positionOnCurrentRoad,\n    );\n\n    const safeStopAheadPosition =\n      predictedStopPosition + this.comfortableRadius;\n\n    if (\n      nextTravellerOnRoad &&\n      nextTravellerOnRoad.positionOnCurrentRoad < safeStopAheadPosition\n    ) {\n      this._stopReason = StopReason.STOPPED_FOR_TRAFFIC_IN_FRONT;\n      this._stoppedFor.push(nextTravellerOnRoad);\n      return true;\n    }\n\n    if (currentRoad.to instanceof Intersection) {\n      const intersection = currentRoad.to;\n      const outgoingTraveller = intersection.getClosestOutgoingTraveller();\n      if (outgoingTraveller) {\n        const outgoingTravellerPosition =\n          currentRoad.length + outgoingTraveller.positionOnCurrentRoad;\n\n        if (outgoingTravellerPosition < safeStopAheadPosition) {\n          this._stopReason = StopReason.STOPPED_FOR_TRAFFIC_IN_FRONT;\n          this._stoppedFor.push(outgoingTraveller);\n          return true;\n        }\n      }\n\n      const incomingTraveller = intersection.getClosestIncomingTraveller();\n      if (incomingTraveller && incomingTraveller !== this) {\n        const incomingTravellerPosition =\n          currentRoad.length - incomingTraveller.distanceToEndOfCurrentRoad;\n        if (incomingTravellerPosition < safeStopAheadPosition) {\n          this._stopReason = StopReason.STOPPED_FOR_TRAFFIC_IN_FRONT;\n          this._stoppedFor.push(incomingTraveller);\n          return true;\n        }\n      }\n    }\n\n    if (this._shouldDecelerateForNearbyTravellers(currentRoad)) {\n      this._stopReason = StopReason.STOPPED_FOR_TRAFFIC_NEARBY;\n      return true;\n    }\n\n    // const currentPoint = this.position;\n    // const currentSafeCircle = new Circle(\n    //   currentPoint.x,\n    //   currentPoint.y,\n    //   this.safeRadius,\n    // );\n    // if (\n    //   this._shouldDecelerateForTravellersInCircle(\n    //     currentRoad,\n    //     currentSafeCircle,\n    //   )\n    // ) {\n    //   return true;\n    // }\n\n    // const predictedStopPoint = this._getPredictedStopPointIfDecelerating(\n    //   currentRoad,\n    // );\n    // const predictedSafeCircle = new Circle(\n    //   predictedStopPoint.x,\n    //   predictedStopPoint.y,\n    //   this.safeRadius,\n    // );\n    // if (\n    //   this._shouldDecelerateForTravellersInCircle(\n    //     currentRoad,\n    //     predictedSafeCircle,\n    //   )\n    // ) {\n    //   return true;\n    // }\n\n    return false;\n  }\n\n  _shouldDecelerateForNearbyTravellers(currentRoad: Road): boolean {\n    const travellerFinder = this.getScene().getSystem(TravellerFinder);\n    const stopArea = this.predictedStopArea;\n    const stopPoint = stopArea.center;\n    const nextStopPoint = this.potentialNextPredictedStopPoint;\n    const searchArea = stopArea.withRadius(NEARBY_RADIUS);\n    const nearbyTravellers = travellerFinder.findTravellersInCircle(searchArea);\n\n    for (const other of nearbyTravellers) {\n      // cannot crash into self\n      if (other === this) continue;\n\n      // if we both started breaking now, we would be a safe distance so we're fine\n      const otherStopArea = other.predictedStopArea;\n      const otherStopPoint = otherStopArea.center;\n      if (!stopArea.intersectsCircle(otherStopArea)) continue;\n\n      // currently we think other will stop at the center of otherStopArea.\n      // otherNextStopPoint is one pixel further forward based other's current\n      // heading\n      const otherNextStopPoint = other.potentialNextPredictedStopPoint;\n\n      // if we're moving away from each other, everything is fine:\n      const currentStopDistance = stopPoint.distanceTo(otherStopArea.center);\n      const nextStopDistance = nextStopPoint.distanceTo(otherNextStopPoint);\n      if (nextStopDistance > currentStopDistance) continue;\n\n      // who is moving in a direction that's headed more towards the other's\n      // stop position? if they're moving towards me but i'm moving more\n      // orthagonally relative to them, they should slow down\n      const approachAmount = stopPoint.distanceTo(otherNextStopPoint);\n      const otherApproachAmount = otherStopPoint.distanceTo(nextStopPoint);\n      if (approachAmount < otherApproachAmount) {\n        continue;\n      }\n\n      // so we know we're moving towards them faster than they're moving\n      // towards us, but how much? If it's barely any and we're not already too\n      // close to them, we could just keep going\n      if (\n        approachAmount - otherApproachAmount <\n        0.15\n        // approachAmount > this.safeRadius * 0.8\n      ) {\n        continue;\n      }\n\n      // if there's a clash... just randomly tie-break\n      if (approachAmount === otherApproachAmount) {\n        return Math.random() < 0.5;\n      }\n\n      // if we've been waiting around for fuckin ever just slam that fuckin\n      // pedal to the floor like ugh (in reality just nudge forward a little)\n      // (unless the other one is stopped to cus otherwise we'll just crash)\n      if (this._stoppedTime > PATIENCE && !other.isStopped) {\n        this._forceAcceleration();\n        return false;\n      }\n\n      // attempt to break deadlocks. i guess this is the equivalent of 'other'\n      // waving at the current traveller to continue\n      if (other.isStoppedFor(this)) continue;\n\n      this._stoppedFor.push(other);\n    }\n\n    if (this._stoppedFor.length) return true;\n\n    return false;\n  }\n\n  // _shouldDecelerateForTravellersInCircle(currentRoad: Road, circle: Circle) {\n  //   const travellerFinder = this.getScene().getSystem(TravellerFinder);\n  //   const overlappingTravellers = travellerFinder.findTravellersInCircle(\n  //     circle,\n  //   );\n\n  //   const currentPosition = this.position;\n  //   const nextPosition = this.predictedPositionInDirectionOfTravel;\n\n  //   const clashingTravellers = overlappingTravellers.filter(other => {\n  //     if (other === this) return false;\n  //     if (other.currentRoad === currentRoad) return false;\n\n  // const currentDistance = currentPosition.distanceTo(other.position);\n  // const nextDistance = nextPosition.distanceTo(other.position);\n\n  // const isGettingCloser = nextDistance < currentDistance;\n  // if (!isGettingCloser) return false;\n\n  // const otherNextPosition = other.predictedPositionInDirectionOfTravel;\n  // const otherNextDistance = currentPosition.distanceTo(otherNextPosition);\n  // const thisMoveDelta = nextDistance - currentDistance;\n  // const otherMoveDelta = otherNextDistance - currentDistance;\n  // if (thisMoveDelta < otherMoveDelta) return true;\n\n  // if (this.isStopped && !other.isStopped) return true;\n\n  // if (this.isStopped && other.isStopped) {\n  //   if (this.stoppedTime === other.stoppedTime && this.id < other.id)\n  //     return false;\n  //   if (this.stoppedTime < other.stoppedTime) return false;\n  // }\n\n  //     return true;\n  //   });\n\n  //   return clashingTravellers.length > 0;\n  // }\n\n  _forceAcceleration() {\n    this._forceAccelerateTimer = FORCE_ACCELERATE_DURATION;\n  }\n\n  _accelerate(acceleration: number, dtSeconds: number, currentRoad: Road) {\n    const lastSpeed = this._speed;\n    this._speed = constrain(\n      0,\n      MAX_SPEED,\n      this._speed + acceleration * dtSeconds,\n    );\n    const avgSpeed = (lastSpeed + this._speed) / 2;\n    this._positionOnCurrentRoad = constrain(\n      0,\n      currentRoad.length,\n      this._positionOnCurrentRoad + avgSpeed * dtSeconds,\n    );\n  }\n\n  _checkAtEndOfRoad(currentRoad: Road) {\n    if (this._positionOnCurrentRoad === currentRoad.length) {\n      if (this._isExiting) return;\n      this._onReachEndOfCurrentRoad(currentRoad);\n    }\n  }\n\n  _checkExit() {\n    if (this._isExiting) {\n      assert(this._exitStartedAt);\n      if (this._age >= this._exitStartedAt + EXIT_DURATION) {\n        this._onExit();\n      }\n    }\n  }\n\n  _onReachEndOfCurrentRoad(currentRoad: Road) {\n    const nextNode = currentRoad.to;\n    const destination = this._destination;\n    if (nextNode.canConsumeTraveller) {\n      nextNode.consumeTraveller(this);\n      if (nextNode === destination) {\n        this._onReachDestination();\n      }\n    }\n  }\n\n  _onReachDestination() {\n    this._exit();\n  }\n\n  _onExit() {\n    this.getScene().removeChild(this);\n  }\n\n  _exit() {\n    this._exitStartedAt = this._age;\n  }\n}\n","// @flow\nimport { assert } from '../assert';\nimport { constrain, compact } from '../utils';\nimport Circle from './Circle';\nimport Vector2 from './Vector2';\nimport StraightPathSegment from './StraightPathSegment';\nimport CirclePathSegment from './CirclePathSegment';\nimport Line2 from './Line2';\n\nexport interface PathSegment {\n  getStart(): Vector2;\n  getEnd(): Vector2;\n  getLength(): number;\n  getPointAtPosition(position: number): Vector2;\n  getAngleAtPosition(position: number): number;\n}\n\nexport default class Path implements PathSegment {\n  static straightThroughPoints(...points: ReadonlyArray<Vector2>): Path {\n    let [lastPoint, ...remainingPoints] = points;\n    const path = new Path();\n\n    for (const point of remainingPoints) {\n      path.addSegment(new StraightPathSegment(lastPoint, point));\n      lastPoint = point;\n    }\n\n    return path;\n  }\n\n  static segmentAcrossCircle(\n    containingCircle: Circle,\n    entryAngle: number,\n    exitAngle: number,\n  ): CirclePathSegment | StraightPathSegment {\n    entryAngle = entryAngle + Math.PI;\n    const entryPoint = containingCircle.pointOnCircumference(entryAngle);\n    const exitPoint = containingCircle.pointOnCircumference(exitAngle);\n\n    const entryLineNormal = new Line2(\n      containingCircle.center,\n      entryPoint,\n    ).perpendicularLineThroughPoint(entryPoint);\n    const exitLineNormal = new Line2(\n      containingCircle.center,\n      exitPoint,\n    ).perpendicularLineThroughPoint(exitPoint);\n\n    if (entryLineNormal.isParallelTo(exitLineNormal)) {\n      return new StraightPathSegment(entryPoint, exitPoint);\n    }\n\n    const roadCircleCenter = entryLineNormal.pointAtIntersectionWith(\n      exitLineNormal,\n    );\n    const roadCircleRadius = entryPoint.distanceTo(roadCircleCenter);\n\n    // containingCircle.center.debugDraw('lime');\n    // roadCircleCenter.debugDraw('blue');\n    // entryPoint.debugDraw('magenta');\n    // exitPoint.debugDraw('red');\n\n    return new CirclePathSegment(\n      roadCircleCenter,\n      roadCircleRadius,\n      entryPoint.sub(roadCircleCenter).angle,\n      exitPoint.sub(roadCircleCenter).angle,\n    );\n  }\n\n  segments: PathSegment[] = [];\n\n  constructor(...segments: PathSegment[]) {\n    this.addSegments(...segments);\n  }\n\n  getStart(): Vector2 {\n    return this.segments[0].getStart();\n  }\n\n  getEnd(): Vector2 {\n    return this.segments[this.segments.length - 1].getEnd();\n  }\n\n  getLength(): number {\n    return this.segments.reduce(\n      (length, segment) => length + segment.getLength(),\n      0,\n    );\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const constrained = constrain(0, this.getLength(), position);\n    let soFar = 0;\n    for (const segment of this.segments) {\n      if (constrained <= soFar + segment.getLength()) {\n        return segment.getPointAtPosition(constrained - soFar);\n      }\n      soFar += segment.getLength();\n    }\n    throw new Error('this is supposed to be unreachable oops');\n  }\n\n  getAngleAtPosition(position: number): number {\n    const constrained = constrain(0, this.getLength(), position);\n    let soFar = 0;\n    for (const segment of this.segments) {\n      if (constrained <= soFar + segment.getLength()) {\n        return segment.getAngleAtPosition(constrained - soFar);\n      }\n      soFar += segment.getLength();\n    }\n    throw new Error('this is supposed to be unreachable oops');\n  }\n\n  addSegment(segment: PathSegment): this {\n    const lastSegment = this.segments[this.segments.length - 1];\n    if (lastSegment) {\n      assert(\n        lastSegment.getEnd().equals(segment.getStart()),\n        `segments must neatly join together - ${lastSegment\n          .getEnd()\n          .toString()} !== ${segment.getStart().toString()}`,\n      );\n    }\n    this.segments.push(segment);\n    return this;\n  }\n\n  addSegments(...segments: PathSegment[]): this {\n    segments.forEach(segment => this.addSegment(segment));\n    return this;\n  }\n\n  autoRound(radius: number): this {\n    const newSegments = this.segments.map((segment, i): PathSegment | null => {\n      const lastSegment = i === 0 ? null : this.segments[i - 1];\n      if (!lastSegment) {\n        if (segment instanceof StraightPathSegment) return null;\n        return segment;\n      }\n\n      if (!(segment instanceof StraightPathSegment)) return segment;\n      if (!(lastSegment instanceof StraightPathSegment)) return null;\n\n      assert(\n        lastSegment.getEnd().equals(segment.getStart()),\n        'segments must join',\n      );\n\n      const entryAngle = lastSegment.angle;\n      const exitAngle = segment.angle;\n      const usableRadius = Math.min(\n        radius,\n        lastSegment.getLength() / 2,\n        segment.getLength() / 2,\n      );\n\n      const containingCircle = new Circle(\n        segment.getStart().x,\n        segment.getStart().y,\n        usableRadius,\n      );\n\n      return Path.segmentAcrossCircle(containingCircle, entryAngle, exitAngle);\n    });\n\n    const compacted = compact(newSegments);\n\n    const start = this.getStart();\n    const end = this.getEnd();\n    let lastPoint = start;\n    this.segments = [];\n\n    compacted.forEach(segment => {\n      if (segment.getStart().equals(lastPoint)) {\n        this.addSegment(segment);\n      } else {\n        this.addSegment(new StraightPathSegment(lastPoint, segment.getStart()));\n        this.addSegment(segment);\n      }\n\n      lastPoint = segment.getEnd();\n    });\n\n    if (!lastPoint.equals(end)) {\n      this.addSegment(new StraightPathSegment(lastPoint, end));\n    }\n\n    return this;\n  }\n}\n","// @flow\nimport { compact } from '../lib/utils';\nimport SceneObject from '../lib/scene/SceneObject';\nimport Scene from '../lib/scene/Scene';\nimport Vector2 from '../lib/geom/Vector2';\nimport Circle from '../lib/geom/Circle';\nimport Path from '../lib/geom/Path';\nimport Road from './Road';\nimport Intersection from './networkNodes/Intersection';\nimport ConnectionDirection from './ConnectionDirection';\n\nexport default class Junction extends SceneObject {\n  _circle: Circle;\n  _intersectionsByAngle: { [angleString: string]: Intersection } = {};\n  _incomingIntersections: Set<Intersection> = new Set();\n  _outgoingIntersections: Set<Intersection> = new Set();\n  _roads: Road[] = [];\n\n  constructor(x: number, y: number, radius: number) {\n    super();\n    this._circle = new Circle(x, y, radius);\n  }\n\n  get position(): Vector2 {\n    return this._circle.center;\n  }\n\n  onAddedToScene(scene: Scene) {\n    super.onAddedToScene(scene);\n    this._roads.forEach(road => scene.addChild(road));\n  }\n\n  getVisualConnectionPointAtAngle(radians: number): Vector2 {\n    return this._circle.pointOnCircumference(radians);\n  }\n\n  connectToRoadAtAngle(\n    road: Road,\n    angle: number,\n    direction: ConnectionDirection,\n  ): Intersection {\n    const intersection = this._intersectionAtAngle(angle);\n    intersection.connectTo(road, direction);\n\n    const isIncoming =\n      direction === ConnectionDirection.IN ||\n      this._incomingIntersections.has(intersection);\n\n    const isOutgoing =\n      direction === ConnectionDirection.OUT ||\n      this._outgoingIntersections.has(intersection);\n\n    if (isIncoming) this._incomingIntersections.add(intersection);\n    if (isOutgoing) this._outgoingIntersections.add(intersection);\n\n    this._intersections.forEach(other => {\n      if (other === intersection) return;\n\n      if (isIncoming && this._outgoingIntersections.has(other)) {\n        const path = new Path(\n          Path.segmentAcrossCircle(\n            this._circle,\n            this._circle.center.sub(intersection.position).angle,\n            other.position.sub(this._circle.center).angle,\n          ),\n        );\n\n        this._addRoad(new Road(intersection, other, { path }));\n      }\n\n      if (isOutgoing && this._incomingIntersections.has(other)) {\n        const path = new Path(\n          Path.segmentAcrossCircle(\n            this._circle,\n            this._circle.center.sub(other.position).angle,\n            intersection.position.sub(this._circle.center).angle,\n          ),\n        );\n        this._addRoad(new Road(other, intersection, { path }));\n      }\n    });\n\n    return intersection;\n  }\n\n  _intersectionAtAngle(angle: number): Intersection {\n    const angleStr = angle.toString();\n    if (this._intersectionsByAngle[angleStr]) {\n      return this._intersectionsByAngle[angleStr];\n    }\n\n    const intersection = this._createIntersectionAtAngle(angle);\n    this._intersectionsByAngle[angleStr] = intersection;\n    return intersection;\n  }\n\n  _createIntersectionAtAngle(angle: number): Intersection {\n    const position = this.getVisualConnectionPointAtAngle(angle);\n    return new Intersection(position.x, position.y);\n  }\n\n  get _intersections(): Intersection[] {\n    return compact(\n      Object.keys(this._intersectionsByAngle).map(\n        angle => this._intersectionsByAngle[angle],\n      ),\n    );\n  }\n\n  _addRoad(road: Road) {\n    this._roads.push(road);\n    if (this.hasScene()) {\n      this.getScene().addChild(road);\n    }\n  }\n}\n","// @flow\nimport SceneObject from '../lib/scene/SceneObject';\nimport Path from '../lib/geom/Path';\nimport StraightPathSegment from '../lib/geom/StraightPathSegment';\nimport Vector2 from '../lib/geom/Vector2';\nimport * as ShapeHelpers from '../lib/canvasShapeHelpers';\nimport { YELLOW } from './colors';\nimport ConnectionDirection from './ConnectionDirection';\nimport { NetworkNode } from './networkNodes/NetworkNode';\nimport Junction from './Junction';\nimport Traveller from './Traveller';\n\n// const ROAD_OUTER_COLOR = BLUE;\n// const ROAD_INNER_COLOR = LIGHT_BG;\nconst ROAD_DASH_COLOR = YELLOW.darken(0.2);\n// const ROAD_OUTER_WIDTH = 12;\n// const ROAD_INNER_WIDTH = 13;\nconst ROAD_DASH_WIDTH = 3;\nconst ROAD_IDEAL_DASH = [5, 10];\nconst ROAD_IDEAL_DASH_LENGTH = ROAD_IDEAL_DASH.reduce((a, b) => a + b, 0);\nconst ROAD_DASH_SPEED = 0.05;\n\nexport type RoadOptions = {\n  autoRound?: number;\n  points?: Array<Vector2>;\n  path?: Path;\n};\n\nexport default class Road extends SceneObject {\n  isNode = false;\n  from: NetworkNode;\n  to: NetworkNode;\n  _path: Path;\n  _currentTravellers: Traveller[] = [];\n\n  constructor(\n    from: NetworkNode | Junction,\n    to: NetworkNode | Junction,\n    { points, autoRound, path }: RoadOptions = {},\n  ) {\n    super();\n\n    const angleFrom = points\n      ? from.position.angleTo(points[0])\n      : from.position.angleTo(to.position);\n\n    const angleTo = points\n      ? to.position.angleTo(points[points.length - 1])\n      : to.position.angleTo(from.position);\n\n    if (path) {\n      this._path = path;\n    } else if (points) {\n      this._path = Path.straightThroughPoints(\n        from.getVisualConnectionPointAtAngle(angleFrom),\n        ...points,\n        to.getVisualConnectionPointAtAngle(angleTo),\n      );\n    } else {\n      this._path = new Path().addSegment(\n        new StraightPathSegment(\n          from.getVisualConnectionPointAtAngle(angleFrom),\n          to.getVisualConnectionPointAtAngle(angleTo),\n        ),\n      );\n    }\n\n    if (autoRound != null) {\n      this._path.autoRound(autoRound);\n    }\n\n    if (from instanceof Junction) {\n      this.from = from.connectToRoadAtAngle(\n        this,\n        angleFrom,\n        ConnectionDirection.OUT,\n      );\n    } else {\n      this.from = from;\n      from.connectTo(this, ConnectionDirection.OUT);\n    }\n\n    if (to instanceof Junction) {\n      this.to = to.connectToRoadAtAngle(this, angleTo, ConnectionDirection.IN);\n    } else {\n      this.to = to;\n      to.connectTo(this, ConnectionDirection.IN);\n    }\n  }\n\n  get length(): number {\n    return this._path.getLength();\n  }\n\n  get start(): Vector2 {\n    return this._path.getStart();\n  }\n\n  get end(): Vector2 {\n    return this._path.getEnd();\n  }\n\n  get expectedTimeFromStartToEnd(): number {\n    if (this._currentTravellers.length) {\n      const avgSpeed =\n        this._currentTravellers.reduce(\n          (sum, traveller) => sum + traveller.speed,\n          0,\n        ) / this._currentTravellers.length;\n      return this.length / avgSpeed;\n    }\n\n    return this.length / (Traveller.MAX_SPEED * 0.7);\n  }\n\n  canAddTravellerAtStart(): boolean {\n    const nextTraveller = this.getTravellerAfterPosition(0);\n    if (!nextTraveller) return true;\n    return (\n      nextTraveller.positionOnCurrentRoad > nextTraveller.comfortableRadius\n    );\n  }\n\n  addTravellerAtStart(traveller: Traveller) {\n    this._currentTravellers.push(traveller);\n    traveller.onAddedToRoad(this);\n  }\n\n  removeTraveller(traveller: Traveller): boolean {\n    const index = this._currentTravellers.indexOf(traveller);\n    if (index === -1) return false;\n    this.removeTravellerAtIndex(index);\n    return true;\n  }\n\n  removeTravellerAtIndex(index: number): Traveller {\n    const traveller = this._currentTravellers[index];\n    this._currentTravellers.splice(index, 1);\n    traveller.onRemovedFromRoad();\n    return traveller;\n  }\n\n  getAllReachableNodes(visited: Set<NetworkNode> = new Set()): NetworkNode[] {\n    const nodes = [] as Array<NetworkNode>;\n    if (visited.has(this.to)) return nodes;\n    return [...this.to.getAllReachableNodes(visited), this.to];\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    return this._path.getPointAtPosition(position);\n  }\n\n  getAngleAtPosition(position: number): number {\n    return this._path.getAngleAtPosition(position);\n  }\n\n  getTravellerAfterPosition(position: number): Traveller | null {\n    let bestTraveller = null;\n    let bestDistance = Infinity;\n\n    this._currentTravellers.forEach(traveller => {\n      const distance = traveller.positionOnCurrentRoad - position;\n      if (distance <= 0) return;\n      if (distance < bestDistance) {\n        bestDistance = distance;\n        bestTraveller = traveller;\n      }\n    });\n\n    return bestTraveller;\n  }\n\n  getTravellerBeforePosition(position: number): Traveller | null {\n    let bestTraveller = null;\n    let bestDistance = Infinity;\n\n    this._currentTravellers.forEach(traveller => {\n      const distance = position - traveller.positionOnCurrentRoad;\n      if (distance <= 0) return;\n      if (distance < bestDistance) {\n        bestDistance = distance;\n        bestTraveller = traveller;\n      }\n    });\n\n    return bestTraveller;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, time: number) {\n    ctx.beginPath();\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ShapeHelpers.path(ctx, this._path);\n\n    // ctx.strokeStyle = ROAD_OUTER_COLOR.toString();\n    // ctx.lineWidth = ROAD_OUTER_WIDTH;\n    // ctx.stroke();\n\n    // ctx.strokeStyle = ROAD_INNER_COLOR.toString();\n    // ctx.lineWidth = ROAD_INNER_WIDTH;\n    // ctx.stroke();\n\n    const dashScale = this._getLineDashScale();\n    const dashLength = ROAD_IDEAL_DASH_LENGTH * dashScale;\n    ctx.setLineDash(ROAD_IDEAL_DASH.map(length => length * dashScale));\n    ctx.strokeStyle = ROAD_DASH_COLOR.toString();\n    ctx.lineDashOffset = (-time * ROAD_DASH_SPEED * dashScale) % dashLength;\n    ctx.lineWidth = ROAD_DASH_WIDTH;\n    // ctx.strokeStyle = 'black';\n    // ctx.lineWidth = 1;\n    ctx.stroke();\n  }\n\n  _getLineDashScale(): number {\n    const wholeDashCount = Math.floor(this.length / ROAD_IDEAL_DASH_LENGTH);\n    const wholeDashLength = wholeDashCount * ROAD_IDEAL_DASH_LENGTH;\n\n    const roundDownLength = this.length - wholeDashLength;\n    const roundUpLength =\n      wholeDashLength + ROAD_IDEAL_DASH_LENGTH - this.length;\n\n    const dashScale =\n      roundDownLength < roundUpLength\n        ? this.length / wholeDashLength\n        : this.length / (wholeDashLength + ROAD_IDEAL_DASH_LENGTH);\n\n    return dashScale;\n  }\n}\n","// @flow\nimport SceneObject from '../../lib/scene/SceneObject';\nimport Circle from '../../lib/geom/Circle';\nimport Vector2 from '../../lib/geom/Vector2';\nimport * as ShapeHelpers from '../../lib/canvasShapeHelpers';\nimport { outSine } from '../../lib/easings';\nimport { mapRange, constrain, flatten, uniq } from '../../lib/utils';\nimport Pulse from '../effects/Pulse';\nimport { TEAL } from '../colors';\nimport ConnectionSet from '../ConnectionSet';\nimport ConnectionDirection from '../ConnectionDirection';\nimport Traveller from '../Traveller';\nimport Road from '../Road';\nimport { NetworkNode } from './NetworkNode';\n\nconst DEFAULT_COOLDOWN = 500;\n\nconst RADIUS = 20;\nconst VISUAL_CONNECTION_RADIUS = 30;\nconst CLOCK_RADIUS = RADIUS * 0.7;\nconst PULSE_RADIUS = 35;\n\nconst PULSE_DURATION = 500;\nconst CLOCK_FADE_DURATION = 150;\n\nconst MAIN_COLOR = TEAL.lighten(0.1);\nconst CLOCK_COLOR = TEAL.darken(0.1);\nconst PULSE_COLOR = TEAL.lighten(0.2).fade(0.1);\n\nexport default class Producer extends SceneObject implements NetworkNode {\n  isDestination = false;\n  canConsumeTraveller = false;\n  _circle: Circle;\n  _visualConnectionCircle: Circle;\n  _cooldown: number;\n  _timer: number;\n  _connectionSet: ConnectionSet = new ConnectionSet();\n\n  constructor(x: number, y: number, cooldown: number = DEFAULT_COOLDOWN) {\n    super();\n    this._circle = new Circle(x, y, RADIUS);\n    this._visualConnectionCircle = new Circle(x, y, VISUAL_CONNECTION_RADIUS);\n    this._cooldown = cooldown;\n    this._timer = cooldown;\n  }\n\n  get position(): Vector2 {\n    return this._circle.center;\n  }\n\n  get incomingConnections(): Road[] {\n    return this._connectionSet.incoming;\n  }\n\n  get outgoingConnections(): Road[] {\n    return this._connectionSet.outgoing;\n  }\n\n  getAllReachableNodes(visited: Set<NetworkNode> = new Set()) {\n    visited.add(this);\n    return uniq(\n      flatten(\n        this._connectionSet.outgoing.map(road =>\n          road.getAllReachableNodes(visited),\n        ),\n      ),\n    );\n  }\n\n  getVisualConnectionPointAtAngle(radians: number): Vector2 {\n    return this._visualConnectionCircle.pointOnCircumference(radians);\n  }\n\n  consumeTraveller() {\n    throw new Error('producer cannot consume traveller');\n  }\n\n  connectTo(node: Road, direction: ConnectionDirection) {\n    this._connectionSet.add(node, direction);\n  }\n\n  update(delta: number) {\n    this._timer = constrain(0, this._cooldown, this._timer + delta);\n    if (this._timer >= this._cooldown) {\n      this._onTimerEnd();\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const progress = this._timer / this._cooldown;\n\n    const colorMixAmount = constrain(\n      0,\n      1,\n      mapRange(0, CLOCK_FADE_DURATION, 1, 0, this._timer),\n    );\n    const bgColor = MAIN_COLOR.mix(CLOCK_COLOR, colorMixAmount);\n\n    ctx.beginPath();\n    ctx.fillStyle = bgColor.toString();\n    ShapeHelpers.circle(\n      ctx,\n      this._circle.center.x,\n      this._circle.center.y,\n      this._circle.radius,\n    );\n    ctx.fill();\n\n    ctx.beginPath();\n    ctx.fillStyle = CLOCK_COLOR.toString();\n    ctx.moveTo(this._circle.center.x, this._circle.center.y);\n    ctx.arc(\n      this._circle.center.x,\n      this._circle.center.y,\n      this._circle.radius,\n      -Math.PI / 2,\n      progress * 2 * Math.PI - Math.PI / 2,\n      false,\n    );\n    ctx.fill();\n\n    ctx.beginPath();\n    ctx.fillStyle = MAIN_COLOR.toString();\n    ShapeHelpers.circle(\n      ctx,\n      this._circle.center.x,\n      this._circle.center.y,\n      CLOCK_RADIUS,\n    );\n    ctx.fill();\n  }\n\n  _resetTimer() {\n    this._timer = 0;\n  }\n\n  _onTimerEnd() {\n    const didEmitTraveller = this._attemptEmitTraveller();\n    if (didEmitTraveller) {\n      this._pulse();\n      this._resetTimer();\n    }\n  }\n\n  _pulse() {\n    this.getScene().addChildBefore(\n      this,\n      new Pulse({\n        x: this._circle.center.x,\n        y: this._circle.center.y,\n        startRadius: RADIUS,\n        endRadius: PULSE_RADIUS,\n        duration: PULSE_DURATION,\n        color: PULSE_COLOR,\n        easeRadius: outSine,\n        removeOnComplete: true,\n      }),\n    );\n  }\n\n  _attemptEmitTraveller(): boolean {\n    const road = this._connectionSet.sampleOutgoing();\n    if (!(road instanceof Road)) return false;\n\n    if (road.canAddTravellerAtStart()) {\n      const traveller = new Traveller();\n      road.addTravellerAtStart(traveller);\n      this.getScene().addChild(traveller);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","// @flow\nimport { assert } from '../lib/assert';\nimport Scene from '../lib/scene/Scene';\nimport Consumer from './networkNodes/Consumer';\nimport Producer from './networkNodes/Producer';\nimport Road from './Road';\nimport Junction from './Junction';\n// import DebugOverlay from \"./systems/DebugOverlay\";\nimport TravellerFinder from './TravellerFinder';\nimport Vector2 from '../lib/geom/Vector2';\n\nconst ROUND = 50;\n\nconst scene = new Scene(800, 600, window.devicePixelRatio);\nconst root = document.getElementById('root');\nassert(root, '#root must be present');\nscene.appendTo(root);\n\n// scene.addSystem(new DebugOverlay());\nscene.addSystem(new TravellerFinder());\n\nscenario3();\n\nscene.start();\n\nfunction scenario1() {\n  const producer1 = new Producer(100, 100, 500);\n  // const producer2 = new Consumer(100, 300, 2500);\n  const consumer1 = new Consumer(400, 200, 1500);\n  const consumer2 = new Consumer(250, 200, 1500);\n  scene.addChild(producer1);\n  // scene.addChild(producer2);\n  scene.addChild(consumer1);\n  scene.addChild(consumer2);\n\n  const junction1 = new Junction(250, 100, ROUND);\n  scene.addChild(junction1);\n  scene.addChild(new Road(producer1, junction1));\n  scene.addChild(\n    new Road(junction1, consumer1, {\n      points: [new Vector2(400, 100)],\n      autoRound: ROUND,\n    }),\n  );\n  scene.addChild(new Road(junction1, consumer2));\n\n  // const path2 = new Path();\n  // path2.addSegments(\n  //   new StraightPathSegment(new Vector2(130, 300), new Vector2(380, 300)),\n  //   new CirclePathSegment(new Vector2(380, 280), 20, Math.PI * 0.5, 0),\n  //   new StraightPathSegment(new Vector2(400, 280), new Vector2(400, 230)),\n  // );\n  // const road2 = new Road(producer2, consumer1, path2);\n  // scene.addChild(road2);\n}\n\nfunction scenario2() {\n  const producer = new Producer(100, 300, 500);\n  const junction = new Junction(300, 300, ROUND);\n  const consumer1 = new Consumer(300, 100, 5000);\n  const consumer2 = new Consumer(500, 300, 5000);\n  const consumer3 = new Consumer(300, 500, 5000);\n\n  scene.addChild(new Road(producer, junction));\n  scene.addChild(new Road(junction, consumer1));\n  scene.addChild(new Road(junction, consumer2));\n  scene.addChild(new Road(junction, consumer3));\n\n  scene.addChild(producer);\n  scene.addChild(junction);\n  scene.addChild(consumer1);\n  scene.addChild(consumer2);\n  scene.addChild(consumer3);\n}\n\nfunction scenario3() {\n  const northConsumer = new Consumer(300, 550, 1500);\n  const middleConsumer = new Consumer(100, 450, 1500);\n  const southConsumer = new Consumer(100, 250, 1500);\n  const eastProducer = new Producer(600, 150, 500);\n  const westProducer = new Producer(100, 100, 500);\n  // const westProducer = new Producer(250, 250, 100);\n\n  scene.addChild(northConsumer);\n  scene.addChild(middleConsumer);\n  scene.addChild(southConsumer);\n  scene.addChild(eastProducer);\n  scene.addChild(westProducer);\n\n  const mainJunction = new Junction(300, 150, ROUND);\n  const eastProducerSplit = new Junction(500, 370, ROUND);\n  const southConsumerJoin = new Junction(330, 400, ROUND);\n  scene.addChild(mainJunction);\n  scene.addChild(eastProducerSplit);\n  scene.addChild(southConsumerJoin);\n  scene.addChild(new Road(westProducer, mainJunction));\n  scene.addChild(new Road(eastProducer, eastProducerSplit));\n  scene.addChild(new Road(eastProducerSplit, southConsumerJoin));\n  // scene.addChild(\n  //   new Road(eastProducerSplit, mainJunction, {\n  //     points: [[600, 280], [700, 50], [450, 180], [450, 100], [300, 20]],\n  //     // points: [[400, 100]],\n  //     autoRound: 50,\n  //   }),\n  // );\n  scene.addChild(\n    new Road(eastProducerSplit, mainJunction, {\n      points: [new Vector2(400, 300), new Vector2(500, 50)],\n      autoRound: ROUND,\n    }),\n  );\n\n  // scene.addChild(new Road(westProducer, mainJunction));\n  scene.addChild(new Road(mainJunction, southConsumerJoin));\n  scene.addChild(new Road(southConsumerJoin, northConsumer));\n  scene.addChild(new Road(mainJunction, middleConsumer));\n  scene.addChild(new Road(mainJunction, southConsumer));\n}\n\nfunction scenario4() {\n  const producer1 = new Producer(100, 100, 1000);\n  const producer2 = new Producer(300, 200, 1000);\n  const producer3 = new Producer(100, 300, 1000);\n  // const producer4 = new Producer(400, 100, 1000);\n  const consumer1 = new Consumer(300, 100, 1000);\n  const consumer2 = new Consumer(100, 200, 1000);\n  const consumer3 = new Consumer(300, 300, 1000);\n  // const consumer4 = new Consumer(430, 300, 1000);\n  scene.addChild(producer1);\n  scene.addChild(producer2);\n  scene.addChild(producer3);\n  // scene.addChild(producer4);\n  scene.addChild(consumer1);\n  scene.addChild(consumer2);\n  scene.addChild(consumer3);\n  // scene.addChild(consumer4);\n\n  const junction = new Junction(200, 200, 30);\n  scene.addChild(junction);\n\n  scene.addChild(new Road(producer1, junction));\n  scene.addChild(new Road(producer2, junction));\n  scene.addChild(new Road(producer3, junction));\n  scene.addChild(new Road(junction, consumer1));\n  scene.addChild(new Road(junction, consumer2));\n  scene.addChild(new Road(junction, consumer3));\n\n  // scene.addChild(\n  //   new Road(producer4, consumer4, {\n  //     points: [[400, 250], [415, 250], [415, 150], [430, 150]],\n  //     autoRound: 30,\n  //   }),\n  // );\n}\n\nfunction scenario6() {\n  const producer = new Producer(300, 50, 1500).addTo(scene);\n  const consumer = new Consumer(500, 50, 100).addTo(scene);\n  new Road(producer, consumer, {\n    points: [\n      new Vector2(350, 150),\n      new Vector2(150, 350),\n      new Vector2(400, 500),\n      new Vector2(650, 350),\n      new Vector2(450, 150),\n    ],\n    autoRound: 400,\n  }).addTo(scene);\n}\n"]}