import{t as $,D as ce,m as q,E as We,F as gt,G as je,l as Et,a as X,h as vt,H as $e,J as yt,K as Nt,L as _t,i as St,A as V,C as bt,w as wt,s as xe}from"../chunks/chunk_assert.132f6b36.js";/* empty css                               */import{r as _,a as It}from"../chunks/chunk_index.8cb7377b.js";import{D as Mt}from"../chunks/chunk_DebugDraw.f420dd40.js";import{V as he}from"../chunks/chunk_Vector2.146fe4f2.js";import{j as S,c as ge,a as B,F as Ee,R as At}from"../chunks/chunk_jsx-runtime.e6b2899b.js";import{E as ue}from"../chunks/chunk_EventEmitter.a86bccd6.js";import"../chunks/chunk__commonjsHelpers.fbcca4d8.js";const Tt=45,Pe=1.5,ne=8;function Rt(s){const e=s%12;return e===1||e===3||e===6||e===8||e===10}const Ct=_.exports.memo(function({offset:e,isAccidental:t,styles:n,isNoteDown:r,note:a,setRefForKey:c}){const p=t?{left:e-n.accidentalWidth/2,width:n.accidentalWidth,height:n.accidentalHeight,position:"absolute",zIndex:1,borderWidth:n.scale*Pe}:{left:e,width:n.standardWidth,height:n.standardHeight,position:"absolute",borderWidth:n.scale*Pe};return S("div",{ref:h=>c(h,a),style:p,className:ge("border-gray-600",{"bg-black hover:bg-blue-900":t,"bg-white hover:bg-blue-200":!t,"bg-purple-800":t&&r,"bg-purple-300":!t&&r})})});function Dt({lowestNote:s,highestNote:e,scale:t,top:n,left:r,notesDown:a,setRefForKey:c}){const p=_.exports.useMemo(()=>{const E=(e-s)*.5833333333333334,m=Tt*t,d=E*m,v=m*.6;return{standardWidth:m,accidentalWidth:v,standardHeight:m*6,accidentalHeight:v*6,scale:t,totalWidth:d}},[s,e,t]),h=p.totalWidth+2*ne*t,u=p.standardHeight+2*ne*t;let g=0;return S("div",{className:"absolute border-gray-600 bg-gray-600",style:{width:h,height:u,borderWidth:ne*t,borderRadius:ne*t,top:n-u/2,left:r-h/2},children:$(e-s,E=>{const m=s+E,d=Rt(m),v=S(Ct,{note:m,offset:g,isAccidental:d,styles:p,isNoteDown:a.includes(m),setRefForKey:c},m);return g+=d?0:p.standardWidth,v})})}const Ot=_.exports.memo(Dt);class O{constructor(e=!1){this.eventMap={},this.eventsSuspended=e==1}addListener(e,t,n={}){if(typeof e=="string"&&e.length<1||e instanceof String&&e.length<1||typeof e!="string"&&!(e instanceof String)&&e!==O.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(typeof t!="function")throw new TypeError("The callback must be a function.");const r=new ke(e,this,t,n);return this.eventMap[e]||(this.eventMap[e]=[]),n.prepend?this.eventMap[e].unshift(r):this.eventMap[e].push(r),r}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(e,t){return e===void 0?!!(this.eventMap[O.ANY_EVENT]&&this.eventMap[O.ANY_EVENT].length>0)||Object.entries(this.eventMap).some(([,n])=>n.length>0):this.eventMap[e]&&this.eventMap[e].length>0?t instanceof ke?this.eventMap[e].filter(n=>n===t).length>0:typeof t=="function"?this.eventMap[e].filter(n=>n.callback===t).length>0:t==null:!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(t=>{t.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(t=>{t.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(e,...t){if(typeof e!="string"&&!(e instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let n=[],r=this.eventMap[O.ANY_EVENT]||[];return this.eventMap[e]&&(r=r.concat(this.eventMap[e])),r.forEach(a=>{if(a.suspended)return;let c=[...t];Array.isArray(a.arguments)&&(c=c.concat(a.arguments)),a.remaining>0&&(n.push(a.callback.apply(a.context,c)),a.count++),--a.remaining<1&&a.remove()}),n}removeListener(e,t,n={}){if(e===void 0)return void(this.eventMap={});if(!this.eventMap[e])return;let r=this.eventMap[e].filter(a=>t&&a.callback!==t||n.remaining&&n.remaining!==a.remaining||n.context&&n.context!==a.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise((n,r)=>{let a,c=this.addListener(e,()=>{clearTimeout(a),n()},{remaining:1});t.duration!==1/0&&(a=setTimeout(()=>{c.remove(),r("The duration expired before the event was emitted.")},t.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class ke{constructor(e,t,n,r={}){if(typeof e!="string"&&!(e instanceof String)&&e!==O.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!t)throw new ReferenceError("The 'target' parameter is mandatory.");if(typeof n!="function")throw new TypeError("The 'callback' must be a function.");r.arguments===void 0||Array.isArray(r.arguments)||(r.arguments=[r.arguments]),(r=Object.assign({context:t,remaining:1/0,arguments:void 0,duration:1/0},r)).duration!==1/0&&setTimeout(()=>this.remove(),r.duration),this.arguments=r.arguments,this.callback=n,this.context=r.context,this.count=0,this.event=e,this.remaining=parseInt(r.remaining)>=1?parseInt(r.remaining):1/0,this.suspended=!1,this.target=t}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}/**
 * The `Enumerations` class contains enumerations and arrays of elements used throughout the
 * library. All properties are static and should be referenced using the class name. For example:
 * `Enumerations.MIDI_CHANNEL_MESSAGES`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class i{static get MIDI_CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get MIDI_CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CONTROL_CHANGE_MESSAGES(){return{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-databuttonincrement","rpn-databuttondecrement"]}}/**
 * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
 *
 * `Note` objects can be played back on a single channel by calling
 * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
 * output, by calling [`Output.playNote()`]{@link Output#playNote}.
 *
 * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
 * These can be changed by passing in the appropriate option. It is also possible to set a
 * system-wide default for attack and release velocities by using the
 * [`WebMidi.defaults`](WebMidi#defaults) property.
 *
 * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
 * [`rawRelease`](#rawRelease) to both get and set the values.
 *
 * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
 * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
 * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
 * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
 * [`Output.stopNote()`]{@link Output#stopNote} or similar.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class z{constructor(e,t={}){this.duration=l.defaults.note.duration,this.attack=l.defaults.note.attack,this.release=l.defaults.note.release,t.duration!=null&&(this.duration=t.duration),t.attack!=null&&(this.attack=t.attack),t.rawAttack!=null&&(this.attack=o.from7bitToFloat(t.rawAttack)),t.release!=null&&(this.release=t.release),t.rawRelease!=null&&(this.release=o.from7bitToFloat(t.rawRelease)),Number.isInteger(e)?this.identifier=o.toNoteIdentifier(e):this.identifier=e}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(e){const t=o.getNoteDetails(e);if(l.validation&&!e)throw new Error("Invalid note identifier");this._name=t.name,this._accidental=t.accidental,this._octave=t.octave}get name(){return this._name}set name(e){if(l.validation&&(e=e.toUpperCase(),!["C","D","E","F","G","A","B"].includes(e)))throw new Error("Invalid name value");this._name=e}get accidental(){return this._accidental}set accidental(e){if(l.validation&&(e=e.toLowerCase(),!["#","##","b","bb"].includes(e)))throw new Error("Invalid accidental value");this._accidental=e}get octave(){return this._octave}set octave(e){if(l.validation&&(e=parseInt(e),isNaN(e)))throw new Error("Invalid octave value");this._octave=e}get duration(){return this._duration}set duration(e){if(l.validation&&(e=parseFloat(e),isNaN(e)||e===null||e<0))throw new RangeError("Invalid duration value.");this._duration=e}get attack(){return this._attack}set attack(e){if(l.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid attack value.");this._attack=e}get release(){return this._release}set release(e){if(l.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid release value.");this._release=e}get rawAttack(){return o.fromFloatTo7Bit(this._attack)}set rawAttack(e){this._attack=o.from7bitToFloat(e)}get rawRelease(){return o.fromFloatTo7Bit(this._release)}set rawRelease(e){this._release=o.from7bitToFloat(e)}get number(){return o.toNoteNumber(this.identifier)}getOffsetNumber(e=0,t=0){return l.validation&&(e=parseInt(e)||0,t=parseInt(t)||0),Math.min(Math.max(this.number+12*e+t,0),127)}}/**
 * The `Utilities` class contains general-purpose utility methods. All methods are static and
 * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class o{static toNoteNumber(e,t=0){if(t=t==null?0:parseInt(t),isNaN(t))throw new RangeError("Invalid 'octaveOffset' value");typeof e!="string"&&(e="");const n=this.getNoteDetails(e);if(!n)throw new TypeError("Invalid note identifier");let r=12*(n.octave+1+t);if(r+={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[n.name],n.accidental&&(n.accidental.startsWith("b")?r-=n.accidental.length:r+=n.accidental.length),r<0||r>127)throw new RangeError("Invalid octaveOffset value");return r}static getNoteDetails(e){Number.isInteger(e)&&(e=this.toNoteIdentifier(e));const t=e.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!t)throw new TypeError("Invalid note identifier");const n=t[1].toUpperCase(),r=parseInt(t[3]);let a=t[2].toLowerCase();return a=a===""?void 0:a,{accidental:a,identifier:n+(a||"")+r,name:n,octave:r}}static sanitizeChannels(e){let t;if(this.validation){if(e==="all")t=["all"];else if(e==="none")return[]}return t=Array.isArray(e)?e:[e],t.indexOf("all")>-1&&(t=i.MIDI_CHANNEL_NUMBERS),t.map(function(n){return parseInt(n)}).filter(function(n){return n>=1&&n<=16})}static toTimestamp(e){let t=!1;const n=parseFloat(e);return!isNaN(n)&&(typeof e=="string"&&e.substring(0,1)==="+"?n>=0&&(t=l.time+n):n>=0&&(t=n),t)}static guessNoteNumber(e,t){t=parseInt(t)||0;let n=!1;if(Number.isInteger(e)&&e>=0&&e<=127)n=parseInt(e);else if(parseInt(e)>=0&&parseInt(e)<=127)n=parseInt(e);else if(typeof e=="string"||e instanceof String)try{n=this.toNoteNumber(e.trim(),t)}catch{return!1}return n}static toNoteIdentifier(e,t){if(e=parseInt(e),isNaN(e)||e<0||e>127)throw new RangeError("Invalid note number");if(t=t==null?0:parseInt(t),isNaN(t))throw new RangeError("Invalid octaveOffset value");const n=Math.floor(e/12-1)+t;return["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][e%12]+n.toString()}static buildNote(e,t={}){if(t.octaveOffset=parseInt(t.octaveOffset)||0,e instanceof z)return e;let n=this.guessNoteNumber(e,t.octaveOffset);if(n===!1)throw new TypeError(`The input could not be parsed as a note (${e})`);return t.octaveOffset=void 0,new z(n,t)}static buildNoteArray(e,t={}){let n=[];return Array.isArray(e)||(e=[e]),e.forEach(r=>{n.push(this.buildNote(r,t))}),n}static from7bitToFloat(e){return e===1/0&&(e=127),e=parseInt(e)||0,Math.min(Math.max(e/127,0),1)}static fromFloatTo7Bit(e){return e===1/0&&(e=1),e=parseFloat(e)||0,Math.min(Math.max(Math.round(127*e),0),127)}static fromMsbLsbToFloat(e,t=0){l.validation&&(e=Math.min(Math.max(parseInt(e)||0,0),127),t=Math.min(Math.max(parseInt(t)||0,0),127));const n=((e<<7)+t)/16383;return Math.min(Math.max(n,0),1)}static fromFloatToMsbLsb(e){l.validation&&(e=Math.min(Math.max(parseFloat(e)||0,0),1));const t=Math.round(16383*e);return{msb:t>>7,lsb:127&t}}static offsetNumber(e,t=0,n=0){if(l.validation){if(e=parseInt(e),isNaN(e))throw new Error("Invalid note number");t=parseInt(t)||0,n=parseInt(n)||0}return Math.min(Math.max(e+12*t+n,0),127)}static getPropertyByValue(e,t){return Object.keys(e).find(n=>e[n]===t)}static getCcNameByNumber(e){return o.getPropertyByValue(i.MIDI_CONTROL_CHANGE_MESSAGES,e)}static getChannelModeByNumber(e){if(!(e>=120&&e<=127))return!1;for(let t in i.MIDI_CHANNEL_MODE_MESSAGES)if(i.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(t)&&e===i.MIDI_CHANNEL_MODE_MESSAGES[t])return t;return!1}static get isNode(){return typeof process<"u"&&process.versions!=null&&process.versions.node!=null}static get isBrowser(){return typeof window<"u"&&window.document!==void 0}}/**
 * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
 * provided by an [`Output`](Output) port which, itself, is made available by a device. The
 * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `OutputChannel` objects can be found inside the parent output's
 * [`channels`]{@link Output#channels} property.
 *
 * @param {Output} output The [`Output`](Output) this channel belongs to.
 * @param {number} number The MIDI channel number (`1` - `16`).
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class Bt extends O{constructor(e,t){super(),this._output=e,this._number=t,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(e,t={time:0}){return this.output.send(e,t),this}sendKeyAftertouch(e,t,n={}){if(l.validation){if(n.useRawValue&&(n.rawValue=n.useRawValue),isNaN(parseFloat(t)))throw new RangeError("Invalid key aftertouch value.");if(n.rawValue){if(!(t>=0&&t<=127&&Number.isInteger(t)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(t>=0&&t<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}n.rawValue||(t=o.fromFloatTo7Bit(t));const r=l.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(e)||(e=[e]),o.buildNoteArray(e).forEach(a=>{this.send([(i.MIDI_CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),a.getOffsetNumber(r),t],{time:o.toTimestamp(n.time)})}),this}sendControlChange(e,t,n={}){if(typeof e=="string"&&(e=i.MIDI_CONTROL_CHANGE_MESSAGES[e]),Array.isArray(t)||(t=[t]),l.validation){if(e===void 0)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if((t=t.map(r=>{const a=Math.min(Math.max(parseInt(r),0),127);if(isNaN(a))throw new TypeError("Values must be integers between 0 and 127");return a})).length===2&&e>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return t.forEach((r,a)=>{this.send([(i.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e+32*a,t[a]],{time:o.toTimestamp(n.time)})}),this}_selectNonRegisteredParameter(e,t={}){return this.sendControlChange(99,e[0],t),this.sendControlChange(98,e[1],t),this}_deselectRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_deselectNonRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_selectRegisteredParameter(e,t={}){return this.sendControlChange(101,e[0],t),this.sendControlChange(100,e[1],t),this}_setCurrentParameter(e,t={}){return e=[].concat(e),this.sendControlChange(6,e[0],t),e.length<2||this.sendControlChange(38,e[1],t),this}sendRpnDecrement(e,t={}){if(Array.isArray(e)||(e=i.MIDI_REGISTERED_PARAMETERS[e]),l.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(i.MIDI_REGISTERED_PARAMETERS).forEach(r=>{i.MIDI_REGISTERED_PARAMETERS[r][0]===e[0]&&i.MIDI_REGISTERED_PARAMETERS[r][1]===e[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(97,0,t),this._deselectRegisteredParameter(t),this}sendRpnIncrement(e,t={}){if(Array.isArray(e)||(e=i.MIDI_REGISTERED_PARAMETERS[e]),l.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(i.MIDI_REGISTERED_PARAMETERS).forEach(r=>{i.MIDI_REGISTERED_PARAMETERS[r][0]===e[0]&&i.MIDI_REGISTERED_PARAMETERS[r][1]===e[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(96,0,t),this._deselectRegisteredParameter(t),this}playNote(e,t={}){if(this.sendNoteOn(e,t),t.duration>0&&isFinite(String(t.duration).trim()||NaN)){let n={time:(o.toTimestamp(t.time)||l.time)+t.duration,release:t.release,rawRelease:t.rawRelease};this.sendNoteOff(e,n)}return this}sendNoteOff(e,t={}){if(l.validation){if(t.rawRelease!=null&&!(t.rawRelease>=0&&t.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(t.release!=null&&!(t.release>=0&&t.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");t.rawVelocity&&(t.rawRelease=t.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),t.velocity&&(t.release=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;t.rawRelease!=null?n=t.rawRelease:isNaN(t.release)||(n=Math.round(127*t.release));const r=l.octaveOffset+this.output.octaveOffset+this.octaveOffset;return o.buildNoteArray(e,{rawRelease:parseInt(n)}).forEach(a=>{this.send([(i.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),a.getOffsetNumber(r),a.rawRelease],{time:o.toTimestamp(t.time)})}),this}stopNote(e,t={}){return this.sendNoteOff(e,t)}sendNoteOn(e,t={}){if(l.validation){if(t.rawAttack!=null&&!(t.rawAttack>=0&&t.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(t.attack!=null&&!(t.attack>=0&&t.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");t.rawVelocity&&(t.rawAttack=t.velocity,t.rawRelease=t.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),t.velocity&&(t.attack=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;t.rawAttack!=null?n=t.rawAttack:isNaN(t.attack)||(n=Math.round(127*t.attack));const r=l.octaveOffset+this.output.octaveOffset+this.octaveOffset;return o.buildNoteArray(e,{rawAttack:n}).forEach(a=>{this.send([(i.MIDI_CHANNEL_MESSAGES.noteon<<4)+(this.number-1),a.getOffsetNumber(r),a.rawAttack],{time:o.toTimestamp(t.time)})}),this}sendChannelMode(e,t=0,n={}){if(typeof e=="string"&&(e=i.MIDI_CHANNEL_MODE_MESSAGES[e]),l.validation){if(e===void 0)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(e)||!(e>=120&&e<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(t))||t<0||t>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(i.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e,t],{time:o.toTimestamp(n.time)}),this}sendOmniMode(e,t={}){return e===void 0||e?this.sendChannelMode("omnimodeon",0,t):this.sendChannelMode("omnimodeoff",0,t),this}sendChannelAftertouch(e,t={}){if(l.validation){if(isNaN(parseFloat(e)))throw new RangeError("Invalid channel aftertouch value.");if(t.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return this.send([(i.MIDI_CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(127*e)],{time:o.toTimestamp(t.time)}),this}sendMasterTuning(e,t={}){if(e=parseFloat(e)||0,l.validation&&!(e>-65&&e<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let n=Math.floor(e)+64,r=e-Math.floor(e);r=Math.round((r+1)/2*16383);let a=r>>7&127,c=127&r;return this.sendRpnValue("channelcoarsetuning",n,t),this.sendRpnValue("channelfinetuning",[a,c],t),this}sendModulationRange(e,t,n={}){if(l.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!(t==null||Number.isInteger(t)&&t>=0&&t<=127))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return t>=0&&t<=127||(t=0),this.sendRpnValue("modulationrange",[e,t],n),this}sendNrpnValue(e,t,n={}){if(t=[].concat(t),l.validation){if(!Array.isArray(e)||!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");t.forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")})}return this._selectNonRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectNonRegisteredParameter(n),this}sendPitchBend(e,t={}){if(l.validation)if(t.rawValue&&Array.isArray(e)){if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(t.rawValue&&!Array.isArray(e)){if(!(e>=0&&e<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(e)||e===null)throw new RangeError("Invalid pitch bend value.");if(!(e>=-1&&e<=1))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}let n=0,r=0;if(t.rawValue&&Array.isArray(e))n=e[0],r=e[1];else if(t.rawValue&&!Array.isArray(e))n=e;else{const a=o.fromFloatToMsbLsb((e+1)/2);n=a.msb,r=a.lsb}return this.send([(i.MIDI_CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),r,n],{time:o.toTimestamp(t.time)}),this}sendPitchBendRange(e,t,n={}){if(l.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[e,t],n),this}sendProgramChange(e,t={}){if(e=parseInt(e)||0,l.validation&&!(e>=0&&e<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(i.MIDI_CHANNEL_MESSAGES.programchange<<4)+(this.number-1),e],{time:o.toTimestamp(t.time)}),this}sendRpnValue(e,t,n={}){if(Array.isArray(e)||(e=i.MIDI_REGISTERED_PARAMETERS[e]),l.validation){if(!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(t).forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")})}return this._selectRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectRegisteredParameter(n),this}sendTuningBank(e,t={}){if(l.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",e,t),this}sendTuningProgram(e,t={}){if(l.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",e,t),this}sendLocalControl(e,t={}){return e?this.sendChannelMode("localcontrol",127,t):this.sendChannelMode("localcontrol",0,t)}sendAllNotesOff(e={}){return this.sendChannelMode("allnotesoff",0,e)}sendAllSoundOff(e={}){return this.sendChannelMode("allsoundoff",0,e)}sendResetAllControllers(e={}){return this.sendChannelMode("resetallcontrollers",0,e)}sendPolyphonicMode(e,t={}){return e==="mono"?this.sendChannelMode("monomodeon",0,t):this.sendChannelMode("polymodeon",0,t)}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get output(){return this._output}get number(){return this._number}}/**
 * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
 * A port is made available by a MIDI device. A MIDI device can advertise several input and output
 * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
 * property.
 *
 * The `Output` object is automatically instantiated by the library according to the host's MIDI
 * subsystem and should not be directly instantiated.
 *
 * You can access all available `Output` objects by referring to the
 * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
 * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
 * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
 *
 * @fires Output#opened
 * @fires Output#disconnected
 * @fires Output#closed
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class pe extends O{constructor(e){super(),this._midiOutput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new Bt(this,t);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._midiOutput.onstatechange=null,await this.close(),this._midiOutput=null}_onStateChange(e){let t={timestamp:l.time};e.port.connection==="open"?(t.type="opened",t.target=this,t.port=t.target,this.emit("opened",t)):e.port.connection==="closed"&&e.port.state==="connected"?(t.type="closed",t.target=this,t.port=t.target,this.emit("closed",t)):e.port.connection==="closed"&&e.port.state==="disconnected"?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught:",e.port.connection,e.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(e){return Promise.reject(e)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}send(e,t={time:0},n=0){if(e instanceof qe&&(e=o.isNode?e.data:e.rawData),e instanceof Uint8Array&&o.isNode&&(e=Array.from(e)),l.validation){if(Array.isArray(e)||e instanceof Uint8Array||(e=[e],Array.isArray(t)&&(e=e.concat(t)),t=isNaN(n)?{time:0}:{time:n}),!(parseInt(e[0])>=128&&parseInt(e[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");e.slice(1).forEach(r=>{if(!((r=parseInt(r))>=0&&r<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")}),t||(t={time:0})}return this._midiOutput.send(e,o.toTimestamp(t.time)),this}sendSysex(e,t=[],n={}){if(e=[].concat(e),t instanceof Uint8Array){const r=new Uint8Array(1+e.length+t.length+1);r[0]=i.MIDI_SYSTEM_MESSAGES.sysex,r.set(Uint8Array.from(e),1),r.set(t,1+e.length),r[r.length-1]=i.MIDI_SYSTEM_MESSAGES.sysexend,this.send(r,{time:n.time})}else{const r=e.concat(t,i.MIDI_SYSTEM_MESSAGES.sysexend);this.send([i.MIDI_SYSTEM_MESSAGES.sysex].concat(r),{time:n.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():l.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(e,t={}){if(l.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([i.MIDI_SYSTEM_MESSAGES.timecode,e],{time:t.time}),this}sendSongPosition(e=0,t={}){var n=(e=Math.floor(e)||0)>>7&127,r=127&e;return this.send([i.MIDI_SYSTEM_MESSAGES.songposition,n,r],{time:t.time}),this}sendSongSelect(e=0,t={}){if(l.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([i.MIDI_SYSTEM_MESSAGES.songselect,e],{time:t.time}),this}sendTuneRequest(e={}){return this.send([i.MIDI_SYSTEM_MESSAGES.tunerequest],{time:e.time}),this}sendClock(e={}){return this.send([i.MIDI_SYSTEM_MESSAGES.clock],{time:e.time}),this}sendStart(e={}){return this.send([i.MIDI_SYSTEM_MESSAGES.start],{time:e.time}),this}sendContinue(e={}){return this.send([i.MIDI_SYSTEM_MESSAGES.continue],{time:e.time}),this}sendStop(e={}){return this.send([i.MIDI_SYSTEM_MESSAGES.stop],{time:e.time}),this}sendActiveSensing(e={}){return this.send([i.MIDI_SYSTEM_MESSAGES.activesensing],{time:e.time}),this}sendReset(e={}){return this.send([i.MIDI_SYSTEM_MESSAGES.reset],{time:e.time}),this}sendTuningRequest(e={}){return l.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(e)}sendKeyAftertouch(e,t,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendKeyAftertouch(e,t,n)}),this}sendControlChange(e,t,n={},r={}){if(l.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const a=n;(n=r).channels=a,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(a=>{this.channels[a].sendControlChange(e,t,n)}),this}sendPitchBendRange(e=0,t=0,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendPitchBendRange(e,t,n)}),this}setPitchBendRange(e=0,t=0,n="all",r={}){return l.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(e,t,r)}sendRpnValue(e,t,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendRpnValue(e,t,n)}),this}setRegisteredParameter(e,t=[],n="all",r={}){return l.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(e,t,r)}sendChannelAftertouch(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;(t=n).channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendChannelAftertouch(e,t)}),this}sendPitchBend(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;(t=n).channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendPitchBend(e,t)}),this}sendProgramChange(e=0,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;(t=n).channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendProgramChange(e,t)}),this}sendModulationRange(e,t,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendModulationRange(e,t,n)}),this}setModulationRange(e=0,t=0,n="all",r={}){return l.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(e,t,r)}sendMasterTuning(e,t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendMasterTuning(e,t)}),this}setMasterTuning(e,t={},n={}){return l.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),n.channels=t,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(e,n)}sendTuningProgram(e,t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendTuningProgram(e,t)}),this}setTuningProgram(e,t="all",n={}){return l.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),n.channels=t,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(e,n)}sendTuningBank(e=0,t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendTuningBank(e,t)}),this}setTuningBank(e,t="all",n={}){return l.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),n.channels=t,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(e,n)}sendChannelMode(e,t=0,n={},r={}){if(l.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const a=n;(n=r).channels=a,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(a=>{this.channels[a].sendChannelMode(e,t,n)}),this}sendAllSoundOff(e={}){return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].sendAllSoundOff(e)}),this}sendAllNotesOff(e={}){return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].sendAllNotesOff(e)}),this}sendResetAllControllers(e={},t={}){if(l.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const n=e;(e=t).channels=n,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendResetAllControllers(e)}),this}sendPolyphonicMode(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;(t=n).channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendPolyphonicMode(e,t)}),this}sendLocalControl(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;(t=n).channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendLocalControl(e,t)}),this}sendOmniMode(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;(t=n).channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendOmniMode(e,t)}),this}sendNrpnValue(e,t,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendNrpnValue(e,t,n)}),this}setNonRegisteredParameter(e,t=[],n="all",r={}){return l.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(e,t,r)}sendRpnIncrement(e,t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendRpnIncrement(e,t)}),this}incrementRegisteredParameter(e,t="all",n={}){return l.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),n.channels=t,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(e,n)}sendRpnDecrement(e,t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendRpnDecrement(e,t)}),this}decrementRegisteredParameter(e,t="all",n={}){return l.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),n.channels=t,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(e,n)}sendNoteOff(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;(t=n).channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendNoteOff(e,t)}),this}stopNote(e,t){return this.sendNoteOff(e,t)}playNote(e,t={},n={}){if(l.validation&&(t.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),t.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;(t=n).channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].playNote(e,t)}),this}sendNoteOn(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;(t=n).channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendNoteOn(e,t)}),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}}/**
 * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
 * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
 * to all the outputs listed in its [`destinations`](#destinations) property.
 *
 * If specific channels or message types have been defined in the [`channels`](#channels) or
 * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
 *
 * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
 * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class He{constructor(e=[],t={}){this.destinations=[],this.types=[...Object.keys(i.MIDI_SYSTEM_MESSAGES),...Object.keys(i.MIDI_CHANNEL_MESSAGES)],this.channels=i.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(e)||(e=[e]),t.types&&!Array.isArray(t.types)&&(t.types=[t.types]),t.channels&&!Array.isArray(t.channels)&&(t.channels=[t.channels]),l.validation&&(e.forEach(n=>{if(!(n instanceof pe))throw new TypeError("Destinations must be of type 'Output'.")}),t.types!==void 0&&t.types.forEach(n=>{if(!i.MIDI_SYSTEM_MESSAGES.hasOwnProperty(n)&&!i.MIDI_CHANNEL_MESSAGES.hasOwnProperty(n))throw new TypeError("Type must be a valid message type.")}),t.channels!==void 0&&t.channels.forEach(n=>{if(!i.MIDI_CHANNEL_NUMBERS.includes(n))throw new TypeError("MIDI channel must be between 1 and 16.")})),this.destinations=e,t.types&&(this.types=t.types),t.channels&&(this.channels=t.channels)}forward(e){this.suspended||this.types.includes(e.type)&&(e.channel&&!this.channels.includes(e.channel)||this.destinations.forEach(t=>{(!l.validation||t instanceof pe)&&t.send(e)}))}}/**
 * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
 * device. This object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
 * property.
 *
 * @fires InputChannel#midimessage
 * @fires InputChannel#unknownmessage
 *
 * @fires InputChannel#noteoff
 * @fires InputChannel#noteon
 * @fires InputChannel#keyaftertouch
 * @fires InputChannel#programchange
 * @fires InputChannel#event:controlchange-controllerxxx
 * @fires InputChannel#channelaftertouch
 * @fires InputChannel#pitchbend
 * @fires InputChannel#controlchange
 *
 * @fires InputChannel#allnotesoff
 * @fires InputChannel#allsoundoff
 * @fires InputChannel#localcontrol
 * @fires InputChannel#monomode
 * @fires InputChannel#omnimode
 * @fires InputChannel#resetallcontrollers
 *
 * @fires InputChannel#event:nrpn
 * @fires InputChannel#event:nrpn-dataentrycoarse
 * @fires InputChannel#event:nrpn-dataentryfine
 * @fires InputChannel#event:nrpn-databuttonincrement
 * @fires InputChannel#event:nrpn-databuttondecrement
 * @fires InputChannel#event:rpn
 * @fires InputChannel#event:rpn-dataentrycoarse
 * @fires InputChannel#event:rpn-dataentryfine
 * @fires InputChannel#event:rpn-databuttonincrement
 * @fires InputChannel#event:rpn-databuttondecrement
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class Lt extends O{constructor(e,t){super(),this._input=e,this._number=t,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const t=Object.assign({},e);t.port=this.input,t.target=this,t.type="midimessage",this.emit(t.type,t),this._parseEventForStandardMessages(t)}_parseEventForStandardMessages(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmessage";const n=e.message.dataBytes[0],r=e.message.dataBytes[1];if(t.type==="noteoff"||t.type==="noteon"&&r===0)this.notesState[n]=!1,t.type="noteoff",t.note=new z(o.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+l.octaveOffset),{rawAttack:0,rawRelease:r}),t.value=o.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.release,t.rawVelocity=t.note.rawRelease;else if(t.type==="noteon")this.notesState[n]=!0,t.note=new z(o.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+l.octaveOffset),{rawAttack:r}),t.value=o.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.attack,t.rawVelocity=t.note.rawAttack;else if(t.type==="keyaftertouch")t.note=new z(o.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+l.octaveOffset)),t.value=o.from7bitToFloat(r),t.rawValue=r,t.identifier=t.note.identifier,t.key=t.note.number,t.rawKey=n;else if(t.type==="controlchange"){t.controller={number:n,name:o.getCcNameByNumber(n)},t.subtype=t.controller.name||"controller"+n,t.value=o.from7bitToFloat(r),t.rawValue=r;const a=Object.assign({},t);a.type=`${t.type}-controller${n}`,delete a.subtype,this.emit(a.type,a),t.message.dataBytes[0]>=120&&this._parseChannelModeMessage(t),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(t.message.dataBytes[0])&&this._parseEventForParameterNumber(t)}else t.type==="programchange"?(t.value=n,t.rawValue=t.value):t.type==="channelaftertouch"?(t.value=o.from7bitToFloat(n),t.rawValue=n):t.type==="pitchbend"?(t.value=((r<<7)+n-8192)/8192,t.rawValue=(r<<7)+n):t.type="unknownmessage";this.emit(t.type,t)}_parseChannelModeMessage(e){const t=Object.assign({},e);t.type=t.controller.name,t.type==="localcontrol"&&(t.value=t.message.data[2]===127,t.rawValue=t.message.data[2]),t.type==="omnimodeon"?(t.type="omnimode",t.value=!0,t.rawValue=t.message.data[2]):t.type==="omnimodeoff"&&(t.type="omnimode",t.value=!1,t.rawValue=t.message.data[2]),t.type==="monomodeon"?(t.type="monomode",t.value=!0,t.rawValue=t.message.data[2]):t.type==="polymodeon"&&(t.type="monomode",t.value=!1,t.rawValue=t.message.data[2]),this.emit(t.type,t)}_parseEventForParameterNumber(e){const t=e.message.dataBytes[0],n=e.message.dataBytes[1],r=i.MIDI_CONTROL_CHANGE_MESSAGES;t===r.nonregisteredparameterfine||t===r.registeredparameterfine?(this._nrpnBuffer=[],this._rpnBuffer=[],t===r.nonregisteredparameterfine?this._nrpnBuffer=[e.message]:n!==127&&(this._rpnBuffer=[e.message])):t===r.nonregisteredparametercoarse||t===r.registeredparametercoarse?t===r.nonregisteredparametercoarse?(this._rpnBuffer=[],this._nrpnBuffer.length===1?this._nrpnBuffer.push(e.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],this._rpnBuffer.length===1&&n!==127?this._rpnBuffer.push(e.message):this._rpnBuffer=[]):t!==r.dataentrycoarse&&t!==r.dataentryfine&&t!==r.databuttonincrement&&t!==r.databuttondecrement||(this._rpnBuffer.length===2?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],e):this._nrpnBuffer.length===2?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],e):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(e){return e===i.MIDI_CONTROL_CHANGE_MESSAGES.dataentrycoarse||e===i.MIDI_CONTROL_CHANGE_MESSAGES.dataentryfine||e===i.MIDI_CONTROL_CHANGE_MESSAGES.databuttonincrement||e===i.MIDI_CONTROL_CHANGE_MESSAGES.databuttondecrement||e===i.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparametercoarse||e===i.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparameterfine||e===i.MIDI_CONTROL_CHANGE_MESSAGES.registeredparametercoarse||e===i.MIDI_CONTROL_CHANGE_MESSAGES.registeredparameterfine}_dispatchParameterNumberEvent(e,t,n,r){e=e==="nrpn"?"nrpn":"rpn";const a={target:r.target,timestamp:r.timestamp,message:r.message,parameterMsb:t,parameterLsb:n,value:o.from7bitToFloat(r.message.dataBytes[1]),rawValue:r.message.dataBytes[1]};a.parameter=e==="rpn"?Object.keys(i.MIDI_REGISTERED_PARAMETERS).find(p=>i.MIDI_REGISTERED_PARAMETERS[p][0]===t&&i.MIDI_REGISTERED_PARAMETERS[p][1]===n):(t<<7)+n;const c=o.getPropertyByValue(i.MIDI_CONTROL_CHANGE_MESSAGES,r.message.dataBytes[0]);a.type=`${e}-${c}`,this.emit(a.type,a),a.type=e,a.subtype=c,this.emit(a.type,a)}getChannelModeByNumber(e){return l.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),e=Math.floor(e)),o.getChannelModeByNumber(e)}getCcNameByNumber(e){if(l.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),!((e=parseInt(e))>=0&&e<=127)))throw new RangeError("Invalid control change number.");return o.getCcNameByNumber(e)}getNoteState(e){e instanceof z&&(e=e.identifier);const t=o.guessNoteNumber(e,l.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[t]}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(e){this.validation&&(e=!!e),this.parameterNumberEventsEnabled=e}}/**
 * The `Message` class represents a single MIDI message. It has several properties that make it
 * easy to make sense of the binary data it contains.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class qe{constructor(e){this.rawData=e,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=1+(15&this.statusByte)):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=o.getPropertyByValue(i.MIDI_CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=o.getPropertyByValue(i.MIDI_SYSTEM_MESSAGES,this.command)),this.statusByte===i.MIDI_SYSTEM_MESSAGES.sysex&&(this.dataBytes[0]===0?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}/**
 * The `Input` class represents a single MIDI input port. This object is automatically instantiated
 * by the library according to the host's MIDI subsystem and does not need to be directly
 * instantiated. Instead, you can access all `Input` objects by referring to the
 * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
 * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
 * [`WebMidi.getInputById()`](WebMidi#getInputById).
 *
 * Note that a single MIDI device may expose several inputs and/or outputs.
 *
 * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
 * (such as [`noteon`](InputChannel#event:noteon) or
 * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
 * object does that. However, you can still use the
 * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
 * [`InputChannel`](InputChannel) objects at once.
 *
 * @fires Input#opened
 * @fires Input#disconnected
 * @fires Input#closed
 * @fires Input#midimessage
 *
 * @fires Input#sysex
 * @fires Input#timecode
 * @fires Input#songposition
 * @fires Input#songselect
 * @fires Input#tunerequest
 * @fires Input#clock
 * @fires Input#start
 * @fires Input#continue
 * @fires Input#stop
 * @fires Input#activesensing
 * @fires Input#reset
 *
 * @fires Input#unknownmidimessage
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class xt extends O{constructor(e){super(),this._midiInput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new Lt(this,t);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(e){let t={timestamp:l.time,target:this,port:this};e.port.connection==="open"?(t.type="opened",this.emit("opened",t)):e.port.connection==="closed"&&e.port.state==="connected"?(t.type="closed",this.emit("closed",t)):e.port.connection==="closed"&&e.port.state==="disconnected"?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught: ",e.port.connection,e.port.state)}_onMidiMessage(e){const t=new qe(e.data),n={port:this,target:this,message:t,timestamp:e.timeStamp,type:"midimessage",data:t.data,rawData:t.data,statusByte:t.data[0],dataBytes:t.dataBytes};this.emit("midimessage",n),t.isSystemMessage?this._parseEvent(n):t.isChannelMessage&&this.channels[t.channel]._processMidiMessageEvent(n),this._forwarders.forEach(r=>r.forward(t))}_parseEvent(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmidimessage",t.type==="songselect"&&(t.song=e.data[1]+1,t.value=e.data[1],t.rawValue=t.value),this.emit(t.type,t)}async open(){try{await this._midiInput.open()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}getChannelModeByNumber(){l.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(e,t,n={}){if(l.validation&&typeof n=="function"){let r=t!=null?[].concat(t):void 0;t=n,n={channels:r}}if(i.CHANNEL_EVENTS.includes(e)){n.channels===void 0&&(n.channels=i.MIDI_CHANNEL_NUMBERS);let r=[];return o.sanitizeChannels(n.channels).forEach(a=>{r.push(this.channels[a].addListener(e,t,n))}),r}return super.addListener(e,t,n)}addOneTimeListener(e,t,n={}){return n.remaining=1,this.addListener(e,t,n)}on(e,t,n,r){return this.addListener(e,t,n,r)}hasListener(e,t,n={}){if(l.validation&&typeof n=="function"){let r=[].concat(t);t=n,n={channels:r}}return i.CHANNEL_EVENTS.includes(e)?(n.channels===void 0&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).every(r=>this.channels[r].hasListener(e,t))):super.hasListener(e,t)}removeListener(e,t,n={}){if(l.validation&&typeof n=="function"){let r=[].concat(t);t=n,n={channels:r}}if(n.channels===void 0&&(n.channels=i.MIDI_CHANNEL_NUMBERS),e==null)return o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r]&&this.channels[r].removeListener()}),super.removeListener();i.CHANNEL_EVENTS.includes(e)?o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].removeListener(e,t,n)}):super.removeListener(e,t,n)}addForwarder(e,t={}){let n;return n=e instanceof He?e:new He(e,t),this._forwarders.push(n),n}removeForwarder(e){this._forwarders=this._forwarders.filter(t=>t!==e)}hasForwarder(e){return this._forwarders.includes(e)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return l.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}/**
 * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
 * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
 *
 * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
 * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
 * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
 * module) version, you get an already-instantiated object when you import the module.
 *
 * @fires WebMidi#connected
 * @fires WebMidi#disabled
 * @fires WebMidi#disconnected
 * @fires WebMidi#enabled
 * @fires WebMidi#error
 * @fires WebMidi#midiaccessgranted
 * @fires WebMidi#portschanged
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */const l=new class extends O{constructor(){super(),this.defaults={note:{attack:o.from7bitToFloat(64),release:o.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(s={},e=!1){if(o.isNode){try{window.navigator}catch{global.navigator=await Object.getPrototypeOf(async function(){}).constructor(`
        let jzz = await import("jzz");
        return jzz.default;
        `)()}try{}catch{global.performance=await Object.getPrototypeOf(async function(){}).constructor(`
        let perf_hooks = await import("perf_hooks");
        return perf_hooks.performance;
        `)()}}if(this.validation=s.validation!==!1,this.validation&&(typeof s=="function"&&(s={callback:s,sysex:e}),e&&(s.sysex=!0)),this.enabled)return typeof s.callback=="function"&&s.callback(),Promise.resolve();const t={timestamp:this.time,target:this,type:"error",error:void 0},n={timestamp:this.time,target:this,type:"midiaccessgranted"},r={timestamp:this.time,target:this,type:"enabled"};try{typeof s.requestMIDIAccessFunction=="function"?this.interface=await s.requestMIDIAccessFunction({sysex:s.sysex,software:s.software}):this.interface=await navigator.requestMIDIAccess({sysex:s.sysex,software:s.software})}catch(a){return t.error=a,this.emit("error",t),typeof s.callback=="function"&&s.callback(a),Promise.reject(a)}this.emit("midiaccessgranted",n),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(a){return t.error=a,this.emit("error",t),typeof s.callback=="function"&&s.callback(a),Promise.reject(a)}return this.emit("enabled",r),typeof s.callback=="function"&&s.callback(),Promise.resolve(this)}async disable(){return this._destroyInputsAndOutputs().then(()=>{navigator&&typeof navigator.close=="function"&&navigator.close(),this.interface&&(this.interface.onstatechange=void 0),this.interface=null;let s={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",s),this.removeListener()})}getInputById(s,e={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!s)return}if(e.disconnected){for(let t=0;t<this._disconnectedInputs.length;t++)if(this._disconnectedInputs[t].id===s.toString())return this._disconnectedInputs[t]}else for(let t=0;t<this.inputs.length;t++)if(this.inputs[t].id===s.toString())return this.inputs[t]}getInputByName(s,e={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!s)return;s=s.toString()}if(e.disconnected){for(let t=0;t<this._disconnectedInputs.length;t++)if(~this._disconnectedInputs[t].name.indexOf(s))return this._disconnectedInputs[t]}else for(let t=0;t<this.inputs.length;t++)if(~this.inputs[t].name.indexOf(s))return this.inputs[t]}getOutputByName(s,e={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!s)return;s=s.toString()}if(e.disconnected){for(let t=0;t<this._disconnectedOutputs.length;t++)if(~this._disconnectedOutputs[t].name.indexOf(s))return this._disconnectedOutputs[t]}else for(let t=0;t<this.outputs.length;t++)if(~this.outputs[t].name.indexOf(s))return this.outputs[t]}getOutputById(s,e={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!s)return}if(e.disconnected){for(let t=0;t<this._disconnectedOutputs.length;t++)if(this._disconnectedOutputs[t].id===s.toString())return this._disconnectedOutputs[t]}else for(let t=0;t<this.outputs.length;t++)if(this.outputs[t].id===s.toString())return this.outputs[t]}noteNameToNumber(s){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),o.toNoteNumber(s,this.octaveOffset)}getOctave(s){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),s=parseInt(s)),!isNaN(s)&&s>=0&&s<=127&&o.getNoteDetails(o.offsetNumber(s,this.octaveOffset)).octave}sanitizeChannels(s){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),o.sanitizeChannels(s)}toMIDIChannels(s){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),o.sanitizeChannels(s)}guessNoteNumber(s){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),o.guessNoteNumber(s,this.octaveOffset)}getValidNoteArray(s,e={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),o.buildNoteArray(s,e)}convertToTimestamp(s){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),o.toTimestamp(s)}async _destroyInputsAndOutputs(){let s=[];return this.inputs.forEach(e=>s.push(e.destroy())),this.outputs.forEach(e=>s.push(e.destroy())),Promise.all(s).then(()=>{this._inputs=[],this._outputs=[]})}_onInterfaceStateChange(s){this._updateInputsAndOutputs();let e={timestamp:s.timeStamp,type:s.port.state,target:this};if(s.port.state==="connected"&&s.port.connection==="open"){s.port.type==="output"?e.port=this.getOutputById(s.port.id):s.port.type==="input"&&(e.port=this.getInputById(s.port.id)),this.emit(s.port.state,e);const t=Object.assign({},e);t.type="portschanged",this.emit(t.type,t)}else if(s.port.state==="disconnected"&&s.port.connection==="pending"){s.port.type==="input"?e.port=this.getInputById(s.port.id,{disconnected:!0}):s.port.type==="output"&&(e.port=this.getOutputById(s.port.id,{disconnected:!0})),this.emit(s.port.state,e);const t=Object.assign({},e);t.type="portschanged",this.emit(t.type,t)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let e=this._inputs.length-1;e>=0;e--){const t=this._inputs[e];Array.from(this.interface.inputs.values()).find(n=>n===t._midiInput)||(this._disconnectedInputs.push(t),this._inputs.splice(e,1))}let s=[];return this.interface.inputs.forEach(e=>{if(!this._inputs.find(t=>t._midiInput===e)){let t=this._disconnectedInputs.find(n=>n._midiInput===e);t||(t=new xt(e)),this._inputs.push(t),s.push(t.open())}}),Promise.all(s)}async _updateOutputs(){if(!this.interface)return;for(let e=this._outputs.length-1;e>=0;e--){const t=this._outputs[e];Array.from(this.interface.outputs.values()).find(n=>n===t._midiOutput)||(this._disconnectedOutputs.push(t),this._outputs.splice(e,1))}let s=[];return this.interface.outputs.forEach(e=>{if(!this._outputs.find(t=>t._midiOutput===e)){let t=this._disconnectedOutputs.find(n=>n._midiOutput===e);t||(t=new pe(e)),this._outputs.push(t),s.push(t.open())}}),Promise.all(s)}get enabled(){return this.interface!==null}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),o.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),o.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(s){if(this.validation&&(s=parseInt(s),isNaN(s)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=s}get outputs(){return this._outputs}get supported(){return typeof navigator<"u"&&navigator.requestMIDIAccess}get sysexEnabled(){return!(!this.interface||!this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.0.21"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),i.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.MIDI_SYSTEM_MESSAGES."),i.MIDI_SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.MIDI_CHANNEL_MODE_MESSAGES."),i.MIDI_CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been moved to Enumerations.MIDI_CONTROL_CHANGE_MESSAGES."),i.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.MIDI_REGISTERED_PARAMETERS."),this.MIDI_REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}};l.constructor=null;async function Pt(){return await l.enable()}async function kt(){try{await Pt()}catch(e){return console.log(e),()=>()=>{}}console.log(l);const s=new ue;for(const e of l.inputs)e.addListener("controlchange",t=>{s.emit({id:`${e.id}.${t.type}.${t.controller.number}`,value:ce(t.value)})}),e.addListener("pitchbend",t=>{s.emit({id:`${e.id}.${t.type}`,value:q(-1,1,0,1,ce(t.value))})}),e.addListener("noteon",t=>{s.emit({id:`${e.id}.note.${t.note.number}`,value:ce(t.value)})}),e.addListener("noteoff",t=>{s.emit({id:`${e.id}.note.${t.note.number}`,value:0})});return e=>s.listen(e)}class Ht{constructor(e=32){this.start=0,this.end=0,this.buffer=$(Math.max(e,1),()=>null)}resize(e){const t=this.length;this.buffer=$(e,n=>n<t?this.get(n):null),this.start=0,this.end=t}growForInsertIfNeeded(){this.length>=this.capacity-1&&this.resize(this.capacity*2)}get length(){return this.start<=this.end?this.end-this.start:this.end+this.buffer.length-this.start}get capacity(){return this.buffer.length}get(e){return this.buffer[(this.start+e)%this.capacity]}push(e){this.growForInsertIfNeeded(),this.buffer[this.end]=e,this.end=(this.end+1)%this.capacity}pop(){if(this.end===this.start)return null;this.end===0?this.end=this.capacity-1:this.end=this.end-1;const e=this.buffer[this.end];return this.buffer[this.end]=null,e}unshift(e){this.growForInsertIfNeeded(),this.start===0?this.start=this.capacity-1:this.start=this.start-1,this.buffer[this.start]=e}shift(){if(this.end===this.start)return null;const e=this.buffer[this.start];return this.buffer[this.start]=null,this.start=(this.start+1)%this.capacity,e}first(){return this.get(0)}last(){return this.get(this.length-1)}}class Xe{constructor(e){this.manager=e,this.currentValue=null}debug(e){return e!==null&&this.manager.debug(e,this),this}clear(){this.currentValue=null}read(){return this.currentValue===null&&(this.currentValue=this.update()),this.currentValue}}class Qe extends Xe{constructor(e,t){super(e),this.value=t}update(){return this.value}set(e){this.value=e}}function Ge(s,e){return e?je(e[0],e[1],s):s}class Je extends Qe{constructor(e,t,n,r){super(e,Ge(We(`signalSetting.${t}`,n),r)),this.key=t,this.saveDebounced=gt(200,a=>$e(`signalSetting.${this.key}`,a)),this.range=r||null}set(e){e=Ge(e,this.range),super.set(e),this.saveDebounced(e)}}class Gt extends Xe{constructor(e,t){super(e),this.compute=t}update(){return this.compute()}}class Ut{constructor(){this.debugSignalsByName={},this.debugSignalsChangeEvent=new ue,this.updateEvent=new ue,this.signals=new Set,this.driver=this.controlled(0).debug("internal.driver")}onDebugSignalsChange(e){return this.debugSignalsChangeEvent.listen(e)}onUpdate(e){return this.updateEvent.listen(e)}update(e){this.driver.set(Math.min(e,.03));for(const t of this.signals)t.clear();for(const t of this.signals)t.read();this.updateEvent.emit()}controlled(e){return this.addSignal(new Qe(this,e))}computed(e){return this.addSignal(new Gt(this,e))}input(e,t,n){return this.addSignal(new Je(this,e,t,n)).debug(e)}sin({min:e=0,max:t=1,frequency:n=1,driver:r=this.driver,offset:a=0}={}){const c=this.toSignal(e),p=this.toSignal(t),h=this.toSignal(n),u=this.toSignal(a);let g=0;return this.computed(()=>{const E=h.read();return g+=r.read()*E,q(-1,1,c.read(),p.read(),Math.cos((u.read()+g)*Math.PI*2))})}spring(e){var h,u,g;const t=e.target,n=(h=e.driver)!=null?h:this.driver,r=this.toSignal((u=e.tension)!=null?u:230),a=this.toSignal((g=e.friction)!=null?g:22);let c=t.read(),p=0;return this.computed(()=>{const E=t.read(),m=n.read(),d=r.read(),v=a.read();let f=c,N=p;const w=p,M=d*(E-f)-v*p;f=c+w*m*.5,N=p+M*m*.5;const C=N,D=d*(E-f)-v*N;f=c+C*m*.5,N=p+D*m*.5;const L=N,K=d*(E-f)-v*N;f=c+L*m,N=p+K*m;const Q=N,J=d*(E-f)-v*N,se=1/6*(w+2*(C+L)+Q),ae=1/6*(M+2*(D+K)+J);return c+=se*m,p+=ae*m,c})}add(e,t){const n=this.toSignal(e),r=this.toSignal(t);return this.computed(()=>n.read()+r.read())}subtract(e,t){const n=this.toSignal(e),r=this.toSignal(t);return this.computed(()=>n.read()-r.read())}multiply(e,t){const n=this.toSignal(e),r=this.toSignal(t);return this.computed(()=>n.read()*r.read())}divide(e,t){const n=this.toSignal(e),r=this.toSignal(t);return this.computed(()=>n.read()/r.read())}switch(e,t,n){const r=this.toSignal(e),a=this.toSignal(t),c=this.toSignal(n);return this.computed(()=>r.read()?a.read():c.read())}adsr({target:e,attack:t=0,delay:n=0,sustain:r=1,release:a=0,driver:c=this.driver}){const p=this.toSignal(t),h=this.toSignal(n),u=this.toSignal(r),g=this.toSignal(a);let E;(f=>{f[f.Off=0]="Off",f[f.Attacking=1]="Attacking",f[f.Holding=2]="Holding",f[f.Releasing=3]="Releasing"})(E||(E={}));let m=0,d=0,v=0;return this.computed(()=>{const f=e.read();if(f!==0){if((m===0||m===3)&&(p.read()===0?m=2:m=1),m===1&&(d+=f/p.read()*c.read(),d>=f&&(m=2)),m===2){const w=f*u.read();h.read()===0?d=w:d=je(w,f,d+(w-f)/h.read()*c.read())}}else(m===1||m===2)&&(d===0?m=0:(v=d,m=3)),m===3&&(d-=v/g.read()*c.read(),d<=0&&(d=0,m=0)),m===0&&(d=0);return d})}easeExponential({target:e,rate:t=.1}){const n=this.toSignal(t);let r=e.read();return this.computed(()=>(r+=(e.read()-r)*n.read(),r))}lerp(e,t,n){const r=this.toSignal(e),a=this.toSignal(t),c=this.toSignal(n);return this.computed(()=>Et(r.read(),a.read(),c.read()))}delay({target:e,amount:t=0,driver:n=this.driver}){const r=this.toSignal(t);console.log(r.read());const a=new Ht(r.read()*1.2/(1/60));let c=0,p=e.read();return this.computed(()=>{c+=n.read();const h=r.read();a.push({time:c,value:e.read()});let u=null;for(;(u=a.first())&&u.time+h<=c;)p=u.value,a.shift();return p})}debug(e,t){X(this.signals.has(t),`signal called ${e} does not belong to this signal manager`);const n=vt(this.debugSignalsByName,e)?[...this.debugSignalsByName[e],t]:[t];this.debugSignalsByName={...this.debugSignalsByName,[e]:n},this.debugSignalsChangeEvent.emit()}addSignal(e){return this.signals.add(e),e}toSignal(e){return typeof e=="number"?this.controlled(e):e}}var ve={exports:{}},Ze={},et={exports:{}},tt={};/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Y=_.exports;function Vt(s,e){return s===e&&(s!==0||1/s===1/e)||s!==s&&e!==e}var Ft=typeof Object.is=="function"?Object.is:Vt,zt=Y.useState,Yt=Y.useEffect,Kt=Y.useLayoutEffect,Wt=Y.useDebugValue;function jt(s,e){var t=e(),n=zt({inst:{value:t,getSnapshot:e}}),r=n[0].inst,a=n[1];return Kt(function(){r.value=t,r.getSnapshot=e,de(r)&&a({inst:r})},[s,t,e]),Yt(function(){return de(r)&&a({inst:r}),s(function(){de(r)&&a({inst:r})})},[s]),Wt(t),t}function de(s){var e=s.getSnapshot;s=s.value;try{var t=e();return!Ft(s,t)}catch{return!0}}function $t(s,e){return e()}var qt=typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"?$t:jt;tt.useSyncExternalStore=Y.useSyncExternalStore!==void 0?Y.useSyncExternalStore:qt;(function(s){s.exports=tt})(et);/**
 * @license React
 * use-subscription.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Xt=et.exports;Ze.useSubscription=function(s){return Xt.useSyncExternalStore(s.subscribe,s.getCurrentValue)};(function(s){s.exports=Ze})(ve);function ye(s,e){const[t,n]=_.exports.useState(()=>We(s,e));return[t,a=>{try{const c=a instanceof Function?a(t):a;n(c),$e(s,c)}catch(c){console.log(c)}}]}const Qt={position:"fixed",top:0,left:0,width:"100%",height:"100%",zIndex:"100000",touchAction:"none"};class nt{constructor({down:e,move:t,up:n,debug:r,cursor:a}){this.attachedTo=null,this.onDown=e,this.onMove=t,this.onUp=n;const c=document.createElement("div");c.setAttribute("touch-action","none"),Object.assign(c.style,Qt),r&&(c.style.background="rgba(0, 255, 0, 0.3)"),a&&(c.style.cursor=a),this.cover=c}attach(){const e=document.body;!this.attachedTo&&e&&(this.attachedTo=e,this.attachedTo.appendChild(this.cover),this.attachEvents())}remove(){this.attachedTo&&(this.attachedTo.removeChild(this.cover),this.attachedTo=null,this.removeEvents())}attachEvents(){this.onDown&&window.addEventListener("mousedown",this.onDown,!1),this.onMove&&window.addEventListener("mousemove",this.onMove,!1),this.onUp&&window.addEventListener("mouseup",this.onUp,!1)}removeEvents(){this.onDown&&window.removeEventListener("mousedown",this.onDown),this.onMove&&window.removeEventListener("mousemove",this.onMove),this.onUp&&window.removeEventListener("mouseup",this.onUp)}}function re(s){return ve.exports.useSubscription(_.exports.useMemo(()=>({getCurrentValue:()=>s.read(),subscribe:e=>s.manager.onUpdate(e)}),[s]))}const me=(s,e)=>{const t=s.toString().split(".");if(t.length===1)return t[0];if(t.length===2){if(t[0].length>=e)return t[0];{const n=e-t[0].length;return`${t[0]}.${t[1].slice(0,n)}`}}throw new Error(`unexpected number of value parts: ${t.length}`)},rt=_.exports.memo(function({signal:e,className:t}){const n=re(e);return S("div",{className:ge("text-gray-400",t),children:me(n,5)})}),Jt=_.exports.memo(function({signals:e,width:t}){let[{lines:a,min:c,max:p},h]=_.exports.useState(()=>{const g=e.map(E=>E.read());return{lines:g.map(E=>[E]),min:Math.min(...g),max:Math.max(...g)}});_.exports.useEffect(()=>e[0].manager.onUpdate(()=>{const g=e.map(E=>E.read());h(E=>({lines:E.lines.map((m,d)=>[g[d],...m.slice(0,t-1)]),min:Math.min(E.min,...g),max:Math.max(E.max,...g)}))}),[e,t]);const u=Math.round(t/2);return c===p&&(c=c-.1,p=p+.1),B("svg",{width:t,height:u,children:[S("text",{x:t-8,y:8+8,fill:"#cbd5e0",fontSize:8,textAnchor:"end",children:me(p,5)}),S("text",{x:t-8,y:u-8,fill:"#cbd5e0",fontSize:8,textAnchor:"end",children:me(c,5)}),a.map((g,E)=>{const m=[];for(let d=0;d<g.length;d++){const v=d===0?"M":"L";m.push(`${v} ${t-d} ${q(c,p,u-8,8,g[d]).toFixed(1)}`)}return S("path",{d:m.join(" "),stroke:"#cbd5e0",strokeWidth:1,fill:"none"},E)})]})});function Zt({name:s,signal:e,listenToMidi:t}){const[n,r]=_.exports.useState(!1),[a,c]=ye(`midiControlForSignal.${s}`,null);_.exports.useEffect(()=>t(({id:u,value:g})=>{!e.range||(n?(c(u),r(!1),e.set(q(0,1,e.range[0],e.range[1],g))):u===a&&e.set(q(0,1,e.range[0],e.range[1],g)))}),[t,e,n,a,c]);function p(u){u.stopPropagation(),a===null?r(!n):c(null)}function h(u){u.preventDefault();const g=u.screenY,E=e.read(),m=e.range?Math.abs(e.range[1]-e.range[0])/250:Math.abs(E===0?.1:E*.01),d=f=>{const N=(g-f)*m;e.set(E+N)},v=new nt({move:f=>{d(f.screenY)},up:f=>{d(f.screenY),v.remove()},cursor:"ns-resize"});v.attach()}return B(Ee,{children:[e.range&&S("div",{className:ge("cursor-pointer px-1 py-1",n?"text-gray-100":a!==null?"text-gray-300":"text-gray-500 hover:text-gray-300"),onClick:p,children:n?"\u25CE":a!==null?"\u25C9":"\u25CB"}),B("div",{className:"cursor-move py-1 pr-2 pl-1",style:{cursor:"ns-resize"},onMouseDown:h,children:["\u2195",S(rt,{signal:e,className:"inline-block pl-1"})]})]})}const st=_.exports.memo(function({signals:e,name:t,displayName:n=t,width:r,listenToMidi:a}){const[c,p]=ye(`signal.${t}`,!1),h=e.filter(u=>u instanceof Je);return B("div",{className:"border-t border-gray-700 text-xs",children:[B("div",{className:"flex cursor-pointer hover:bg-gray-800",onClick:()=>p(!c),children:[S("div",{className:"flex-auto whitespace-pre px-2 py-1",children:n}),h.length?S(Zt,{name:t,signal:h[0],listenToMidi:a}):S(rt,{signal:e[0],className:"px-2 py-1"})]}),c&&S(Jt,{signals:e,width:r})]})});function en({groupName:s,signalNamePairs:e,width:t,listenToMidi:n}){const[r,a]=ye(`group.${s}`,!1);return B("div",{className:"border-t border-gray-700 text-xs",children:[B("div",{className:"flex cursor-pointer px-2 py-1 hover:bg-gray-800",onClick:()=>a(!r),children:[S("div",{className:"flex-auto",children:s}),S("div",{className:"text-gray-600",children:r?"\u25BD":"\u25B7"})]}),r&&S(Ee,{children:e.map(([c,p])=>S(st,{name:c,displayName:`  ${c.slice(s.length+1)}`,signals:p,width:t,listenToMidi:n},c))})]})}const tn=_.exports.memo(function({signalManager:e,width:t,listenToMidi:n}){const r=ve.exports.useSubscription(_.exports.useMemo(()=>({getCurrentValue:()=>e.debugSignalsByName,subscribe:u=>e.onDebugSignalsChange(u)}),[e])),a=yt(Object.entries(r).filter(([u])=>!u.startsWith("_")),u=>u[0]),[c,p]=Nt(a,([u])=>u.includes(".")),h=_t(c,([u])=>{const g=u.indexOf(".");return X(g!==-1),u.slice(0,g)});return B("div",{className:"absolute right-0 top-0 bottom-0 h-full overflow-auto border-l border-gray-600 text-sm",style:{width:t},children:[S("div",{className:"py-1 px-2",children:"signals"}),Array.from(h).map(([u,g])=>S(en,{groupName:u,signalNamePairs:g,width:t-1,listenToMidi:n},u)),p.map(([u,g])=>S(st,{name:u,signals:g,width:t-1,listenToMidi:n},u))]})}),Ue=300;function nn({debuggerEnabled:s,signalManager:e,listenToMidi:t,scene:n}){const[r,a]=_.exports.useState(null),c=_.exports.useRef(null),p=_.exports.useRef(null),[h,u]=_.exports.useState({width:100,height:100,devicePixelRatio:1});return _.exports.useEffect(()=>{let g=!1;X(p.current&&c.current);const E=p.current,m=c.current;u({width:E.clientWidth,height:E.clientHeight,devicePixelRatio:window.devicePixelRatio});const d={width:e.controlled(E.clientWidth).debug("canvas.width"),height:e.controlled(E.clientHeight).debug("canvas.height"),devicePixelRatio:e.controlled(window.devicePixelRatio).debug("canvas.devicePixelRatio"),mouseX:e.controlled(0).debug("canvas.mouseX"),mouseY:e.controlled(0).debug("canvas.mouseY"),mouseDown:e.controlled(0).debug("canvas.mouseDown")},v=new At(()=>{const M=E.clientWidth,C=E.clientHeight,D=window.devicePixelRatio;d.width.set(M),d.height.set(C),d.devicePixelRatio.set(D),u(L=>L.width!==M||L.height!==C||L.devicePixelRatio!==D?{width:M,height:C,devicePixelRatio:D}:L)});v.observe(E),window.addEventListener("mousemove",M=>{d.mouseX.set(M.clientX),d.mouseY.set(M.clientY)}),m.addEventListener("mousedown",()=>{d.mouseDown.set(1);const M=new nt({up:()=>{d.mouseDown.set(0),M.remove()}});M.attach()});const f=Date.now(),N=n(e,E,d);console.log("get frame loop",Date.now()-f,e.debugSignalsByName.size);let w=0;return St((M,C)=>{if(g)C();else{const D=M-w;w=M,e.update(D/1e3),N.update&&N.update(),N.draw()}}),a(N.children),()=>{g=!0,v.disconnect()}},[n,e]),B("div",{style:{position:"absolute",top:0,left:0,bottom:0,right:0},children:[B("div",{ref:c,style:{position:"absolute",top:0,left:0,bottom:0,right:s?Ue:0},children:[S("canvas",{ref:p,style:{position:"absolute",top:0,left:0,width:"100%",height:"100%",zIndex:10,pointerEvents:"none"},width:h.width*h.devicePixelRatio,height:h.height*h.devicePixelRatio}),r]}),s&&S(tn,{signalManager:e,listenToMidi:t,width:Ue})]})}const rn=_.exports.memo(nn);async function sn(s,e){const t=await kt(),n=new Ut,r=document.getElementById("root");X(r),It.exports.render(S(rn,{debuggerEnabled:e,signalManager:n,listenToMidi:t,scene:s}),r)}const fe=1300,Ve=1300,an=33,on=72,ln=!0,F=46,j=F-12,at=fe/2,Fe={KeyA:33,KeyS:34,KeyD:35,KeyF:36,KeyG:37,KeyH:38,KeyJ:39,KeyK:40,KeyL:41,Semicolon:42,Quote:43,Backslash:44,KeyQ:45,KeyW:46,KeyE:47,KeyR:48,KeyT:49,KeyY:50,KeyU:51,KeyI:52,KeyO:53,KeyP:54,BracketLeft:55,BracketRight:56,Digit1:57,Digit2:58,Digit3:59,Digit4:60,Digit5:61,Digit6:62,Digit7:63,Digit8:64,Digit9:65,Digit0:66,Minus:67,Equal:68};function ze(s,e,t){return(s-e)/t}function Ye(s,e,t){return s*t+e}function cn(s,e,{mouseX:t,mouseY:n,mouseDown:r,width:a,height:c,devicePixelRatio:p}){const h=e.getContext("2d");X(h);const u=new Mt(h),g=s.computed(()=>Math.min(a.read()/fe,c.read()/Ve)),E=s.computed(()=>(a.read()-g.read()*fe)/2),m=s.computed(()=>(c.read()-g.read()*Ve)/2),d=8,v=30,f=s.input("spring.activeFriction",35,[1,40]),N=s.input("spring.activeTension",1e3,[1,1e3]),w=s.input("spring.idleFriction",25,[1,40]),M=s.input("spring.idleTension",180,[1,1e3]),C=at,D=250,L=s.controlled(C),K=s.controlled(D),Q=s.spring({target:L}),J=s.spring({target:K}),se=Q,ae=s.subtract(J,70),b=$(d,I=>{const y=s.controlled(0),T=s.controlled(0),A=s.controlled(0),H=s.computed(()=>Q.read()+(I-(d-1)/2)*65),W=s.computed(()=>J.read()+Math.sin(I/(d-1)*Math.PI)*120);let ee=H,te=W,Se=s.controlled(Math.PI/2-(I-d/2)/(d*.9));const be=s.subtract(T,H),we=s.subtract(A,W),Ie=s.computed(()=>Math.atan2(we.read(),be.read())),lt=s.sin({min:V(-1,.75),max:V(1,.75),frequency:V(.5,.4),offset:Math.random()}),Me=V(2,1.5)*Math.sign(V(0,1)),ct=s.sin({min:Me-2,max:Me+2,frequency:V(.5,.4),offset:Math.random()});return{points:$(v,R=>{const Ae=v-(R+1),Te=s.adsr({target:y,attack:.05*Ae,release:2}),Re=s.adsr({target:y,attack:.05*Ae}),Ce=s.lerp(w,f,Te),De=s.lerp(M,N,Te),ht=s.sin({min:-.3,max:.3,frequency:.2*1.1**(R/2),offset:Math.random()}),oe=s.add(ht,Se),Oe=24*.95**(R/2),dt=s.add(ee,s.computed(()=>Math.cos(oe.read())*Oe)),ut=s.add(te,s.computed(()=>Math.sin(oe.read())*Oe)),le=(R+1)/v,Be=Math.sin(le*Math.PI)*20,Le=s.sin({min:-Be,max:Be,offset:s.computed(()=>R/v*ct.read()),frequency:lt}),pt=s.computed(()=>H.read()+be.read()*le+Math.sin(-Ie.read())*Le.read()),mt=s.computed(()=>W.read()+we.read()*le+Math.cos(Ie.read())*Le.read()),P=s.spring({target:s.lerp(dt,pt,Re),friction:Ce,tension:De}).debug(R===v-1?"tentacle.endX":null),k=s.spring({target:s.lerp(ut,mt,Re),friction:Ce,tension:De}),G=s.subtract(P,ee),U=s.subtract(k,te),x=s.computed(()=>Math.sqrt(G.read()*G.read()+U.read()*U.read())),ft={start:[ee,te],end:[P,k],leftInner:[s.computed(()=>P.read()-U.read()/x.read()*(j/2-R+1)),s.computed(()=>k.read()+G.read()/x.read()*(j/2-R+1))],rightInner:[s.computed(()=>P.read()+U.read()/x.read()*(j/2-R+1)),s.computed(()=>k.read()-G.read()/x.read()*(j/2-R+1))],leftOuter:[s.computed(()=>P.read()-U.read()/x.read()*(F/2-R+1)),s.computed(()=>k.read()+G.read()/x.read()*(F/2-R+1))],rightOuter:[s.computed(()=>P.read()+U.read()/x.read()*(F/2-R+1)),s.computed(()=>k.read()-G.read()/x.read()*(F/2-R+1))]};return ee=P,te=k,Se=oe,ft}),isActive:y,activeTargetX:T,activeTargetY:A}}),Z=new Map,it=(I,y,T)=>{var H;const A=(H=xe(b.filter(W=>!Z.has(W))))!=null?H:xe(b);Z.set(A,I),A.isActive.set(1),A.activeTargetX.set(y),A.activeTargetY.set(T)},ot=I=>{for(const[y,T]of Z.entries())T===I&&(Z.delete(y),y.isActive.set(0))},Ne=s.computed(()=>{let I=0;for(let y=0;y<d;y++)I+=b[y].points[v-1].end[0].read();return I/d}),_e=s.computed(()=>{let I=0;for(let y=0;y<d;y++)I+=b[y].points[v-1].end[1].read();return I/d}),ie=bt(b);return{update:()=>{const I=new he(Ne.read()-C,_e.read()-400-D),y=I.withMagnitude(I.magnitude**.9);L.set(C+y.x),K.set(D+y.y)},draw:()=>{const I=new he(se.read(),ae.read());h.resetTransform(),h.scale(p.read(),p.read()),h.fillStyle="#7F95D1",h.clearRect(0,0,a.read(),c.read()),h.translate(E.read(),m.read()),h.scale(g.read(),g.read()),u.ellipse(I,250,200,{stroke:"#FF709D",strokeWidth:12}),h.lineCap="round",h.lineJoin="round",h.beginPath(),h.moveTo(b[0].points[0].start[0].read(),b[0].points[0].start[1].read());for(let y=1;y<b.length;y++){const T=b[y-1],A=b[y];h.lineTo(T.points[3].rightOuter[0].read(),T.points[3].rightOuter[1].read()),h.bezierCurveTo(T.points[1].rightOuter[0].read(),T.points[1].rightOuter[1].read(),A.points[1].leftOuter[0].read(),A.points[1].leftOuter[1].read(),A.points[3].leftOuter[0].read(),A.points[3].leftOuter[1].read())}h.lineTo(b[b.length-1].points[0].start[0].read(),b[b.length-1].points[0].start[1].read()),h.fillStyle="#FF709D",h.fill();for(let y=0;y<ie.length;y++)Ke(h,ie[y],"#FF709D",F,0),Ke(h,ie[y],"#FF4782",j,3);u.ellipse(I,250,200,{fill:"#FF4782"}),h.beginPath(),h.moveTo(b[0].points[0].start[0].read(),b[0].points[0].start[1].read());for(let y=1;y<b.length;y++){const T=b[y-1],A=b[y];h.lineTo(T.points[1].rightInner[0].read(),T.points[1].rightInner[1].read()),h.bezierCurveTo(T.points[0].rightInner[0].read(),T.points[0].rightInner[1].read(),A.points[0].leftInner[0].read(),A.points[0].leftInner[1].read(),A.points[1].leftInner[0].read(),A.points[1].leftInner[1].read())}h.lineTo(b[b.length-1].points[0].start[0].read(),b[b.length-1].points[0].start[1].read()),h.fillStyle="#FF4782",h.fill(),u.debugPointX(new he(Ne.read(),_e.read()),{label:"avg end"})},children:S(hn,{canvasScaleSignal:g,canvasTranslateXSignal:E,canvasTranslateYSignal:m,onNoteDown:it,onNoteUp:ot})}}function Ke(s,e,t,n,r){s.strokeStyle=t;for(let a=0;a<e.points.length-r;a++){const{start:c,end:p}=e.points[a];s.beginPath(),s.moveTo(c[0].read(),c[1].read()),s.lineTo(p[0].read(),p[1].read()),s.lineWidth=n-a,s.stroke()}}function hn({canvasScaleSignal:s,canvasTranslateXSignal:e,canvasTranslateYSignal:t,onNoteDown:n,onNoteUp:r}){const a=_.exports.useRef(new Map),c=re(s),p=re(e),h=re(t),[u,g]=_.exports.useState([]);console.log(u);const E=_.exports.useCallback((v,f)=>{v?a.current.set(f,v):a.current.delete(f)},[]),m=_.exports.useCallback(v=>{g(f=>{if(f.includes(v))return f;const N=a.current.get(v);if(N){const w=N.getBoundingClientRect();n(v,ze(w.x+w.width/2,e.read(),s.read()),ze(w.y+w.height*.8,t.read(),s.read()))}return wt([...f,v])})},[s,e,t,n]),d=_.exports.useCallback(v=>{g(f=>f.includes(v)?(r(v),f.filter(N=>N!==v)):f)},[r]);return _.exports.useEffect(()=>{const v=N=>{const w=Fe[N.code];w!==void 0&&m(w)},f=N=>{const w=Fe[N.code];w!==void 0&&d(w)};return window.addEventListener("keydown",v),window.addEventListener("keyup",f),()=>{window.removeEventListener("keydown",v),window.removeEventListener("keyup",f)}},[m,d]),B(Ee,{children:[S("div",{style:{background:"#7F95D1"},className:"absolute top-0 left-0 h-full w-full"}),S(Ot,{lowestNote:an,highestNote:on,scale:c,top:Ye(1100,h,c),left:Ye(at,p,c),notesDown:u,setRefForKey:E})]})}sn(cn,ln);
