{
    "project": {
        "name": "WebMidi.js",
        "version": "2.5.1",
        "description": "WebMidi.js helps you tame the Web MIDI API. Send and receive MIDI messages with ease. Control instruments with user-friendly functions (playNote, sendPitchBend, etc.). React to MIDI input with simple event listeners (noteon, pitchbend, controlchange, etc.).",
        "url": "",
        "logo": "http://djipco.github.io/webmidi/images/webmidijs-logo-small.png"
    },
    "files": {
        "src/webmidi.js": {
            "name": "src/webmidi.js",
            "modules": {},
            "classes": {
                "WebMidi": 1,
                "Input": 1,
                "Output": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "WebMidi": {
            "name": "WebMidi",
            "shortname": "WebMidi",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/webmidi.js",
            "line": 5,
            "description": "The `WebMidi` object makes it easier to work with the Web MIDI API. Basically, it simplifies\ntwo things: sending outgoing MIDI messages and reacting to incoming MIDI messages.\n\nSending MIDI messages is done via an `Output` object. All available outputs can be accessed in\nthe `WebMidi.outputs` array. There is one `Output` object for each output port available on\nyour system. Similarly, reacting to MIDI messages as they are coming in is simply a matter of\nadding a listener to an `Input` object. Similarly, all inputs can be found in the\n`WebMidi.inputs` array.\n\nPlease note that a single hardware device might create more than one input and/or output ports.\n\n#### Sending messages\n\nTo send MIDI messages, you simply need to call the desired method (`playNote()`,\n`sendPitchBend()`, `stopNote()`, etc.) from an `Output` object and pass in the appropriate\nparameters. All the native MIDI communication will be handled for you. The only additional\nthing that needs to be done is to first enable `WebMidi`. Here is an example:\n\n     WebMidi.enable(function(err) {\n       if (err) console.log(\"An error occurred\", err);\n       WebMidi.outputs[0].playNote(\"C3\");\n     });\n\nThe code above, calls the `WebMidi.enable()` method. Upon success, this method executes the\ncallback function specified as a parameter. In this case, the callback calls the `playnote()`\nfunction to play a 3rd octave C on the first available output port.\n\n#### Receiving messages\n\nReceiving messages is just as easy. You simply have to set a callback function to be triggered\nwhen a specific MIDI message is received. For example, here\"s how to listen for pitch bend\nevents on the first input port:\n\n     WebMidi.enable(function(err) {\n       if (err) console.log(\"An error occurred\", err);\n\n       WebMidi.inputs[0].addListener(\"pitchbend\", \"all\", function(e) {\n         console.log(\"Pitch value: \" + e.value);\n       });\n\n     });\n\nAs you can see, this library is much easier to use than the native Web MIDI API. No need to\nmanually craft or decode binary MIDI messages anymore!",
            "static": 1,
            "throws": {
                "description": "Error WebMidi is a singleton, it cannot be instantiated directly."
            },
            "todo": [
                "Switch away from yuidoc (deprecated) to be able to serve doc over https",
                "Yuidoc does not allow multiple exceptions (@throws) for a single method ?!"
            ]
        },
        "Input": {
            "name": "Input",
            "shortname": "Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/webmidi.js",
            "line": 1269,
            "description": "The `Input` object represents a MIDI input port on the host system. This object is created by\nthe MIDI subsystem and cannot be instantiated directly.\n\nYou will find all available `Input` objects in the `WebMidi.inputs` array.",
            "params": [
                {
                    "name": "midiInput",
                    "description": "`MIDIInput` object",
                    "type": "MIDIInput"
                }
            ]
        },
        "Output": {
            "name": "Output",
            "shortname": "Output",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/webmidi.js",
            "line": 2439,
            "description": "The `Output` object represents a MIDI output port on the host system. This object is created by\nthe MIDI subsystem and cannot be instantiated directly.\n\nYou will find all available `Output` objects in the `WebMidi.outputs` array.",
            "params": [
                {
                    "name": "midiOutput",
                    "description": "Actual `MIDIOutput` object as defined by the MIDI subsystem",
                    "type": "MIDIOutput"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/webmidi.js",
            "line": 103,
            "description": "[read-only] List of valid MIDI system messages and matching hexadecimal values.\n\nNote: values 249 and 253 are actually dispatched by the Web MIDI API but I do not know what\nthey are used for. They are not part of the online\n[MIDI 1.0 spec](http://www.midi.org/techspecs/midimessages.php).",
            "itemtype": "property",
            "name": "MIDI_SYSTEM_MESSAGES",
            "type": "Object",
            "static": 1,
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 144,
            "description": "[read-only] An object containing properties for each MIDI channel messages and their\nassociated hexadecimal value.",
            "itemtype": "property",
            "name": "MIDI_CHANNEL_MESSAGES",
            "type": "Object",
            "static": 1,
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 171,
            "description": "[read-only] An object containing properties for each registered parameters and their\nassociated pair of hexadecimal values. MIDI registered parameters extend the original list\nof control change messages (a.k.a. CC messages). Currently, there are only a limited number\nof them.",
            "itemtype": "property",
            "name": "MIDI_REGISTERED_PARAMETER",
            "type": "Object",
            "static": 1,
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 207,
            "description": "[read-only] An object containing properties for each MIDI control change messages (a.k.a.\nCC messages) and their associated hexadecimal value.",
            "itemtype": "property",
            "name": "MIDI_CONTROL_CHANGE_MESSAGES",
            "type": "Object",
            "static": 1,
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 284,
            "description": "[read-only] An object containing properties for MIDI control change messages\nthat make up NRPN messages",
            "itemtype": "property",
            "name": "MIDI_NRPN_MESSAGES",
            "type": "Object",
            "static": 1,
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 309,
            "description": "[read-only] List of MIDI channel mode messages as defined in the official MIDI\nspecification.",
            "itemtype": "property",
            "name": "MIDI_CHANNEL_MODE_MESSAGES",
            "type": "Object",
            "static": 1,
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 335,
            "description": "An integer to offset the octave both in inbound and outbound messages. By default, middle C\n(MIDI note number 60) is placed on the 4th octave (C4).\n\nIf, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n`octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.",
            "itemtype": "property",
            "name": "octaveOffset",
            "type": "Number",
            "static": 1,
            "since": "2.1",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 360,
            "description": "[read-only] Indicates whether the environment supports the Web MIDI API or not.\n\nNote: in environments that do not offer built-in MIDI support, this will report true if the\n`navigator.requestMIDIAccess` function is available. For example, if you have installed\nWebMIDIAPIShim but no plugin, this property will be true even though actual support might\nnot be there.",
            "itemtype": "property",
            "name": "supported",
            "type": "Boolean",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 379,
            "description": "[read-only] Indicates whether the interface to the host\"s MIDI subsystem is currently\nenabled.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 394,
            "description": "[read-only] An array of all currently available MIDI input ports.",
            "itemtype": "property",
            "name": "inputs",
            "type": "{Array}",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 408,
            "description": "[read-only] An array of all currently available MIDI output ports.",
            "itemtype": "property",
            "name": "outputs",
            "type": "{Array}",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 422,
            "description": "[read-only] Indicates whether the interface to the host\"s MIDI subsystem is currently\nactive.",
            "itemtype": "property",
            "name": "sysexEnabled",
            "type": "Boolean",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 437,
            "description": "[read-only] Indicates whether WebMidi should dispatch Non-Registered\nParameter Number events (which are generally groups of CC messages)\nIf correct sequences of CC messages are received, NRPN events will\nfire. The first out of order NRPN CC will fall through the collector\nlogic and all CC messages buffered will be discarded as incomplete.",
            "itemtype": "property",
            "name": "nrpnEventsEnabled",
            "type": "Boolean",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 459,
            "description": "[read-only] NRPN message types",
            "itemtype": "property",
            "name": "nrpnTypes",
            "type": "Array",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 473,
            "description": "[read-only] Current MIDI performance time in milliseconds. This can be used to queue events\nin the future.",
            "itemtype": "property",
            "name": "time",
            "type": "DOMHighResTimeStamp",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 496,
            "description": "Checks if the Web MIDI API is available and then tries to connect to the host\"s MIDI subsystem.\nThis is an asynchronous operation. When it\"s done, the specified handler callback will be\nexecuted. If an error occurred, the callback function will receive an `Error` object as its\nsole parameter.\n\nTo enable the use of system exclusive messages, the `sysex` parameter should be set to true.\nHowever, under some environments (e.g. Jazz-Plugin), the sysex parameter is ignored and sysex\nis always enabled.",
            "itemtype": "method",
            "name": "enable",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute upon success. This function will receive an\n`Error` object upon failure to enable the Web MIDI API.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "sysex",
                    "description": "Whether to enable MIDI system exclusive messages or not.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "throws": {
                "description": "Error Jazz-Plugin must be installed to use WebMIDIAPIShim."
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 626,
            "description": "Completely disables `WebMidi` by unlinking the MIDI subsystem\"s interface and destroying all\n`Input` and `Output` objects that may be available. This also means that any listener that may\nhave been defined on `Input` or `Output` objects will be destroyed.",
            "itemtype": "method",
            "name": "disable",
            "static": 1,
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 651,
            "description": "Adds an event listener on the `WebMidi` object that will trigger a function callback when the\nspecified event happens.\n\nWebMidi must be enabled before adding event listeners.\n\nCurrently, only one event is being dispatched by the `WebMidi` object:\n\n   * {{#crossLink \"WebMidi/statechange:event\"}}statechange{{/crossLink}}",
            "itemtype": "method",
            "name": "addListener",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "A callback function to execute when the specified event is detected.\nThis function will receive an event parameter object. For details on this object\"s properties,\ncheck out the documentation for the various events (links above).",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "The \"listener\" parameter must be a function.",
                "type": "TypeError"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 697,
            "description": "Checks if the specified event type is already defined to trigger the specified listener\nfunction.",
            "itemtype": "method",
            "name": "hasListener",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The callback function to check for.",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "The specified event type is not supported.",
                "type": "TypeError"
            },
            "return": {
                "description": "Boolean value indicating whether or not a callback is already defined for\nthis event type.",
                "type": "Boolean"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 740,
            "description": "Removes the specified listener(s). If the `listener` parameter is left undefined, all listeners\nfor the specified `type` will be removed. If both the `listener` and the `type` parameters are\nomitted, all listeners attached to the `WebMidi` object will be removed.",
            "itemtype": "method",
            "name": "removeListener",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the event.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "listener",
                    "description": "The callback function to check for.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "The specified event type is not supported.",
                "type": "TypeError"
            },
            "return": {
                "description": "The `WebMidi` object for easy method chaining.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 794,
            "description": "Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be one of\nthe following:\n\n* a single integer\n* an array of integers\n* the special value `\"all\"`\n* the special value `\"none\"`\n\nPassing `\"all\"` or `undefined` as a parameter to this function results in all channels being\nreturned (1-16). Passing `\"none\"` results in no channel being returned (as an empty array).\n\nNote: parameters that cannot successfully be parsed to integers between 1 and 16 are silently\nignored.",
            "itemtype": "method",
            "name": "toMIDIChannels",
            "static": 1,
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "Number|Array|\"all\"|\"none\"",
                    "optional": true,
                    "optdefault": "\"all\""
                }
            ],
            "return": {
                "description": "An array of 0 or more valid MIDI channel numbers",
                "type": "Array"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 845,
            "description": "Returns the `Input` object that matches the specified ID string or `false` if no matching input\n is found. As per the Web MIDI API specification, IDs are strings (not integers).\nPlease note that IDs change from one host to another. For example, Chrome does not use the same\n kind of IDs as Jazz-Plugin.",
            "itemtype": "method",
            "name": "getInputById",
            "static": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The ID string of the port. IDs can be viewed by looking at the\n `WebMidi.inputs` array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A MIDIInput port matching the specified ID string. If no matching port\n can be found, the method returns `false`.",
                "type": "Input|false"
            },
            "throws": {
                "description": "Error WebMidi is not enabled."
            },
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 880,
            "description": "Returns the `Output` object that matches the specified ID string or `false` if no matching\noutput is found. As per the Web MIDI API specification, IDs are strings (not integers).\n\nPlease note that IDs change from one host to another. For example, Chrome does not use the same\nkind of IDs as Jazz-Plugin.",
            "itemtype": "method",
            "name": "getOutputById",
            "static": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The ID string of the port. IDs can be viewed by looking at the\n`WebMidi.outputs` array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A MIDIOutput port matching the specified ID string. If no matching port\ncan be found, the method returns `false`.",
                "type": "Output|false"
            },
            "throws": {
                "description": "Error WebMidi is not enabled."
            },
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 914,
            "description": "Returns the first MIDI `Input` whose name *contains* the specified string.\n\nPlease note that the port names change from one host to another. For example, Chrome does\nnot report port names in the same way as the Jazz-Plugin does.",
            "itemtype": "method",
            "name": "getInputByName",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of a MIDI input port such as those visible in the\n`WebMidi.inputs` array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The `Input` that was found or `false` if no input matched the specified\nname.",
                "type": "Input|False"
            },
            "throws": {
                "description": "TypeError The name must be a string."
            },
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 948,
            "description": "Returns the octave number for the specified MIDI note number (0-127). By default, the value is\nbased on middle C (note number 60) being placed on the 4th octave (C4). However, by using the\n<a href=\"#property_octaveOffset\">octaveOffset</a> property, you can offset the result as much\nas you want.",
            "itemtype": "method",
            "name": "getOctave",
            "static": 1,
            "params": [
                {
                    "name": "number",
                    "description": "An integer representing a valid MIDI note number (between 0 and 127).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The octave (as a signed integer) or `undefined`.",
                "type": "Number"
            },
            "since": "2.0.0-rc.6",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 971,
            "description": "Returns the first MIDI `Output` that matches the specified name.\n\nPlease note that the port names change from one host to another. For example, Chrome does\nnot report port names in the same way as the Jazz-Plugin does.",
            "itemtype": "method",
            "name": "getOutputByName",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of a MIDI output port such as those visible in the\n`WebMidi.outputs` array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The `Output` that was found or `false` if no output matched the\nspecified name.",
                "type": "Output|False"
            },
            "throws": {
                "description": "Error WebMidi is not enabled."
            },
            "since": "2.0.0",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1004,
            "description": "Returns a valid MIDI note number (0-127) given the specified input. The input usually is a note\nname (C3, F#4, D-2, G8, etc.). If an integer between 0 and 127, it will simply be returned as\nis.",
            "itemtype": "method",
            "name": "guessNoteNumber",
            "static": 1,
            "params": [
                {
                    "name": "input",
                    "description": "A string to extract the note number from. An integer can also be\nused, in which case it will simply be returned (if between 0 and 127).",
                    "type": "Number|String"
                }
            ],
            "throws": {
                "description": "Invalid input value",
                "type": "Error"
            },
            "return": {
                "description": "A valid MIDI note number (0-127).",
                "type": "Number"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1034,
            "description": "Returns a MIDI note number matching the note name passed in the form of a string parameter. The\nnote name must include the octave number. The name can also optionally include a sharp (#),\na double sharp (##), a flat (b) or a double flat (bb) symbol: C5, G4, D#-1, F0, Gb7, Eb-1,\nAbb4, B##6, etc.\n\nNote that, in converting note names to numbers, C4 is considered to be middle C (MIDI note\nnumber 60) as per the scientific pitch notation standard.\n\nAlso note that the resulting note number is offset by the `octaveOffset` value (if not zero).\nFor example, if you pass in \"C4\" and the `octaveOffset` value is 2 the resulting MIDI note\nnumber will be 36.",
            "itemtype": "method",
            "name": "noteNameToNumber",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the note in the form of a letter, followed by an optional \"#\",\n\"##\", \"b\" or \"bb\" followed by the octave number.",
                    "type": "String"
                }
            ],
            "throws": {
                "description": "Invalid note name or note outside valid range.",
                "type": "RangeError"
            },
            "return": {
                "description": "The MIDI note number (between 0 and 127)",
                "type": "Number"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1083,
            "itemtype": "method",
            "name": "_updateInputsAndOutputs",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1093,
            "itemtype": "method",
            "name": "_updateInputs",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1141,
            "itemtype": "method",
            "name": "_updateOutputs",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1189,
            "itemtype": "method",
            "name": "_onInterfaceStateChange",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1198,
            "description": "Event emitted when a MIDI port becomes available. This event is typically fired whenever a\nMIDI device is plugged in. Please note that it may fire several times if a device possesses\nmultiple input/output ports.",
            "itemtype": "event",
            "name": "connected",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "timestamp",
                            "description": "The timestamp when the event occurred (in milliseconds since\nthe epoch).",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "port",
                            "description": "The actual `Input` or `Output` object associated to the event.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1211,
            "description": "Event emitted when a MIDI port becomes unavailable. This event is typically fired whenever a\nMIDI device is unplugged. Please note that it may fire several times if a device possesses\nmultiple input/output ports.",
            "itemtype": "event",
            "name": "disconnected",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "timestamp",
                            "description": "The timestamp when the event occurred (in milliseconds since\nthe epoch).",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "port",
                            "description": "An generic object containing details about the port that triggered\nthe event.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1256,
            "itemtype": "method",
            "name": "_resetInterfaceUserHandlers",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1290,
            "description": "[read-only] Status of the MIDI port\"s connection (`pending`, `open` or `closed`)",
            "itemtype": "property",
            "name": "connection",
            "type": "String",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1303,
            "description": "[read-only] ID string of the MIDI port. The ID is host-specific. Do not expect the same ID\non different platforms. For example, Google Chrome and the Jazz-Plugin report completely\ndifferent IDs for the same port.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1318,
            "description": "[read-only] Name of the manufacturer of the device that makes this port available.",
            "itemtype": "property",
            "name": "manufacturer",
            "type": "String",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1331,
            "description": "[read-only] Name of the MIDI port",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1344,
            "description": "[read-only] State of the MIDI port (`connected` or `disconnected`)",
            "itemtype": "property",
            "name": "state",
            "type": "String",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1357,
            "description": "[read-only] Type of the MIDI port (`input`)",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1377,
            "description": "Adds an event listener to the `Input` that will trigger a function callback when the specified\nevent happens. The events that are dispatched can be channel-specific or Input-wide.\n\nHere is a list of events that are dispatched by `Input` objects and that can be listened to.\n\nChannel-specific MIDI events:\n\n   * {{#crossLink \"Input/noteoff:event\"}}noteoff{{/crossLink}}\n   * {{#crossLink \"Input/noteon:event\"}}noteon{{/crossLink}}\n   * {{#crossLink \"Input/keyaftertouch:event\"}}keyaftertouch{{/crossLink}}\n   * {{#crossLink \"Input/controlchange:event\"}}controlchange{{/crossLink}}\n   * {{#crossLink \"Input/nrpn:event\"}}pitchbend{{/crossLink}}\n   * {{#crossLink \"Input/channelmode:event\"}}channelmode{{/crossLink}}\n   * {{#crossLink \"Input/programchange:event\"}}programchange{{/crossLink}}\n   * {{#crossLink \"Input/channelaftertouch:event\"}}channelaftertouch{{/crossLink}}\n   * {{#crossLink \"Input/pitchbend:event\"}}pitchbend{{/crossLink}}\n\nInput-wide MIDI events:\n\n   * {{#crossLink \"Input/sysex:event\"}}sysex{{/crossLink}}\n   * {{#crossLink \"Input/timecode:event\"}}timecode{{/crossLink}}\n   * {{#crossLink \"Input/songposition:event\"}}songposition{{/crossLink}}\n   * {{#crossLink \"Input/songselect:event\"}}songselect{{/crossLink}}\n   * {{#crossLink \"Input/tuningrequest:event\"}}tuningrequest{{/crossLink}}\n   * {{#crossLink \"Input/clock:event\"}}clock{{/crossLink}}\n   * {{#crossLink \"Input/start:event\"}}start{{/crossLink}}\n   * {{#crossLink \"Input/continue:event\"}}continue{{/crossLink}}\n   * {{#crossLink \"Input/stop:event\"}}stop{{/crossLink}}\n   * {{#crossLink \"Input/activesensing:event\"}}activesensing{{/crossLink}}\n   * {{#crossLink \"Input/reset:event\"}}reset{{/crossLink}}\n   * {{#crossLink \"Input/midimessage:event\"}}midimessage{{/crossLink}}\n   * {{#crossLink \"Input/unknownsystemmessage:event\"}}unknownsystemmessage{{/crossLink}}\n\nFor device-wide events, the `channel` parameter will be silently ignored. You can simply use\n`undefined` in that case.\n\nIf you want to view all incoming MIDI traffic, you can listen to the input-wide `midimessage`\nevent. This event is dispatched for every single message that is received on that input.",
            "itemtype": "method",
            "name": "addListener",
            "chainable": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the event.",
                    "type": "String"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel to listen on (integer between 1 and 16).\nYou can also specify an array of channel numbers or the value \"all\" (or leave it undefined for\ninput-wide events).",
                    "type": "Number|Array|String"
                },
                {
                    "name": "listener",
                    "description": "A callback function to execute when the specified event is detected.\nThis function will receive an event parameter object. For details on this object\"s properties,\ncheck out the documentation for the various events (links above).",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "The specified event type is not supported.",
                "type": "TypeError"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1490,
            "description": "This is an alias to the {{#crossLink \"Input/addListener\"}}Input.addListener(){{/crossLink}}\nfunction.",
            "itemtype": "method",
            "name": "on",
            "since": "2.0.0",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1499,
            "description": "Checks if the specified event type is already defined to trigger the listener function on the\nspecified channel(s). If more than one channel is specified, the function will return `true`\nonly if all channels have the listener defined.\n\nFor device-wide events (`sysex`, `start`, etc.), the `channel` parameter is silently ignored.\nWe suggest you use `undefined` in such cases.",
            "itemtype": "method",
            "name": "hasListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the event.",
                    "type": "String"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel to check on (between 1 and 16). You\ncan also specify an array of channel numbers or the string \"all\".",
                    "type": "Number|Array|String"
                },
                {
                    "name": "listener",
                    "description": "The callback function to check for.",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "The \"listener\" parameter must be a function.",
                "type": "TypeError"
            },
            "return": {
                "description": "Boolean value indicating whether or not the channel(s) already have this\nlistener defined.",
                "type": "Boolean"
            },
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1558,
            "description": "Removes the specified listener from the specified channel(s). If the `listener` parameter is\nleft undefined, all listeners for the specified `type` will be removed from all channels. If\nthe `channel` is also omitted, all listeners of the specified type will be removed from all\nchannels. If no parameters are defined, all listeners attached to any channel of the `Input`\nwill be removed.\n\nFor device-wide events (`sysex`, `start`, etc.), the `channel` parameter is silently ignored.\nYou can use `undefined` in such cases.",
            "itemtype": "method",
            "name": "removeListener",
            "chainable": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the event.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel(s) to check on. It can be a uint\n(between 1 and 16) an array of channel numbers or the special value \"all\".",
                    "type": "Number|String|Array",
                    "optional": true
                },
                {
                    "name": "listener",
                    "description": "The callback function to check for.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "The \"listener\" parameter must be a function..",
                "type": "TypeError"
            },
            "return": {
                "description": "The `Input` object for easy method chaining.",
                "type": "Input"
            },
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1643,
            "itemtype": "method",
            "name": "_initializeUserHandlers",
            "access": "protected",
            "tagname": "",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1663,
            "itemtype": "method",
            "name": "_onMidiMessage",
            "access": "protected",
            "tagname": "",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1679,
            "description": "Event emitted when a MIDI message is received. This should be used primarily for debugging\npurposes.",
            "itemtype": "event",
            "name": "midimessage",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The timestamp when the event occurred (in milliseconds since\nthe [Unix Epoch](https://en.wikipedia.org/wiki/Unix_time)).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "since": "2.1",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1708,
            "description": "Parses channel events and constructs NRPN message parts in valid sequences.\nKeeps a separate NRPN buffer for each channel.\nEmits an event after it receives the final CC parts msb 127 lsb 127.\nIf a message is incomplete and other messages are received before\nthe final 127 bytes, the incomplete message is cleared.",
            "itemtype": "method",
            "name": "_parseNrpnEvent",
            "params": [
                {
                    "name": "e",
                    "description": "Event"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1841,
            "description": "Event emitted when a valid NRPN message sequence has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "nrpn",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as arrays of 8 bit values( Uint8Array ).",
                            "type": "Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "controller",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The number of the NRPN.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The usual name or function of the controller.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The value received (between 0 and 65535).",
                            "type": "Uint"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1890,
            "itemtype": "method",
            "name": "_parseChannelEvent",
            "params": [
                {
                    "name": "e",
                    "description": "Event"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1919,
            "description": "Event emitted when a note off MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "noteoff",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "note",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The MIDI note number.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The usual note name (C, C#, D, D#, etc.).",
                                    "type": "String"
                                },
                                {
                                    "name": "octave",
                                    "description": "The octave (between -2 and 8).",
                                    "type": "Uint"
                                }
                            ]
                        },
                        {
                            "name": "velocity",
                            "description": "The release velocity (between 0 and 1).",
                            "type": "Number"
                        },
                        {
                            "name": "rawVelocity",
                            "description": "The attack velocity expressed as a 7-bit integer (between\n0 and 127).",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1950,
            "description": "Event emitted when a note on MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "noteon",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "note",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The MIDI note number.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The usual note name (C, C#, D, D#, etc.).",
                                    "type": "String"
                                },
                                {
                                    "name": "octave",
                                    "description": "The octave (between -2 and 8).",
                                    "type": "Uint"
                                }
                            ]
                        },
                        {
                            "name": "velocity",
                            "description": "The attack velocity (between 0 and 1).",
                            "type": "Number"
                        },
                        {
                            "name": "rawVelocity",
                            "description": "The attack velocity expressed as a 7-bit integer (between\n0 and 127).",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 1981,
            "description": "Event emitted when a key-specific aftertouch MIDI message has been received on a specific\ndevice and channel.",
            "itemtype": "event",
            "name": "keyaftertouch",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "note",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The MIDI note number.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The usual note name (C, C#, D, D#, etc.).",
                                    "type": "String"
                                },
                                {
                                    "name": "octave",
                                    "description": "The octave (between -2 and 8).",
                                    "type": "Uint"
                                }
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The aftertouch amount (between 0 and 1).",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2012,
            "description": "Event emitted when a control change MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "controlchange",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "controller",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The number of the controller.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The usual name or function of the controller.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The value received (between 0 and 127).",
                            "type": "Uint"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2041,
            "description": "Event emitted when a channel mode MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "channelmode",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "controller",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The number of the controller.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The usual name or function of the controller.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The value received (between 0 and 127).",
                            "type": "Uint"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2067,
            "description": "Event emitted when a program change MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "programchange",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "value",
                            "description": "The value received (between 0 and 127).",
                            "type": "Uint"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2086,
            "description": "Event emitted when a channel-wide aftertouch MIDI message has been received on a specific\ndevice and channel.",
            "itemtype": "event",
            "name": "channelaftertouch",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "value",
                            "description": "The aftertouch value received (between 0 and 1).",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2105,
            "description": "Event emitted when a pitch bend MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "pitchbend",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "value",
                            "description": "The pitch bend value received (between -1 and 1).",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2138,
            "description": "Returns the name of a control change message matching the specified number. If no match is\nfound, the function returns `undefined`.",
            "itemtype": "method",
            "name": "getCcNameByNumber",
            "params": [
                {
                    "name": "number",
                    "description": "The number of the control change message.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The matching control change name or `undefined`.",
                "type": "String|undefined"
            },
            "throws": {
                "description": "RangeError The control change number must be between 0 and 119."
            },
            "since": "2.0.0",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2174,
            "description": "Returns the channel mode name matching the specified number. If no match is found, the function\nreturns `undefined`.",
            "itemtype": "method",
            "name": "getChannelModeByNumber",
            "params": [
                {
                    "name": "number",
                    "description": "The number of the channel mode message.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The matching channel mode message\"s name or `undefined`;",
                "type": "String|undefined"
            },
            "throws": {
                "description": "RangeError The channel mode number must be between 120 and 127."
            },
            "since": "2.0.0",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2208,
            "itemtype": "method",
            "name": "_parseSystemEvent",
            "access": "protected",
            "tagname": "",
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2225,
            "description": "Event emitted when a system exclusive MIDI message has been received. You should note that,\nto receive `sysex` events, you must call the `WebMidi.enable()` method with a second\nparameter set to `true`:\n\n    WebMidi.enable(function(err) {\n\n       if (err) {\n         console.log(\"WebMidi could not be enabled.\");\n       }\n\n       var input = WebMidi.inputs[0];\n\n       input.addListener(\"sysex\", \"all\", function (e) {\n         console.log(e);\n       });\n\n    }, true);",
            "itemtype": "event",
            "name": "sysex",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2257,
            "description": "Event emitted when a system MIDI time code quarter frame message has been received.",
            "itemtype": "event",
            "name": "timecode",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2272,
            "description": "Event emitted when a system song position pointer MIDI message has been received.",
            "itemtype": "event",
            "name": "songposition",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2287,
            "description": "Event emitted when a system song select MIDI message has been received.",
            "itemtype": "event",
            "name": "songselect",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "song",
                            "description": "Song (or sequence) number to select.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2304,
            "description": "Event emitted when a system tune request MIDI message has been received.",
            "itemtype": "event",
            "name": "tuningrequest",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2320,
            "description": "Event emitted when a system timing clock MIDI message has been received.",
            "itemtype": "event",
            "name": "clock",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2336,
            "description": "Event emitted when a system start MIDI message has been received.",
            "itemtype": "event",
            "name": "start",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2352,
            "description": "Event emitted when a system continue MIDI message has been received.",
            "itemtype": "event",
            "name": "continue",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2368,
            "description": "Event emitted when a system stop MIDI message has been received.",
            "itemtype": "event",
            "name": "stop",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2384,
            "description": "Event emitted when a system active sensing MIDI message has been received.",
            "itemtype": "event",
            "name": "activesensing",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2399,
            "description": "Event emitted when a system reset MIDI message has been received.",
            "itemtype": "event",
            "name": "reset",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2414,
            "description": "Event emitted when an unknown system MIDI message has been received. It could be, for\nexample, one of the undefined/reserved messages.",
            "itemtype": "event",
            "name": "unknownsystemmessage",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The `Input` that triggered the event.",
                            "type": "Input"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "timestamp",
                            "description": "The time when the event occurred (in milliseconds)",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/webmidi.js",
            "line": 2456,
            "description": "[read-only] Status of the MIDI port\"s connection",
            "itemtype": "property",
            "name": "connection",
            "type": "String",
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2469,
            "description": "[read-only] ID string of the MIDI port",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2482,
            "description": "[read-only] Manufacturer of the device to which this port belongs",
            "itemtype": "property",
            "name": "manufacturer",
            "type": "String",
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2495,
            "description": "[read-only] Name of the MIDI port",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2508,
            "description": "[read-only] State of the MIDI port",
            "itemtype": "property",
            "name": "state",
            "type": "String",
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2521,
            "description": "[read-only] Type of the MIDI port (`output`)",
            "itemtype": "property",
            "name": "state",
            "type": "String",
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2538,
            "description": "Sends a MIDI message on the MIDI output port, at the scheduled timestamp.\n\nUnless, you are familiar with the details of the MIDI message format, you should not use this\nmethod directly. Instead, use one of the simpler helper methods: `playNote()`, `stopNote()`,\n`sendControlChange()`, `sendSystemMessage()`, etc.\n\nDetails on the format of MIDI messages are available in the\n<a href=\"http://www.midi.org/techspecs/midimessages.php\">summary of MIDI messages</a> of the\nMIDI Manufacturers Association.",
            "itemtype": "method",
            "name": "send",
            "chainable": 1,
            "params": [
                {
                    "name": "status",
                    "description": "The MIDI status byte of the message (128-255).",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "An array of uints for the message. The number of data bytes varies\ndepending on the status byte. It is perfectly legal to send no data for some message types (use\nundefined or an empty array in this case). Each byte must be between 0 and 255.",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "[]"
                },
                {
                    "name": "timestamp",
                    "description": "The timestamp at which to send the message. You can\nuse `WebMidi.time` to retrieve the current timestamp. To send immediately, leave blank or use\n0.",
                    "type": "DOMHighResTimeStamp",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "throws": {
                "description": "Data bytes must be integers between 0 (0x00) and 255 (0x7F).",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2596,
            "description": "Sends a MIDI *system exclusive* (sysex) message. The generated message will automatically be\nprepended with the *sysex* byte (0xF0) and terminated with the *end of sysex* byte (0xF7).\n\nTo use the `sendSysex()` method, system exclusive message support must have been enabled. To\ndo so, you must pass `true` as the second parameter to `WebMidi.enable()`:\n\n    WebMidi.enable(function (err) {\n        if (err) {\n            console.warn(err);\n        } else {\n            console.log(\"Sysex is enabled!\");\n        }\n    }, true);\n\nNote that, depending on browser, version and platform, it may be necessary to serve the page\nover HTTPS to enable sysex support.\n\n#### Examples\n\nIf you want to send a sysex message to a Korg device connected to the first output, you would\nuse the following code:\n\n    WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n\nThe parameters can be specified using any number notation (decimal, hex, binary, etc.).\nTherefore, the code below is equivalent to the code above:\n\n    WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n\nThe above code sends the byte values 1, 2, 3, 4 and 5 to Korg devices (hex 42 is the same as\ndecimal 66).\n\nSome manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\nas the first parameter. For example, to send the same sysex message to a\n*Native Instruments* device:\n\n    WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n\nThere is no limit for the length of the data array. However, it is generally suggested to keep\nsystem exclusive messages to 64Kb or less.",
            "itemtype": "method",
            "name": "sendSysex",
            "chainable": 1,
            "params": [
                {
                    "name": "manufacturer",
                    "description": "An unsigned integer or an array of three unsigned integers\nbetween 0 and 127 that identify the targeted manufacturer. The *MIDI Manufacturers Association*\nmaintains a full list of\n[Manufacturer ID Numbers](https://www.midi.org/specifications/item/manufacturer-id-numbers).",
                    "type": "Number|Array"
                },
                {
                    "name": "data",
                    "description": "An array of uints between 0 and 127. This is the data you wish to\ntransfer.",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "[]"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throw": "The data bytes of a sysex message must be integers between 0 (0x00) and 127 (0x7F).",
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2689,
            "description": "Sends a *MIDI Timecode Quarter Frame* message. Please note that no processing is being done on\nthe data. It is up to the developer to format the data according to the\n[MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.",
            "itemtype": "method",
            "name": "sendTimecodeQuarterFrame",
            "chainable": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The quarter frame message content (integer between 0 and 127).",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2717,
            "description": "Sends a *Song Position* MIDI message. The value is expressed in MIDI beats (between 0 and\n16383) which are 16th note. Position 0 is always the start of the song.",
            "itemtype": "method",
            "name": "sendSongPosition",
            "chainable": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The MIDI beat to cue to (int between 0 and 16383).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2756,
            "description": "Sends a *Song Select* MIDI message. Beware that some devices will display position 0 as\nposition 1 for user-friendlyness.",
            "itemtype": "method",
            "name": "sendSongSelect",
            "chainable": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The number of the song to select (integer between 0 and 127).",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "The song number must be between 0 and 127."
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2795,
            "description": "Sends a *MIDI tuning request* real-time message.\n\nNote: there is currently a bug in Chrome\"s MIDI implementation. If you try to use this\nfunction, Chrome will actually throw a \"Message is incomplete\" error. The bug is\n[scheduled to be fixed](https://bugs.chromium.org/p/chromium/issues/detail?id=610116).",
            "itemtype": "method",
            "name": "sendTuningRequest",
            "chainable": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2827,
            "description": "Sends a *MIDI Clock* real-time message. According to the standard, there are 24 MIDI Clocks\nfor every quarter note.",
            "itemtype": "method",
            "name": "sendClock",
            "chainable": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2852,
            "description": "Sends a *Start* real-time message. A MIDI Start message starts the playback of the current\nsong at beat 0. To start playback elsewhere in the song, use the `sendContinue()` function.",
            "itemtype": "method",
            "name": "sendStart",
            "chainable": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2877,
            "description": "Sends a *Continue* real-time message. This resumes song playback where it was previously\nstopped or where it was last cued with a song position message. To start playback from the\nstart, use the `sendStart()` function.",
            "itemtype": "method",
            "name": "sendContinue",
            "chainable": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2903,
            "description": "Sends a *Stop* real-time message. This tells the device connected to this port to stop playback\nimmediately (or at the scheduled time).",
            "itemtype": "method",
            "name": "sendStop",
            "chainable": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2928,
            "description": "Sends an *Active Sensing* real-time message. This tells the device connected to this port that\nthe connection is still good. Active sensing messages should be sent every 300 ms if there was\nno other activity on the MIDI port.",
            "itemtype": "method",
            "name": "sendActiveSensing",
            "chainable": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2958,
            "description": "Sends *Reset* real-time message. This tells the device connected to this port that is should\nreset itself to a default state.",
            "itemtype": "method",
            "name": "sendReset",
            "chainable": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 2983,
            "description": "Sends a MIDI **note off** message to the specified channel(s) for a single note or multiple\nsimultaneous notes (chord). You can delay the execution of the **note off** command by using\nthe `time` property of the `options` parameter (in milliseconds).",
            "itemtype": "method",
            "name": "stopNote",
            "chainable": 1,
            "params": [
                {
                    "name": "note",
                    "description": "The note(s) you wish to stop. The notes can be specified in\none of three ways. The first way is by using the MIDI note number (an integer between `0` and\n`127`). The second way is by using the note name followed by the octave (C3, G#4, F-1, Db7).\nThe octave range should be between -2 and 8. The lowest note is C-2 (MIDI note number 0) and\nthe highest note is G8 (MIDI note number 127). It is also possible to specify an array of note\nnumbers and/or names. The final way is to use the special value `all` to send an \"allnotesoff\"\nchannel message.",
                    "type": "Number|Array|String"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between `1` and `16`) or an\narray of channel numbers. If the special value `all` is used (default), the message will be\nsent to all 16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "rawVelocity",
                            "description": "Controls whether the release velocity is set using\nan integer between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\ndefault).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "velocity",
                            "description": "The velocity at which to release the note (between `0`\nand `1`). If the `rawVelocity` option is `true`, the value should be specified as an integer\nbetween `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\nNote that when the first parameter to `stopNote()` is `all`, the release velocity is silently\nignored.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3068,
            "description": "Requests the playback of a single note or multiple notes on the specified channel(s). You can\ndelay the execution of the **note on** command by using the `time` property of the `options`\nparameter (milliseconds).\n\nIf no duration is specified in the `options`, the note will play until a matching **note off**\nis sent. If a duration is specified, a **note off** will be automatically sent after said\nduration.\n\nNote: As per the MIDI standard, a **note on** event with a velocity of `0` is considered to be\na **note off**.",
            "itemtype": "method",
            "name": "playNote",
            "chainable": 1,
            "params": [
                {
                    "name": "note",
                    "description": "The note(s) you wish to play. The notes can be specified in\none of two ways. The first way is by using the MIDI note number (an integer between 0 and 127).\nThe second way is by using the note name followed by the octave (C3, G#4, F-1, Db7). The octave\nrange should be between -2 and 8. The lowest note is C-2 (MIDI note number 0) and the highest\nnote is G8 (MIDI note number 127). It is also possible to specify an array of note numbers\nand/or names.",
                    "type": "Number|String|Array"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between `1` and `16`) or an\narray of channel numbers. If the special value **all** is used (default), the message will be\nsent to all 16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "duration",
                            "description": "The number of milliseconds (integer) to wait\nbefore sending a matching **note off** event. If left undefined, only a **note on** message is\nsent.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "rawVelocity",
                            "description": "Controls whether the attack and release velocities\nare set using integers between `0` and `127` (`true`) or a decimal number between `0` and `1`\n(`false`, default).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "release",
                            "description": "The velocity at which to release the note (between `0`\nand `1`). If the `rawVelocity` option is `true`, the value should be specified as an integer\nbetween `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\nThis is only used with the **note off** event triggered when `options.duration` is set.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "velocity",
                            "description": "The velocity at which to play the note (between `0` and\n`1`). If the `rawVelocity` option is `true`, the value should be specified as an integer\nbetween `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3200,
            "description": "Sends a MIDI `key aftertouch` message to the specified channel(s) at the scheduled time. This\nis a key-specific aftertouch. For a channel-wide aftertouch message, use\n{{#crossLink \"WebMidi/sendChannelAftertouch:method\"}}sendChannelAftertouch(){{/crossLink}}.",
            "itemtype": "method",
            "name": "sendKeyAftertouch",
            "chainable": 1,
            "params": [
                {
                    "name": "note",
                    "description": "The note for which you are sending an aftertouch value. The\nnotes can be specified in one of two ways. The first way is by using the MIDI note number (an\ninteger between 0 and 127). The second way is by using the note name followed by the octave\n(C3, G#4, F-1, Db7). The octave range should be between -2 and 8. The lowest note is C-2 (MIDI\nnote number 0) and the highest note is G8 (MIDI note number 127). It is also possible to use\nan array of note names and/or numbers.",
                    "type": "Number|String|Array"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "pressure",
                    "description": "The pressure level to send (between 0 and 1).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.5"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "The channel must be between 1 and 16.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3267,
            "description": "Sends a MIDI `control change` message (a.k.a. CC message) to the specified channel(s) at the\nscheduled time. The control change message to send can be specified numerically or by using one\nof the following common names:\n\n * `bankselectcoarse` (#0)\n * `modulationwheelcoarse` (#1)\n * `breathcontrollercoarse` (#2)\n * `footcontrollercoarse` (#4)\n * `portamentotimecoarse` (#5)\n * `dataentrycoarse` (#6)\n * `volumecoarse` (#7)\n * `balancecoarse` (#8)\n * `pancoarse` (#10)\n * `expressioncoarse` (#11)\n * `effectcontrol1coarse` (#12)\n * `effectcontrol2coarse` (#13)\n * `generalpurposeslider1` (#16)\n * `generalpurposeslider2` (#17)\n * `generalpurposeslider3` (#18)\n * `generalpurposeslider4` (#19)\n * `bankselectfine` (#32)\n * `modulationwheelfine` (#33)\n * `breathcontrollerfine` (#34)\n * `footcontrollerfine` (#36)\n * `portamentotimefine` (#37)\n * `dataentryfine` (#38)\n * `volumefine` (#39)\n * `balancefine` (#40)\n * `panfine` (#42)\n * `expressionfine` (#43)\n * `effectcontrol1fine` (#44)\n * `effectcontrol2fine` (#45)\n * `holdpedal` (#64)\n * `portamento` (#65)\n * `sustenutopedal` (#66)\n * `softpedal` (#67)\n * `legatopedal` (#68)\n * `hold2pedal` (#69)\n * `soundvariation` (#70)\n * `resonance` (#71)\n * `soundreleasetime` (#72)\n * `soundattacktime` (#73)\n * `brightness` (#74)\n * `soundcontrol6` (#75)\n * `soundcontrol7` (#76)\n * `soundcontrol8` (#77)\n * `soundcontrol9` (#78)\n * `soundcontrol10` (#79)\n * `generalpurposebutton1` (#80)\n * `generalpurposebutton2` (#81)\n * `generalpurposebutton3` (#82)\n * `generalpurposebutton4` (#83)\n * `reverblevel` (#91)\n * `tremololevel` (#92)\n * `choruslevel` (#93)\n * `celestelevel` (#94)\n * `phaserlevel` (#95)\n * `databuttonincrement` (#96)\n * `databuttondecrement` (#97)\n * `nonregisteredparametercoarse` (#98)\n * `nonregisteredparameterfine` (#99)\n * `registeredparametercoarse` (#100)\n * `registeredparameterfine` (#101)\n\nNote: as you can see above, not all control change message have a matching common name. This\ndoes not mean you cannot use the others. It simply means you will need to use their number\ninstead of their name.\n\nTo view a list of all available `control change` messages, please consult \"Table 3 - Control\nChange Messages\" from the [MIDI Messages](\nhttps://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\nspecification.",
            "itemtype": "method",
            "name": "sendControlChange",
            "chainable": 1,
            "params": [
                {
                    "name": "controller",
                    "description": "The MIDI controller number (0-119) or name.",
                    "type": "Number|String"
                },
                {
                    "name": "value",
                    "description": "The value to send (0-127).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "Value must be between 0 and 127.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3402,
            "description": "Selects a MIDI registered parameter so it is affected by data entry, data increment and data\ndecrement messages.",
            "itemtype": "method",
            "name": "_selectRegisteredParameter",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "parameter",
                    "description": "A two-position array specifying the two control bytes (0x65, 0x64)\nthat identify the registered parameter.",
                    "type": "Array"
                },
                {
                    "name": "channel",
                    "description": ""
                },
                {
                    "name": "time",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3439,
            "description": "Selects a MIDI non-registered parameter so it is affected by data entry, data increment and\ndata decrement messages.",
            "itemtype": "method",
            "name": "_selectNonRegisteredParameter",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "parameter",
                    "description": "A two-position array specifying the two control bytes (0x63, 0x62)\nthat identify the registered parameter.",
                    "type": "Array"
                },
                {
                    "name": "channel",
                    "description": ""
                },
                {
                    "name": "time",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3476,
            "description": "Sets the value of the currently selected MIDI registered parameter.",
            "itemtype": "method",
            "name": "_setCurrentRegisteredParameter",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Int|Array"
                },
                {
                    "name": "channel",
                    "description": ""
                },
                {
                    "name": "time",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3514,
            "description": "Deselects the currently active MIDI registered parameter so it is no longer affected by data\nentry, data increment and data decrement messages.\n\nCurrent best practice recommends doing that after each call to\n`_setCurrentRegisteredParameter()`.",
            "itemtype": "method",
            "name": "_deselectRegisteredParameter",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "channel",
                    "description": ""
                },
                {
                    "name": "time",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3542,
            "description": "Sets the specified MIDI registered parameter to the desired value. The value is defined with\nup to two bytes of data that each can go from 0 to 127.\n\n>Unless you are very familiar with the MIDI standard you probably should favour one of the\n>simpler to use functions such as: `setPitchbendRange()`, `setModulationRange()`,\n>`setMasterTuning()`, etc.\n\nMIDI registered parameters extend the original list of control change messages. Currently,\nthere are only a limited number of them. Here are the original registered parameters with the\nidentifier that can be used as the first parameter of this function:\n\n * Pitchbend Range (0x00, 0x00): `pitchbendrange`\n * Channel Fine Tuning (0x00, 0x01): `channelfinetuning`\n * Channel Coarse Tuning (0x00, 0x02): `channelcoarsetuning`\n * Tuning Program (0x00, 0x03): `tuningprogram`\n * Tuning Bank (0x00, 0x04): `tuningbank`\n * Modulation Range (0x00, 0x05): `modulationrange`\n\nNote that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\nStandard*, which is not widely implemented.\n\nAnother set of extra parameters have been later added for 3D sound controllers. They are:\n\n * Azimuth Angle (0x3D, 0x00): `azimuthangle`\n * Elevation Angle (0x3D, 0x01): `elevationangle`\n * Gain (0x3D, 0x02): `gain`\n * Distance Ratio (0x3D, 0x03): `distanceratio`\n * Maximum Distance (0x3D, 0x04): `maximumdistance`\n * Maximum Distance Gain (0x3D, 0x05): `maximumdistancegain`\n * Reference Distance Ratio (0x3D, 0x06): `referencedistanceratio`\n * Pan Spread Angle (0x3D, 0x07): `panspreadangle`\n * Roll Angle (0x3D, 0x08): `rollangle`",
            "itemtype": "method",
            "name": "setRegisteredParameter",
            "chainable": 1,
            "params": [
                {
                    "name": "parameter",
                    "description": "A string identifying the parameter\"s name (see above) or a\ntwo-position array specifying the two control bytes (0x65, 0x64) that identify the registered\nparameter.",
                    "type": "String|Array"
                },
                {
                    "name": "data",
                    "description": "An single integer or an array of integers with a maximum length\nof 2 specifying the desired data.",
                    "type": "Number|Array",
                    "optional": true,
                    "optdefault": "[]"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3625,
            "description": "Sets a non-registered parameter to the specified value. The NRPN is selected by passing in a\ntwo-position array specifying the values of the two control bytes. The value is specified by\npassing in an single integer (most cases) or an array of two integers.\n\nNRPNs are not standardized in any way. Each manufacturer is free to implement them any way\nthey see fit. For example, according to the Roland GS specification, you can control the\n**vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\nwould use:\n\n    WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123);\n\nObviously, you should select a channel so the message is not sent to all channels. For\ninstance, to send to channel 1 of the first output port, you would use:\n\n    WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123, 1);\n\nIn some rarer cases, you need to send two values with your NRPN messages. In such cases, you\nwould use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\nuses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\nvalue to send was 10, you could use:\n\n    WebMidi.outputs[0].setNonRegisteredParameter([2, 63], [0, 10]);\n\nFor further implementation details, refer to the manufacturer\"s documentation.",
            "itemtype": "method",
            "name": "setNonRegisteredParameter",
            "chainable": 1,
            "params": [
                {
                    "name": "parameter",
                    "description": "A two-position array specifying the two control bytes (0x63,\n0x62) that identify the non-registered parameter.",
                    "type": "Array"
                },
                {
                    "name": "data",
                    "description": "An integer or an array of integers with a length of 1 or 2\nspecifying the desired data.",
                    "type": "Number|Array",
                    "optional": true,
                    "optdefault": "[]"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3703,
            "description": "Increments the specified MIDI registered parameter by 1. For more specific MIDI usage\ninformation, check out [RP-18](http://dev.midi.org/techspecs/rp18.php) regarding the usage of\nincrement and decrement controllers.\n\n>Unless you are very familiar with the MIDI standard you probably should favour one of the\n>simpler to use functions such as: `setPitchbendRange()`, `setModulationRange()`,\n>`setMasterTuning()`, etc.\n\nHere is the full list of parameter names that can be used with this function:\n\n * Pitchbend Range (0x00, 0x00): `pitchbendrange`\n * Channel Fine Tuning (0x00, 0x01): `channelfinetuning`\n * Channel Coarse Tuning (0x00, 0x02): `channelcoarsetuning`\n * Tuning Program (0x00, 0x03): `tuningprogram`\n * Tuning Bank (0x00, 0x04): `tuningbank`\n * Modulation Range (0x00, 0x05): `modulationrange`\n * Azimuth Angle (0x3D, 0x00): `azimuthangle`\n * Elevation Angle (0x3D, 0x01): `elevationangle`\n * Gain (0x3D, 0x02): `gain`\n * Distance Ratio (0x3D, 0x03): `distanceratio`\n * Maximum Distance (0x3D, 0x04): `maximumdistance`\n * Maximum Distance Gain (0x3D, 0x05): `maximumdistancegain`\n * Reference Distance Ratio (0x3D, 0x06): `referencedistanceratio`\n * Pan Spread Angle (0x3D, 0x07): `panspreadangle`\n * Roll Angle (0x3D, 0x08): `rollangle`",
            "itemtype": "method",
            "name": "incrementRegisteredParameter",
            "chainable": 1,
            "params": [
                {
                    "name": "parameter",
                    "description": "A string identifying the parameter\"s name (see above) or a\ntwo-position array specifying the two control bytes (0x65, 0x64) that identify the registered\nparameter.",
                    "type": "String|Array"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Uint|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "Error The specified parameter is not available."
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3778,
            "description": "Decrements the specified MIDI registered parameter by 1. For more specific MIDI usage\ninformation, check out [RP-18](http://dev.midi.org/techspecs/rp18.php) regarding the usage of\nincrement and decrement controllers.\n\n>Unless you are very familiar with the MIDI standard you probably should favour one of the\n>simpler to use functions such as: `setPitchbendRange()`, `setModulationRange()`,\n>`setMasterTuning()`, etc.\n\nHere is the full list of parameter names that can be used with this function:\n\n * Pitchbend Range (0x00, 0x00): `pitchbendrange`\n * Channel Fine Tuning (0x00, 0x01): `channelfinetuning`\n * Channel Coarse Tuning (0x00, 0x02): `channelcoarsetuning`\n * Tuning Program (0x00, 0x03): `tuningprogram`\n * Tuning Bank (0x00, 0x04): `tuningbank`\n * Modulation Range (0x00, 0x05): `modulationrange`\n * Azimuth Angle (0x3D, 0x00): `azimuthangle`\n * Elevation Angle (0x3D, 0x01): `elevationangle`\n * Gain (0x3D, 0x02): `gain`\n * Distance Ratio (0x3D, 0x03): `distanceratio`\n * Maximum Distance (0x3D, 0x04): `maximumdistance`\n * Maximum Distance Gain (0x3D, 0x05): `maximumdistancegain`\n * Reference Distance Ratio (0x3D, 0x06): `referencedistanceratio`\n * Pan Spread Angle (0x3D, 0x07): `panspreadangle`\n * Roll Angle (0x3D, 0x08): `rollangle`",
            "itemtype": "method",
            "name": "decrementRegisteredParameter",
            "chainable": 1,
            "params": [
                {
                    "name": "parameter",
                    "description": "A string identifying the parameter\"s name (see above) or a\ntwo-position array specifying the two control bytes (0x65, 0x64) that identify the registered\nparameter.",
                    "type": "String|Array"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "TypeError The specified parameter is not available."
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3851,
            "description": "Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\nadjust the range used by their pitch bend lever. The range can be specified with the\n`semitones` parameter, the `cents` parameter or by specifying both parameters at the same time.",
            "itemtype": "method",
            "name": "setPitchBendRange",
            "chainable": 1,
            "params": [
                {
                    "name": "semitones",
                    "description": "The desired adjustment value in semitones (integer between\n0-127). While nothing imposes that in the specification, it is very common for manufacturers to\nlimit the range to 2 octaves (-12 semitones to 12 semitones).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "cents",
                    "description": "The desired adjustment value in cents (integer between 0-127).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "The cents value must be between 0 and 127.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3910,
            "description": "Sends a modulation depth range message to the specified channel(s) so that they adjust the\ndepth of their modulation wheel\"s range. The range can be specified with the `semitones`\nparameter, the `cents` parameter or by specifying both parameters at the same time.",
            "itemtype": "method",
            "name": "setModulationRange",
            "chainable": 1,
            "params": [
                {
                    "name": "semitones",
                    "description": "The desired adjustment value in semitones (integer between\n0-127).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "cents",
                    "description": "The desired adjustment value in cents (0-127).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "The cents value must be between 0 and 127.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 3968,
            "description": "Sends a master tuning message to the specified channel(s). The value is decimal and must be\nlarger than -65 semitones and smaller than 64 semitones.\n\n>Because of the way the MIDI specification works, the decimal portion of the value will be\n>encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n>inclusively. For those familiar with the MIDI protocol, this function actually generates\n>**Master Coarse Tuning** and **Master Fine Tuning** RPN messages.",
            "itemtype": "method",
            "name": "setMasterTuning",
            "chainable": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The desired decimal adjustment value in semitones (-65 < x < 64)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.0"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "The value must be a decimal number between larger than -65 and smaller\nthan 64.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 4032,
            "description": "Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n*MIDI Tuning Standard*, which is not widely implemented.",
            "itemtype": "method",
            "name": "setTuningProgram",
            "chainable": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The desired tuning program (0-127).",
                    "type": "Number"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "The program value must be between 0 and 127.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 4078,
            "description": "Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n*MIDI Tuning Standard*, which is not widely implemented.",
            "itemtype": "method",
            "name": "setTuningBank",
            "chainable": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The desired tuning bank (0-127).",
                    "type": "Number"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "The bank value must be between 0 and 127.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 4124,
            "description": "Sends a MIDI `channel mode` message to the specified channel(s). The channel mode message to\nsend can be specified numerically or by using one of the following common names:\n\n  * `allsoundoff` (#120)\n  * `resetallcontrollers` (#121)\n  * `localcontrol` (#122)\n  * `allnotesoff` (#123)\n  * `omnimodeoff` (#124)\n  * `omnimodeon` (#125)\n  * `monomodeon` (#126)\n  * `polymodeon` (#127)\n\nIt should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\nrequire a value that\"s not zero. For that reason, the `value` parameter is optional and\ndefaults to 0.",
            "itemtype": "method",
            "name": "sendChannelMode",
            "chainable": 1,
            "params": [
                {
                    "name": "command",
                    "description": "The numerical identifier of the channel mode message (integer\nbetween 120-127) or its name as a string.",
                    "type": "Number|String"
                },
                {
                    "name": "value",
                    "description": "The value to send (integer between 0-127).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "Value must be an integer between 0 and 127.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 4208,
            "description": "Sends a MIDI `program change` message to the specified channel(s) at the scheduled time.",
            "itemtype": "method",
            "name": "sendProgramChange",
            "chainable": 1,
            "params": [
                {
                    "name": "program",
                    "description": "The MIDI patch (program) number (0-127)",
                    "type": "Number"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "Program numbers must be between 0 and 127.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 4258,
            "description": "Sends a MIDI `channel aftertouch` message to the specified channel(s). For key-specific\naftertouch, you should instead use `sendKeyAftertouch()`.",
            "itemtype": "method",
            "name": "sendChannelAftertouch",
            "chainable": 1,
            "params": [
                {
                    "name": "pressure",
                    "description": "The pressure level (between 0 and 1). An invalid pressure value\nwill silently trigger the default behaviour.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.5"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or\nan array of channel numbers. If the special value \"all\" is used, the message will be sent to\nall 16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 4307,
            "description": "Sends a MIDI `pitch bend` message to the specified channel(s) at the scheduled time.",
            "itemtype": "method",
            "name": "sendPitchBend",
            "chainable": 1,
            "params": [
                {
                    "name": "bend",
                    "description": "The intensity level of the bend (between -1 and 1). A value of zero means\nno bend.",
                    "type": "Number"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\narray of channel numbers. If the special value \"all\" is used, the message will be sent to all\n16 channels.",
                    "type": "Number|Array|String",
                    "optional": true,
                    "optdefault": "all"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "time",
                            "description": "This value can be one of two\nthings. If the value is a string starting with the + sign and followed by a number, the request\nwill be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\ntimestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\nis relative to the navigation start of the document. To retrieve the current time, you can use\n`WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\nsent as soon as possible.",
                            "type": "DOMHighResTimeStamp|String",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "Pitch bend value must be between -1 and 1.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `Output` object so methods can be chained.",
                "type": "Output"
            },
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 4360,
            "description": "Returns a timestamp, relative to the navigation start of the document, derived from the `time`\nparameter. If the parameter is a string starting with the \"+\" sign and followed by a number,\nthe resulting value will be the sum of the current timestamp plus that number. Otherwise, the\nvalue will be returned as is.\n\nIf the calculated return value is 0, less than zero or an otherwise invalid value, `undefined`\nwill be returned.",
            "itemtype": "method",
            "name": "_parseTimeParameter",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "DOMHighResTimeStamp"
            },
            "access": "protected",
            "tagname": "",
            "class": "Output"
        },
        {
            "file": "src/webmidi.js",
            "line": 4389,
            "description": "Converts an input value (which can be a uint, a string or an array of the previous two) to an\narray of MIDI note numbers.",
            "itemtype": "method",
            "name": "_convertNoteToArray",
            "params": [
                {
                    "name": "note",
                    "description": "",
                    "type": "Number|Array|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "protected",
            "tagname": "",
            "class": "Output"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:794"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:845"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:880"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:914"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:948"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:971"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:1004"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:2138"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:2174"
        },
        {
            "message": "unknown tag: throw",
            "line": " src/webmidi.js:2596"
        },
        {
            "message": "unknown tag: throw",
            "line": " src/webmidi.js:2596"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:3402"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:3439"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:3476"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:3514"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:3542"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:3625"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:3703"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:3778"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:4389"
        }
    ]
}