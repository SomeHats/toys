{"mappings":"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","sources":["src/lib/DebugDraw.ts"],"sourcesContent":["import AABB from './geom/AABB';\nimport Line2 from './geom/Line2';\nimport Vector2 from './geom/Vector2';\n\nconst DEFAULT_DEBUG_COLOR = 'magenta';\nconst LABEL_OFFSET = new Vector2(5, 0);\nconst DEBUG_POINT_SIZE = 3;\nconst HAIRLINE = 0.5;\nconst DEBUG_ARROW_ANGLE = Math.PI * 0.75;\nconst DEBUG_ARROW_SIZE = 5;\n\nexport type StrokeOptions = {\n  strokeWidth?: number;\n  stroke?: string;\n  strokeCap?: 'butt' | 'round' | 'square';\n  strokeDash?: number[];\n  strokeDashOffset?: number;\n  strokeJoin?: 'bevel' | 'round' | 'miter';\n};\n\nexport type FillOptions = {\n  fill?: string;\n};\n\nexport type DebugOptions = {\n  color?: string;\n  label?: string;\n};\n\nexport type StrokeAndFillOptions = StrokeOptions & FillOptions;\n\nexport class DebugDraw {\n  constructor(public readonly ctx: CanvasRenderingContext2D) {}\n\n  public clear(fill?: string) {\n    if (!fill) {\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n      return;\n    }\n\n    this.applyFillOptions({ fill });\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n\n  public beginPath() {\n    this.ctx.beginPath();\n  }\n\n  public moveTo({ x, y }: Vector2) {\n    this.ctx.moveTo(x, y);\n  }\n\n  public lineTo({ x, y }: Vector2) {\n    this.ctx.lineTo(x, y);\n  }\n\n  public arc(\n    { x, y }: Vector2,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n    anticlockwise?: boolean,\n  ) {\n    this.ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n  }\n\n  public arcTo(p1: Vector2, p2: Vector2, radius: number) {\n    this.ctx.arcTo(p1.x, p1.y, p2.x, p2.y, radius);\n  }\n\n  public quadraticCurveTo(control: Vector2, target: Vector2) {\n    this.ctx.quadraticCurveTo(control.x, control.y, target.x, target.y);\n  }\n  public bezierCurveTo(control1: Vector2, control2: Vector2, target: Vector2) {\n    this.ctx.bezierCurveTo(\n      control1.x,\n      control1.y,\n      control2.x,\n      control2.y,\n      target.x,\n      target.y,\n    );\n  }\n\n  public applyStrokeOptions({\n    strokeWidth = 1,\n    stroke = undefined,\n    strokeCap = 'butt',\n    strokeDash = [],\n    strokeDashOffset = 0,\n    strokeJoin = 'round',\n  }: StrokeOptions) {\n    if (stroke) {\n      this.ctx.lineWidth = strokeWidth;\n      this.ctx.strokeStyle = stroke;\n      this.ctx.lineCap = strokeCap;\n      this.ctx.setLineDash(strokeDash);\n      this.ctx.lineDashOffset = strokeDashOffset;\n      this.ctx.lineJoin = strokeJoin;\n    }\n  }\n\n  public stroke(options: StrokeOptions) {\n    if (options.stroke) {\n      this.applyStrokeOptions(options);\n      this.ctx.stroke();\n    }\n  }\n\n  public applyFillOptions({ fill = undefined }: FillOptions) {\n    if (fill) {\n      this.ctx.fillStyle = fill;\n    }\n  }\n\n  public fill(options: FillOptions) {\n    if (options.fill) {\n      this.applyFillOptions(options);\n      this.ctx.fill();\n    }\n  }\n\n  public applyStrokeAndFillOptions(options: StrokeAndFillOptions) {\n    this.applyFillOptions(options);\n    this.applyStrokeOptions(options);\n  }\n\n  public strokeAndFill(options: StrokeAndFillOptions) {\n    this.fill(options);\n    this.stroke(options);\n  }\n\n  public getDebugStrokeOptions(\n    color: string = DEFAULT_DEBUG_COLOR,\n  ): StrokeOptions {\n    return { stroke: color, strokeWidth: HAIRLINE };\n  }\n\n  public debugStroke(color: string = DEFAULT_DEBUG_COLOR) {\n    this.stroke(this.getDebugStrokeOptions(color));\n  }\n\n  public fillText(text: string, position: Vector2, options: FillOptions = {}) {\n    this.applyFillOptions(options);\n    this.ctx.fillText(text, position.x, position.y);\n  }\n\n  public circle(\n    center: Vector2,\n    radius: number,\n    options: StrokeAndFillOptions,\n  ) {\n    this.beginPath();\n    this.arc(center, radius, 0, 2 * Math.PI);\n    this.strokeAndFill(options);\n  }\n\n  public ellipse(\n    center: Vector2,\n    radiusX: number,\n    radiusY: number,\n    options: StrokeAndFillOptions,\n  ) {\n    this.beginPath();\n    this.ctx.ellipse(center.x, center.y, radiusX, radiusY, 0, 0, Math.PI * 2);\n    this.strokeAndFill(options);\n  }\n\n  public debugLabel(\n    label: string | undefined,\n    position: Vector2,\n    color: string,\n  ) {\n    if (label) {\n      this.applyFillOptions({ fill: color });\n      this.fillText(label, position.add(LABEL_OFFSET));\n    }\n  }\n\n  public debugPointX(\n    position: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, position, color);\n\n    this.beginPath();\n    this.ctx.moveTo(\n      position.x - DEBUG_POINT_SIZE,\n      position.y - DEBUG_POINT_SIZE,\n    );\n    this.ctx.lineTo(\n      position.x + DEBUG_POINT_SIZE,\n      position.y + DEBUG_POINT_SIZE,\n    );\n    this.ctx.moveTo(\n      position.x + DEBUG_POINT_SIZE,\n      position.y - DEBUG_POINT_SIZE,\n    );\n    this.ctx.lineTo(\n      position.x - DEBUG_POINT_SIZE,\n      position.y + DEBUG_POINT_SIZE,\n    );\n    this.stroke({ strokeWidth: HAIRLINE, stroke: color });\n  }\n\n  public debugPointO(\n    position: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, position, color);\n\n    this.circle(position, DEBUG_POINT_SIZE, {\n      strokeWidth: HAIRLINE,\n      stroke: color,\n    });\n  }\n\n  public debugArrow(\n    start: Vector2,\n    end: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, Vector2.average([start, end]), color);\n\n    this.ctx.beginPath();\n    this.moveTo(start);\n    this.lineTo(end);\n\n    const vector = end.sub(start);\n    const arrowLeftPoint = vector\n      .rotate(-DEBUG_ARROW_ANGLE)\n      .withMagnitude(DEBUG_ARROW_SIZE)\n      .add(end);\n    const arrowRightPoint = vector\n      .rotate(+DEBUG_ARROW_ANGLE)\n      .withMagnitude(DEBUG_ARROW_SIZE)\n      .add(end);\n\n    this.moveTo(arrowLeftPoint);\n    this.lineTo(end);\n    this.lineTo(arrowRightPoint);\n    this.stroke({ strokeWidth: HAIRLINE, stroke: color });\n  }\n\n  public debugVectorAtPoint(\n    vector: Vector2,\n    base: Vector2,\n    options?: DebugOptions,\n  ) {\n    this.debugArrow(base, base.add(vector), options);\n  }\n\n  public polygon(\n    polygon: ReadonlyArray<Vector2>,\n    options: StrokeAndFillOptions = {},\n  ) {\n    this.beginPath();\n    this.moveTo(polygon[polygon.length - 1]);\n    for (const point of polygon) {\n      this.lineTo(point);\n    }\n    this.strokeAndFill(options);\n  }\n\n  public polyLine(points: ReadonlyArray<Vector2>, options: StrokeOptions = {}) {\n    this.beginPath();\n    this.moveTo(points[0]);\n    for (let i = 1; i < points.length; i++) {\n      this.lineTo(points[i]);\n    }\n    this.stroke(options);\n  }\n\n  public debugPolygon(\n    polygon: ReadonlyArray<Vector2>,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, polygon[0], color);\n    this.polygon(polygon, this.getDebugStrokeOptions(color));\n  }\n\n  public debugPolyLine(\n    polyLine: ReadonlyArray<Vector2>,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, polyLine[0], color);\n    this.polyLine(polyLine, this.getDebugStrokeOptions(color));\n  }\n  public debugQuadraticCurve(\n    from: Vector2,\n    control: Vector2,\n    to: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, from, color);\n    this.beginPath();\n    this.moveTo(from);\n    this.quadraticCurveTo(control, to);\n    this.stroke(this.getDebugStrokeOptions(color));\n  }\n  public debugBezierCurve(\n    from: Vector2,\n    control1: Vector2,\n    control2: Vector2,\n    to: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, from, color);\n    this.beginPath();\n    this.moveTo(from);\n    this.bezierCurveTo(control1, control2, to);\n    this.stroke(this.getDebugStrokeOptions(color));\n  }\n  public debugLine2(\n    line: Line2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, line.start, color);\n    this.debugArrow(line.start, line.end, { color, label });\n  }\n\n  public aabb(\n    aabb: AABB,\n    opts: StrokeAndFillOptions & { debug?: DebugOptions },\n  ) {\n    if (opts.debug) {\n      this.debugLabel(\n        opts.debug.label,\n        aabb.origin,\n        opts.debug.color || DEFAULT_DEBUG_COLOR,\n      );\n    }\n    this.ctx.beginPath();\n    this.ctx.rect(aabb.left, aabb.top, aabb.width, aabb.height);\n    this.strokeAndFill(opts);\n  }\n}\n"],"names":["$c3738fd0f859c4b7$var$DEFAULT_DEBUG_COLOR","$c3738fd0f859c4b7$var$LABEL_OFFSET","$39Hjj","default","$c3738fd0f859c4b7$var$HAIRLINE","$c3738fd0f859c4b7$var$DEBUG_ARROW_ANGLE","Math","PI","$c3738fd0f859c4b7$export$8c1f62922c980a1a","ctx","key","fill","this","applyFillOptions","fillRect","canvas","width","height","clearRect","beginPath","param","x","y","moveTo","lineTo","radius","startAngle","endAngle","anticlockwise","arc","p1","p2","arcTo","control","target","quadraticCurveTo","control1","control2","bezierCurveTo","strokeWidth","_strokeWidth","stroke","_strokeCap","strokeCap","_strokeDash","strokeDash","_strokeDashOffset","strokeDashOffset","_strokeJoin","strokeJoin","lineWidth","strokeStyle","lineCap","setLineDash","lineDashOffset","lineJoin","options","applyStrokeOptions","fillStyle","color","getDebugStrokeOptions","text","position","fillText","center","strokeAndFill","radiusX","radiusY","ellipse","label","add","_color","ref","debugLabel","circle","start","end","average","vector","sub","arrowLeftPoint","rotate","withMagnitude","arrowRightPoint","base","debugArrow","polygon","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","point","value","err","return","points","i","polyLine","from","to","line","aabb","opts","debug","origin","rect","left","top"],"version":3,"file":"index.d31341fe.js.map"}