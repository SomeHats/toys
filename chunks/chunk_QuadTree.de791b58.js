import{A as o}from"./chunk_AABB.22c2187c.js";const e=class{constructor(t,i){this._items=[],this._nextItemIndex=0,this._subdivisions=null,this.boundary=t,this._getPosition=i}insert(t){const i=this._getPosition(t);if(!this.boundary.contains(i))return!1;if(this._nextItemIndex<e.NODE_CAPACITY)return this._items[this._nextItemIndex]=t,this._nextItemIndex++,!0;const s=this._getSubdivisions();if(s[0].insert(t)||s[1].insert(t)||s[2].insert(t)||s[3].insert(t))return!0;throw new Error("Couldnt insert item")}remove(t){const i=this._getPosition(t);if(!this.boundary.contains(i))return!1;const s=this._items.indexOf(t);if(s!==-1)return this._items.splice(s,1),this._nextItemIndex--,!0;const n=this._subdivisions;return!!(n&&(n[0].remove(t)||n[1].remove(t)||n[2].remove(t)||n[3].remove(t)))}clear(){for(let t=0;t<this._nextItemIndex;t++)this._items[t]=void 0,this._nextItemIndex=0;this._subdivisions&&this._subdivisions.forEach(t=>t.clear())}findItemsInRect(t){const i=[];if(!this.boundary.intersects(t))return i;for(let n=0;n<this._nextItemIndex;n++){const r=this._items[n];if(r==null)continue;const u=this._getPosition(r);t.contains(u)&&i.push(r)}const s=this._subdivisions;return s&&(s[0].boundary.intersects(t)&&i.push(...s[0].findItemsInRect(t)),s[1].boundary.intersects(t)&&i.push(...s[1].findItemsInRect(t)),s[2].boundary.intersects(t)&&i.push(...s[2].findItemsInRect(t)),s[3].boundary.intersects(t)&&i.push(...s[3].findItemsInRect(t))),i}findItemsInCircle(t){return this.findItemsInRect(t.getBoundingBox()).filter(i=>t.containsPoint(this._getPosition(i)))}_getSubdivisions(){if(this._subdivisions)return this._subdivisions;const t=this.boundary.getCenter(),i=[new e(o.fromLeftTopRightBottom(this.boundary.left,this.boundary.top,t.x,t.y),this._getPosition),new e(o.fromLeftTopRightBottom(t.x,this.boundary.top,this.boundary.right,t.y),this._getPosition),new e(o.fromLeftTopRightBottom(this.boundary.left,t.y,t.x,this.boundary.bottom),this._getPosition),new e(o.fromLeftTopRightBottom(t.x,t.y,this.boundary.right,this.boundary.bottom),this._getPosition)];return this._subdivisions=i,i}};let h=e;h.NODE_CAPACITY=4;export{h as Q};
