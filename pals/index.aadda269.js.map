{"mappings":"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","sources":["src/pals/PalController.ts","src/pals/PalGeom.ts","src/lib/geom/Circle.ts","src/pals/PalLegGeom.ts","src/pals/PalRenderer.ts","src/lib/canvasShapeHelpers.ts","src/lib/geom/StraightPathSegment.ts","src/lib/geom/Line2.ts","src/lib/geom/CirclePathSegment.ts","src/pals/PalWalkAnimationController.ts","src/pals/PalConfig.ts","src/pals/colors.ts"],"sourcesContent":["import Component from '../lib/scene/Component';\nimport { constrain, normalizeAngle } from '../lib/utils';\nimport Vector2 from '../lib/geom/Vector2';\nimport Entity from '../lib/scene/Entity';\n\nconst MAX_SPEED = 80;\nconst ACCELERATION = 200;\nconst DECELERATION = 200;\n\nexport class PalControlData extends Component {\n  speed: number = 0;\n  position: Vector2;\n  heading: number = 0;\n  headingVelocity: number = 0;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.position = position;\n  }\n\n  getVelocity(): Vector2 {\n    return this.getHeadingVec().scale(this.speed);\n  }\n\n  private getHeadingVec(): Vector2 {\n    return Vector2.fromPolar(this.heading, 1);\n  }\n}\n\nexport class PalTargetController extends Component {\n  private data: PalControlData;\n  private target: Vector2;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.target = position;\n    this.data = entity.addComponent(PalControlData, position);\n  }\n\n  setTarget(newTarget: Vector2) {\n    this.target = newTarget;\n  }\n\n  update(dtMilliseconds: number) {\n    const dtSeconds = dtMilliseconds / 1000;\n    const angleToTarget = this.data.position.angleTo(this.target);\n\n    const distance = this.target.distanceTo(this.data.position);\n    if (distance > 15) {\n      this.accelerate(ACCELERATION, dtSeconds);\n    } else {\n      this.accelerate(-DECELERATION, dtSeconds);\n    }\n\n    if (distance > 10) {\n      const angleDelta = normalizeAngle(angleToTarget - this.data.heading);\n      const lastHeading = this.data.heading;\n      this.data.heading += angleDelta / 10;\n      this.data.headingVelocity =\n        normalizeAngle(this.data.heading - lastHeading) / dtSeconds;\n    } else {\n      this.data.headingVelocity = 0;\n    }\n  }\n\n  private accelerate(amt: number, dtSeconds: number) {\n    const lastSpeed = this.data.speed;\n    this.data.speed = constrain(\n      0,\n      MAX_SPEED,\n      this.data.speed + amt * dtSeconds,\n    );\n    const avgSpeed = (lastSpeed + this.data.speed) / 2;\n    this.data.position = this.data.position.add(\n      Vector2.fromPolar(this.data.heading, avgSpeed * dtSeconds),\n    );\n  }\n}\n\nexport class PalAbsoluteController extends Component {\n  private data: PalControlData;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.data = entity.addComponent(PalControlData, position);\n  }\n\n  setPosition(position: Vector2, heading: number, dtSeconds: number) {\n    const lastPosition = this.data.position;\n    const lastHeading = this.data.heading;\n\n    this.data.heading = heading;\n    this.data.headingVelocity =\n      normalizeAngle(this.data.heading - lastHeading) / dtSeconds;\n    this.data.speed = lastPosition.distanceTo(position) / dtSeconds;\n    this.data.position = position;\n  }\n}\n","import Component from '../lib/scene/Component';\nimport Entity from '../lib/scene/Entity';\nimport Circle from '../lib/geom/Circle';\nimport { PalControlData } from './PalController';\nimport { shuffle, flatten, times, lerp } from '../lib/utils';\nimport { PalConfig } from './PalConfig';\nimport PalLegGeom, { PalLegGeomUpdate } from './PalLegGeom';\nimport { assert } from '../lib/assert';\n\nconst HALF_PI = Math.PI / 2;\n\nexport type PalGeomUpdate = {\n  bobAmount: number;\n  legs: Array<PalLegGeomUpdate>;\n};\n\nexport interface PalAnimationController {\n  update(\n    dtMilliseconds: number,\n    controlData: PalControlData,\n    legs: Array<PalLegGeom>,\n  ): PalGeomUpdate;\n}\n\nexport default class PalGeom extends Component {\n  private controlData: PalControlData;\n  legs: Array<PalLegGeom>;\n  private animationController: PalAnimationController | null = null;\n  private bobAmount: number = 0;\n\n  constructor(entity: Entity, private config: PalConfig) {\n    super(entity);\n    this.controlData = entity.getComponent(PalControlData);\n    this.legs = shuffle(\n      flatten(\n        times(config.legPairs, n => {\n          const progress = (n + 1) / (config.legPairs + 1);\n          return [\n            new PalLegGeom(\n              this.controlData,\n              this,\n              config,\n              lerp(HALF_PI - 1, HALF_PI + 1, progress),\n            ),\n            new PalLegGeom(\n              this.controlData,\n              this,\n              config,\n              lerp(-HALF_PI + 1, -HALF_PI - 1, progress),\n            ),\n          ];\n        }),\n      ),\n    );\n  }\n\n  setAnimationController(animationController: PalAnimationController) {\n    this.animationController = animationController;\n  }\n\n  update(dtMilliseconds: number) {\n    if (this.animationController) {\n      const update = this.animationController.update(\n        dtMilliseconds,\n        this.controlData,\n        this.legs,\n      );\n      this.bobAmount = update.bobAmount;\n\n      assert(update.legs.length === this.legs.length);\n      this.legs.forEach((leg, i) => leg.update(update.legs[i]));\n    }\n  }\n\n  getBod(): Circle {\n    const bob = this.config.bodBob * this.bobAmount;\n\n    return new Circle(\n      this.controlData.position.x,\n      this.controlData.position.y - this.config.bodHeight - bob,\n      this.config.radius,\n    );\n  }\n}\n","// @flow\nimport Vector2 from './Vector2';\nimport AABB from './AABB';\n\nexport default class Circle {\n  readonly center: Vector2;\n  readonly radius: number;\n\n  constructor(x: number, y: number, radius: number) {\n    this.center = new Vector2(x, y);\n    this.radius = radius;\n    Object.freeze(this);\n  }\n\n  get circumference(): number {\n    return 2 * Math.PI * this.radius;\n  }\n\n  getBoundingBox(): AABB {\n    return new AABB(\n      new Vector2(this.center.x, this.center.y),\n      new Vector2(this.radius * 2, this.radius * 2),\n    );\n  }\n\n  // debugDraw(color: string) {\n  //   const ctx: CanvasRenderingContext2D = window.debugContext;\n  //   ctx.strokeStyle = color;\n  //   ctx.lineWidth = 1;\n  //   ctx.beginPath();\n  //   ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, false);\n  //   ctx.stroke();\n  // }\n\n  pointOnCircumference(radians: number): Vector2 {\n    return new Vector2(\n      this.center.x + Math.cos(radians) * this.radius,\n      this.center.y + Math.sin(radians) * this.radius,\n    );\n  }\n\n  containsPoint(point: Vector2): boolean {\n    return point.distanceTo(this.center) < this.radius;\n  }\n\n  intersectsCircle(other: Circle): boolean {\n    return this.center.distanceTo(other.center) < this.radius + other.radius;\n  }\n\n  withRadius(radius: number): Circle {\n    return new Circle(this.center.x, this.center.y, radius);\n  }\n}\n","import PalGeom from './PalGeom';\nimport { PalConfig } from './PalConfig';\nimport Vector2 from '../lib/geom/Vector2';\nimport { PalControlData } from './PalController';\nimport { lerp } from '../lib/utils';\n\nconst getLegRadius = ({ radius, hipHeight, legWidth }: PalConfig) =>\n  Math.sqrt(radius * radius - (radius - hipHeight) * (radius - hipHeight)) -\n  legWidth;\n\nexport type PalLegGeomUpdate = {\n  footXY: Vector2;\n  footProjectionOrigin: Vector2;\n  liftAmount: number;\n};\n\nexport default class PalLegGeom {\n  hipRadius: number;\n  kneeRadius: number;\n  floorRadius: number;\n\n  footXY: Vector2;\n  footOrigin: Vector2;\n  liftAmount: number = 0;\n\n  constructor(\n    private palData: PalControlData,\n    private palGeom: PalGeom,\n    private config: PalConfig,\n    public angleOffset: number,\n  ) {\n    this.hipRadius = getLegRadius(config);\n    this.kneeRadius = getLegRadius(config) * config.kneeScale;\n    this.floorRadius = getLegRadius(config);\n\n    this.footXY = this.getIdealFootRestingXY();\n    this.footOrigin = this.getIdealFootRestingXY();\n  }\n\n  update(update: PalLegGeomUpdate) {\n    this.footXY = update.footXY;\n    this.footOrigin = update.footProjectionOrigin;\n    this.liftAmount = update.liftAmount;\n  }\n\n  getIdealFootRestingXY(): Vector2 {\n    return Vector2.fromPolar(\n      this.palData.heading + this.angleOffset,\n      this.floorRadius,\n    ).add(this.palData.position);\n  }\n\n  getFootXY(): Vector2 {\n    return this.footXY;\n  }\n\n  getFootZ(): number {\n    return lerp(0, this.getHipZ() * this.config.legMaxLift, this.liftAmount);\n  }\n\n  getFootOrigin(): Vector2 {\n    return this.footOrigin;\n  }\n\n  getKneeXY(): Vector2 {\n    return this.palData.position\n      .add(\n        Vector2.fromPolar(\n          this.palData.heading + this.angleOffset,\n          this.kneeRadius,\n        ),\n      )\n      .add(\n        Vector2.fromPolar(\n          this.palData.heading,\n          this.liftAmount * this.config.kneeMaxOut,\n        ),\n      );\n  }\n\n  getKneeZ(): number {\n    return (this.getFootZ() + this.getHipZ()) / 2;\n  }\n\n  getKneeOrigin(): Vector2 {\n    return this.getHipOrigin().lerp(this.getFootOrigin(), 0.5);\n  }\n\n  getHipXY(): Vector2 {\n    return this.palData.position.add(\n      Vector2.fromPolar(\n        this.palData.heading + this.angleOffset,\n        this.hipRadius,\n      ),\n    );\n    // return this._hipEllipse\n    //   .pointOnCircumference(this.angle)\n    //   .add(this.palData.bod.center);\n  }\n\n  getHipZ(): number {\n    const bod = this.palGeom.getBod();\n    return (\n      this.palData.position.y -\n      bod.center.y -\n      (bod.radius - this.config.hipHeight)\n    );\n  }\n\n  getHipOrigin(): Vector2 {\n    return this.palData.position;\n  }\n}\n","import Component from '../lib/scene/Component';\nimport { PalControlData } from './PalController';\nimport Entity from '../lib/scene/Entity';\nimport PalGeom from './PalGeom';\nimport * as ShapeHelpers from '../lib/canvasShapeHelpers';\nimport { normalizeAngle, constrain } from '../lib/utils';\nimport Circle from '../lib/geom/Circle';\nimport { PalConfig } from './PalConfig';\nimport PalLegGeom from './PalLegGeom';\nimport Vector2 from '../lib/geom/Vector2';\n\nconst Y_SCALE = 0.3;\nconst HALF_PI = Math.PI / 2;\n\nexport default class PalRenderer extends Component {\n  private data: PalControlData;\n  private geom: PalGeom;\n\n  constructor(entity: Entity, private config: PalConfig) {\n    super(entity);\n    this.data = entity.getComponent(PalControlData);\n    this.geom = entity.getComponent(PalGeom);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const heading = normalizeAngle(this.data.heading);\n\n    ctx.setLineDash([]);\n    ctx.beginPath();\n\n    const bod = this.geom.getBod();\n    ctx.ellipse(\n      this.data.position.x,\n      this.data.position.y,\n      bod.radius * 0.8,\n      bod.radius * 0.8 * 0.3,\n      0,\n      0,\n      2 * Math.PI,\n    );\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n    ctx.fill();\n\n    this.geom.legs\n      .filter(l => normalizeAngle(l.angleOffset + heading) < 0)\n      .forEach(leg => this.drawLeg(ctx, leg));\n    this.geom.legs\n      .filter(l => normalizeAngle(l.angleOffset + heading) >= 0)\n      .forEach(leg => this.drawLeg(ctx, leg));\n    this.drawBod(ctx, bod);\n  }\n\n  private drawLeg(ctx: CanvasRenderingContext2D, leg: PalLegGeom) {\n    ctx.beginPath();\n\n    const angle = this.data.heading + leg.angleOffset;\n\n    const colorDarkenAmount = constrain(\n      0,\n      1,\n      Math.abs(normalizeAngle(-HALF_PI - angle) / HALF_PI),\n    );\n    const legColor = this.config.color.darken(\n      0.2 * (1 - colorDarkenAmount * colorDarkenAmount),\n    );\n\n    const hip = this.projectZ(\n      leg.getHipXY(),\n      leg.getHipZ(),\n      leg.getHipOrigin(),\n    );\n    const knee = this.projectZ(\n      leg.getKneeXY(),\n      leg.getKneeZ(),\n      leg.getKneeOrigin(),\n    );\n    const foot = this.projectZ(\n      leg.getFootXY(),\n      leg.getFootZ(),\n      leg.getFootOrigin(),\n    );\n\n    ctx.moveTo(hip.x, hip.y);\n    ctx.quadraticCurveTo(knee.x, knee.y, foot.x, foot.y);\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = legColor.toString();\n    ctx.lineWidth = this.config.legWidth;\n    ctx.stroke();\n  }\n\n  private drawBod(ctx: CanvasRenderingContext2D, bod: Circle) {\n    ctx.save();\n    ctx.beginPath();\n    ShapeHelpers.circle(ctx, bod.center.x, bod.center.y, this.config.radius);\n    ctx.fillStyle = this.config.color.toString();\n    ctx.fill();\n    ctx.clip();\n\n    const faceX =\n      (normalizeAngle(HALF_PI - this.data.heading) / HALF_PI) *\n      this.config.radius;\n\n    // EYES\n    ctx.beginPath();\n    ShapeHelpers.circle(\n      ctx,\n      faceX + bod.center.x + this.config.eyeX,\n      bod.center.y - this.config.eyeY,\n      this.config.eyeRadius,\n    );\n    ShapeHelpers.circle(\n      ctx,\n      faceX + bod.center.x - this.config.eyeX,\n      bod.center.y - this.config.eyeY,\n      this.config.eyeRadius,\n    );\n    ctx.fillStyle = this.config.color.darken(0.5).toString();\n    ctx.fill();\n\n    // MOUTH\n    ctx.beginPath();\n    ctx.moveTo(\n      faceX + bod.center.x - this.config.mouthWidth,\n      bod.center.y - this.config.mouthY,\n    );\n    ctx.quadraticCurveTo(\n      faceX + bod.center.x,\n      bod.center.y - this.config.mouthY + this.config.mouthSmile,\n      faceX + bod.center.x + this.config.mouthWidth,\n      bod.center.y - this.config.mouthY,\n    );\n    ctx.lineWidth = this.config.mouthThickness;\n    ctx.strokeStyle = this.config.color.darken(0.5).toString();\n    ctx.stroke();\n\n    // BUTT\n    ctx.beginPath();\n    this.makeButtLine(ctx, bod, faceX + this.config.radius * 2);\n    this.makeButtLine(ctx, bod, faceX - this.config.radius * 2);\n    ctx.lineWidth = this.config.buttThickness;\n    ctx.strokeStyle = this.config.color.darken(0.3).toString();\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  private makeButtLine(\n    ctx: CanvasRenderingContext2D,\n    bod: Circle,\n    buttX: number,\n  ) {\n    ctx.moveTo(buttX * 1.6 + bod.center.x, bod.center.y + this.config.buttTop);\n    ctx.quadraticCurveTo(\n      buttX * 1.7 + bod.center.x,\n      bod.center.y + (this.config.buttTop + this.config.buttBottom) * 0.65,\n      buttX + bod.center.x,\n      bod.center.y + this.config.buttBottom,\n    );\n  }\n\n  private projectZ(xy: Vector2, z: number, origin: Vector2): Vector2 {\n    return new Vector2(xy.x, origin.y - z + (xy.y - origin.y) * Y_SCALE);\n  }\n}\n","// @flow\nimport Path from './geom/Path';\nimport StraightPathSegment from './geom/StraightPathSegment';\nimport CirclePathSegment from './geom/CirclePathSegment';\n\nexport function circle(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  radius: number,\n) {\n  ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n}\n\nexport function path(ctx: CanvasRenderingContext2D, path: Path) {\n  if (path.segments.length) {\n    ctx.moveTo(path.segments[0].getStart().x, path.segments[0].getStart().y);\n  }\n\n  for (const segment of path.segments) {\n    if (segment instanceof StraightPathSegment) {\n      ctx.lineTo(segment.getEnd().x, segment.getEnd().y);\n    } else if (segment instanceof CirclePathSegment) {\n      ctx.arc(\n        segment.circle.center.x,\n        segment.circle.center.y,\n        segment.circle.radius,\n        segment.startAngle,\n        segment.endAngle,\n        segment.isAnticlockwise,\n      );\n    } else {\n      throw new Error(`Unknown path segment type: ${segment.toString()}`);\n    }\n  }\n}\n","// @flow\nimport { constrain } from '../utils';\nimport Vector2 from './Vector2';\nimport { PathSegment } from './Path';\nimport Line2 from './Line2';\n\nexport default class StraightPathSegment implements PathSegment {\n  readonly line: Line2;\n  private readonly delta: Vector2;\n\n  constructor(start: Vector2, end: Vector2) {\n    this.line = new Line2(start, end);\n    this.delta = this.line.getDelta();\n    Object.freeze(this);\n  }\n\n  getStart(): Vector2 {\n    return this.line.start;\n  }\n\n  getEnd(): Vector2 {\n    return this.line.end;\n  }\n\n  getDelta(): Vector2 {\n    return this.delta;\n  }\n\n  getLength(): number {\n    return this.delta.magnitude;\n  }\n\n  get angle(): number {\n    return this.delta.angle;\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const constrainedPosition = constrain(0, this.getLength(), position);\n    return this.delta.withMagnitude(constrainedPosition).add(this.line.start);\n  }\n\n  getAngleAtPosition(): number {\n    return this.delta.angle;\n  }\n}\n","// @flow\nimport { assert } from '../assert';\nimport Vector2 from './Vector2';\n\nconst isSlopeVertical = (slope: number) =>\n  slope === Infinity || slope === -Infinity;\n\nexport default class Line2 {\n  static fromSlopeAndDisplacement(slope: number, displacement: number) {\n    assert(\n      !isSlopeVertical(slope),\n      'cannot create vertical line from displacement',\n    );\n\n    const start = new Vector2(0, displacement);\n    const end = new Vector2(1, slope + displacement);\n    return new Line2(start, end);\n  }\n\n  static fromSlopeAndPoint(slope: number, point: Vector2): Line2 {\n    if (isSlopeVertical(slope)) {\n      return new Line2(point, new Vector2(point.x, point.y + 1));\n    }\n\n    const displacement = point.y - point.x * slope;\n    return Line2.fromSlopeAndDisplacement(slope, displacement);\n  }\n\n  readonly start: Vector2;\n  readonly end: Vector2;\n\n  constructor(a: Vector2, b: Vector2) {\n    this.start = a;\n    this.end = b;\n  }\n\n  getDelta(): Vector2 {\n    return this.end.sub(this.start);\n  }\n\n  get slope(): number {\n    return (this.end.y - this.start.y) / (this.end.x - this.start.x);\n  }\n\n  get displacement(): number {\n    return this.start.y - this.start.x * this.slope;\n  }\n\n  get isVertical(): boolean {\n    return isSlopeVertical(this.slope);\n  }\n\n  get verticalX(): number {\n    assert(this.isVertical, 'verticalX is not defined on non vertical lines');\n    return this.start.x;\n  }\n\n  get perpendicularSlope(): number {\n    if (this.isVertical) return 0;\n    return -1 / this.slope;\n  }\n\n  isParallelTo(other: Line2): boolean {\n    return (this.isVertical && other.isVertical) || this.slope === other.slope;\n  }\n\n  perpendicularLineThroughPoint(point: Vector2): Line2 {\n    return Line2.fromSlopeAndPoint(this.perpendicularSlope, point);\n  }\n\n  pointAtIntersectionWith(other: Line2): Vector2 {\n    assert(!this.isParallelTo(other), 'parallel lines do not intersect');\n\n    let x;\n    if (this.isVertical) {\n      x = this.verticalX;\n    } else if (other.isVertical) {\n      x = other.verticalX;\n    } else {\n      x = (this.displacement - other.displacement) / (other.slope - this.slope);\n    }\n\n    const y = this.isVertical\n      ? other.slope * x + other.displacement\n      : this.slope * x + this.displacement;\n\n    return new Vector2(x, y);\n  }\n}\n","// @flow\nimport { constrain, mapRange } from '../utils';\nimport Vector2 from './Vector2';\nimport Circle from './Circle';\nimport { PathSegment } from './Path';\n\nexport default class CirclePathSegment implements PathSegment {\n  readonly circle: Circle;\n  readonly startAngle: number;\n  readonly endAngle: number;\n\n  constructor(\n    center: Vector2,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n  ) {\n    this.circle = new Circle(center.x, center.y, radius);\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    Object.freeze(this);\n  }\n\n  getStart(): Vector2 {\n    return this.circle.pointOnCircumference(this.startAngle);\n  }\n\n  getEnd(): Vector2 {\n    return this.circle.pointOnCircumference(this.endAngle);\n  }\n\n  get angleDifference(): number {\n    return Math.atan2(\n      Math.sin(this.endAngle - this.startAngle),\n      Math.cos(this.endAngle - this.startAngle),\n    );\n  }\n\n  getLength(): number {\n    const proportion = Math.abs(this.angleDifference) / (Math.PI * 2);\n    return this.circle.circumference * proportion;\n  }\n\n  get isAnticlockwise(): boolean {\n    return this.angleDifference < 0;\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const angle = mapRange(\n      0,\n      this.getLength(),\n      this.startAngle,\n      this.startAngle + this.angleDifference,\n      constrain(0, this.getLength(), position),\n    );\n    return this.circle.pointOnCircumference(angle);\n  }\n\n  getAngleAtPosition(position: number): number {\n    if (this.isAnticlockwise) {\n      return (\n        mapRange(\n          0,\n          this.getLength(),\n          this.startAngle,\n          this.startAngle + this.angleDifference,\n          constrain(0, this.getLength(), position),\n        ) -\n        Math.PI / 2\n      );\n    } else {\n      return (\n        mapRange(\n          0,\n          this.getLength(),\n          this.startAngle,\n          this.startAngle + this.angleDifference,\n          constrain(0, this.getLength(), position),\n        ) +\n        Math.PI / 2\n      );\n    }\n  }\n}\n","import { PalAnimationController, PalGeomUpdate } from './PalGeom';\nimport { PalControlData } from './PalController';\nimport PalLegGeom, { PalLegGeomUpdate } from './PalLegGeom';\nimport Vector2 from '../lib/geom/Vector2';\nimport { PalConfig } from './PalConfig';\nimport { constrain, mapRange } from '../lib/utils';\nimport { assert } from '../lib/assert';\n\ntype LegState = {\n  lastFootOnFloorXY: Vector2;\n  lastFootOnFloorPalPosition: Vector2;\n  stepProgress: number;\n  restTimer: number;\n  currentStepMaxLift: number;\n};\n\nfunction isStepping({ stepProgress }: LegState): boolean {\n  return stepProgress > 0;\n}\n\nfunction isResting({ restTimer }: LegState): boolean {\n  return restTimer > 0;\n}\n\nexport default class PalWalkAnimationController\n  implements PalAnimationController {\n  private legStates = new Map<PalLegGeom, LegState>();\n\n  constructor(private config: PalConfig) {}\n\n  update(\n    dtMilliseconds: number,\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n  ): PalGeomUpdate {\n    const dtSeconds = dtMilliseconds / 1000;\n\n    for (const leg of legs) {\n      this.updateLegState(dtSeconds, pal, legs, leg);\n    }\n    const legUpdates = legs.map(leg => this.getLegUpdate(pal, leg));\n\n    const totalLift = legUpdates.reduce(\n      (sum, update) => sum + update.liftAmount,\n      0,\n    );\n    const avgLift = totalLift / legs.length;\n\n    return {\n      bobAmount: avgLift,\n      legs: legUpdates,\n    };\n  }\n\n  private canLiftLeg(\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n    leg: PalLegGeom,\n  ): boolean {\n    assert(legs.includes(leg), 'whos leg even is this');\n    const enoughLegsOnFloor =\n      legs.filter(l => l !== leg && !isStepping(this.getLegState(pal, leg)))\n        .length > Math.floor(Math.log(legs.length));\n\n    const anyStepsJustStarted = legs.some(leg => {\n      const state = this.getLegState(pal, leg);\n      return (\n        state.stepProgress > 0 && state.stepProgress < 1 / (legs.length / 2)\n      );\n    });\n\n    return enoughLegsOnFloor && !anyStepsJustStarted;\n  }\n\n  private updateLegState(\n    dtSeconds: number,\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n    leg: PalLegGeom,\n  ) {\n    const state = this.getLegState(pal, leg);\n\n    state.restTimer = constrain(\n      0,\n      this.config.stepRestDuration,\n      state.restTimer - dtSeconds,\n    );\n    if (isResting(state)) return;\n\n    if (isStepping(state)) {\n      state.stepProgress = constrain(\n        0,\n        1,\n        state.stepProgress + dtSeconds / this.config.stepDuration,\n      );\n\n      if (state.stepProgress === 1) {\n        state.lastFootOnFloorXY = this.getFootXY(pal, leg, state);\n        state.lastFootOnFloorPalPosition = pal.position;\n        state.stepProgress = 0;\n        state.restTimer = this.config.stepDuration;\n      }\n    } else {\n      const footLeanDistance = leg\n        .getFootXY()\n        .distanceTo(leg.getIdealFootRestingXY());\n      if (\n        footLeanDistance > this.config.stepThreshold &&\n        this.canLiftLeg(pal, legs, leg)\n      ) {\n        state.currentStepMaxLift = constrain(\n          0,\n          1,\n          mapRange(\n            this.config.stepThreshold,\n            this.config.fullStepDistance,\n            0.1,\n            1,\n            footLeanDistance,\n          ),\n        );\n        state.stepProgress = constrain(\n          0,\n          1,\n          state.stepProgress + dtSeconds / this.config.stepDuration,\n        );\n      }\n    }\n  }\n\n  private getInitialLegState(pal: PalControlData, leg: PalLegGeom): LegState {\n    return {\n      lastFootOnFloorXY: leg.getIdealFootRestingXY(),\n      lastFootOnFloorPalPosition: pal.position,\n      stepProgress: 0,\n      restTimer: 0,\n      currentStepMaxLift: 1,\n    };\n  }\n\n  private getLegState(pal: PalControlData, leg: PalLegGeom): LegState {\n    const state = this.legStates.get(leg);\n    if (state) {\n      return state;\n    }\n\n    const initialState = this.getInitialLegState(pal, leg);\n    this.legStates.set(leg, initialState);\n    return initialState;\n  }\n\n  private getLegUpdate(pal: PalControlData, leg: PalLegGeom): PalLegGeomUpdate {\n    const state = this.getLegState(pal, leg);\n    return {\n      footXY: this.getFootXY(pal, leg, state),\n      footProjectionOrigin: this.getFootOrigin(pal, leg, state),\n      liftAmount: this.getLegLiftAmount(state),\n    };\n  }\n\n  private getFootXY(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    if (isStepping(state)) {\n      const start = state.lastFootOnFloorXY;\n      const target = this.getPredictedIdealFootXYAtEndOfOfStep(pal, leg, state);\n      return start.lerp(target, state.stepProgress);\n    }\n\n    return state.lastFootOnFloorXY;\n  }\n\n  private getFootOrigin(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    if (isStepping(state)) {\n      return state.lastFootOnFloorPalPosition.lerp(\n        pal.position,\n        state.stepProgress,\n      );\n    }\n\n    return state.lastFootOnFloorPalPosition;\n  }\n\n  private getPredictedIdealFootXYAtEndOfOfStep(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    const timeRemaining = (1.4 - state.stepProgress) * this.config.stepDuration;\n\n    const predictedPosition = pal\n      .getVelocity()\n      .scale(timeRemaining)\n      .add(pal.position);\n\n    const predictedHeading = pal.heading + pal.headingVelocity * timeRemaining;\n\n    return Vector2.fromPolar(\n      predictedHeading + leg.angleOffset,\n      leg.floorRadius,\n    ).add(predictedPosition);\n  }\n\n  private getLegLiftAmount({\n    stepProgress,\n    currentStepMaxLift,\n  }: LegState): number {\n    return Math.sin(stepProgress * Math.PI) * currentStepMaxLift;\n  }\n}\n","import Color from 'color';\nimport { varyRelative, varyAbsolute, random, randomInt } from '../lib/utils';\nimport { BLUE } from './colors';\n\nexport type PalConfig = {\n  radius: number;\n  bodHeight: number;\n  bodBob: number;\n  eyeY: number;\n  eyeX: number;\n  eyeRadius: number;\n  mouthThickness: number;\n  mouthY: number;\n  mouthWidth: number;\n  mouthSmile: number;\n  buttTop: number;\n  buttBottom: number;\n  buttThickness: number;\n  color: Color;\n  hipHeight: number;\n  kneeScale: number;\n  legMaxLift: number;\n  kneeMaxOut: number;\n  stepDuration: number;\n  stepRestDuration: number;\n  stepThreshold: number;\n  fullStepDistance: number;\n  legWidth: number;\n  legPairs: number;\n};\n\nexport const classicPalConfig: PalConfig = {\n  radius: 14,\n  bodHeight: 25,\n  bodBob: 15,\n  eyeY: 6,\n  eyeX: 5,\n  eyeRadius: 2,\n  mouthThickness: 2,\n  mouthY: 2,\n  mouthWidth: 8,\n  mouthSmile: 4,\n  buttTop: 6,\n  buttBottom: 12,\n  buttThickness: 1.4,\n  color: BLUE.lighten(0.2),\n  hipHeight: 10,\n  kneeScale: 1.3,\n  legMaxLift: 0.3,\n  kneeMaxOut: 14,\n  stepDuration: 0.2,\n  stepRestDuration: 0.2,\n  stepThreshold: 0.2,\n  fullStepDistance: 20,\n  legWidth: 4,\n  legPairs: 1,\n};\n\nexport const generateRandomPalConfig = (): PalConfig => {\n  const radius = varyRelative(14, 0.2);\n  const hipHeight = varyRelative(radius * 0.7, 0.3);\n  const bodHeight = varyRelative(radius * 2, 0.3);\n  const legLength = bodHeight - (radius - hipHeight); // typical: 24\n\n  return {\n    radius,\n    bodHeight,\n    bodBob: varyRelative(radius, 0.2),\n    eyeY: varyRelative(radius * 0.5, 0.2),\n    eyeX: varyRelative(radius * 0.4, 0.3),\n    eyeRadius: varyRelative(radius * 0.15, 0.4),\n    mouthThickness: varyRelative(radius * 0.15, 0.4),\n    mouthY: varyAbsolute(0, radius * 0.2),\n    mouthWidth: varyRelative(radius * 0.5, 0.3),\n    mouthSmile: varyRelative(radius * 0.3, 0.3),\n    buttTop: varyRelative(radius * 0.4, 0.2),\n    buttBottom: varyRelative(radius * 0.85, 0.15),\n    buttThickness: varyRelative(radius * 0.1, 0.5),\n    color: BLUE.lighten(random(-0.2, 0.2))\n      .saturate(random(-0.2, 0.2))\n      .rotate(random(-10, 10)),\n    hipHeight,\n    kneeScale: varyAbsolute(1.3, 0.3),\n    legMaxLift: random(0.2, 0.5),\n    kneeMaxOut: varyRelative(legLength * 0.6, 0.4),\n    stepDuration: varyRelative(legLength * 0.01, 0.4),\n    stepRestDuration: varyRelative(legLength * 0.0083, 0.4),\n    stepThreshold: varyRelative(legLength * 0.01, 0.4),\n    fullStepDistance: varyRelative(legLength * 0.7, 0.4),\n    legWidth: varyRelative(radius * 0.3, 0.4),\n    legPairs: randomInt(1, 4),\n  };\n};\n","import Color from 'color';\n\n// https://coolors.co/f8ffe5-06d6a0-1b9aaa-ef476f-ffc43d\nexport const LIGHT_BG = new Color('#F8FFE5');\nexport const TEAL = new Color('#06D6A0');\nexport const BLUE = new Color('#1B9AAA');\nexport const RED = new Color('#EF476F');\nexport const YELLOW = new Color('#FFC43D');\n"],"names":["$27b42f6817130e22$export$af6a0ce085ef7632","Component","entity","position","call","this","speed","heading","headingVelocity","key","getHeadingVec","scale","$39Hjj","default","fromPolar","$3Nswo","$27b42f6817130e22$export$7f91c1b5fe2069f9","target","data","addComponent","newTarget","dtMilliseconds","dtSeconds","angleToTarget","angleTo","distance","distanceTo","accelerate","angleDelta","$8qLe2","normalizeAngle","lastHeading","amt","lastSpeed","constrain","avgSpeed","add","$27b42f6817130e22$export$ca0888e697597df4","lastPosition","$14b3c2a1d01ea7a9$var$HALF_PI","Math","PI","$14b3c2a1d01ea7a9$export$2e2bcd8739ae039","config","animationController","bobAmount","controlData","getComponent","$1js6q","PalControlData","legs","shuffle","flatten","times","legPairs","n","progress","$i3155","_this","$8TSCy","assertThisInitialized","lerp","update1","update","$8OvEy","assert","length","forEach","leg","i","bob","bodBob","$eJCSX","x","y","bodHeight","radius","$17c4be4d5edfd707$export$2e2bcd8739ae039","center","Object","freeze","$71uov","radians","cos","sin","point","other","$64c1a0155cd064ba$var$getLegRadius","param","hipHeight","legWidth","sqrt","$64c1a0155cd064ba$export$2e2bcd8739ae039","palData","palGeom","angleOffset","liftAmount","hipRadius","kneeRadius","kneeScale","floorRadius","footXY","getIdealFootRestingXY","footOrigin","footProjectionOrigin","getHipZ","legMaxLift","kneeMaxOut","getFootZ","getHipOrigin","getFootOrigin","bod","getBod","$565b68aaa9b1f32d$var$HALF_PI","$565b68aaa9b1f32d$export$2e2bcd8739ae039","geom","$7oj37","ctx","setLineDash","beginPath","ellipse","fillStyle","fill","filter","l","drawLeg","_this1","drawBod","angle","colorDarkenAmount","abs","legColor","color","darken","hip","projectZ","getHipXY","knee","getKneeXY","getKneeZ","getKneeOrigin","foot","getFootXY","moveTo","quadraticCurveTo","lineCap","strokeStyle","toString","lineWidth","stroke","save","$6IKqx","circle","clip","faceX","eyeX","eyeY","eyeRadius","mouthWidth","mouthY","mouthSmile","mouthThickness","makeButtLine","buttThickness","restore","buttX","buttTop","buttBottom","xy","z","origin","$6dfbd3e608b14c78$export$e1d786d2f707b414","arc","$6dfbd3e608b14c78$export$bb654e07daaf8c3a","path","segments","getStart","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","segment","value","$6SQqk","lineTo","getEnd","$7Tktm","Error","concat","startAngle","endAngle","isAnticlockwise","err","return","$338f5ed02b39930b$export$2e2bcd8739ae039","start","end","line","$eYUEV","delta","getDelta","magnitude","constrainedPosition","getLength","withMagnitude","$ed99e959cca51b61$var$isSlopeVertical","slope","Infinity","$ed99e959cca51b61$export$2e2bcd8739ae039","a","b","sub","isVertical","fromSlopeAndPoint","perpendicularSlope","isParallelTo","verticalX","displacement","fromSlopeAndDisplacement","$e02ffcf469d66930$export$2e2bcd8739ae039","pointOnCircumference","atan2","proportion","angleDifference","circumference","mapRange","$9dd30e9fc6708b04$var$isStepping","stepProgress","$9dd30e9fc6708b04$export$2e2bcd8739ae039","legStates","Map","pal","updateLegState","legUpdates","map","getLegUpdate","reduce","sum","leg1","includes","enoughLegsOnFloor","getLegState","floor","log","anyStepsJustStarted","some","state","restTimer","stepRestDuration","stepDuration","lastFootOnFloorXY","lastFootOnFloorPalPosition","footLeanDistance","stepThreshold","canLiftLeg","currentStepMaxLift","fullStepDistance","get","initialState","getInitialLegState","set","getLegLiftAmount","getPredictedIdealFootXYAtEndOfOfStep","timeRemaining","predictedPosition","getVelocity","predictedHeading","$13ef68c0b32f0aae$export$8f4ea176c3dd079d","$5MVTg","BLUE","lighten","varyRelative","legLength","varyAbsolute","random","saturate","rotate","randomInt","$fbababb791a60609$export$738c3b9a44c87ecc","$parcel$interopDefault","$9AT65"],"version":3,"file":"index.aadda269.js.map"}