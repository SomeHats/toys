{"mappings":"i4BASaA,EAAc,SAAAC,yBAAdD,EAMCE,EAAgBC,sCANjBH,wDAAAA,GAAcI,KAAAC,KAOjBH,KANRI,MAAgB,IAEhBC,QAAkB,IAClBC,gBAA0B,IAInBL,SAAWA,sBARPH,EAAcC,iBAAdD,EAAc,EAWzBS,IAAW,2CACGC,gBAAgBC,MAAKN,KAAMC,UAGjCG,IAAa,wCACZG,EAAAC,QAAQC,UAAST,KAAME,QAAS,OAhB9BP,EAAc,CAASe,EAAAF,SAoBvBG,EAAmB,SAAAf,yBAAnBe,EAICd,EAAgBC,sCAJjBa,wDAAAA,GAAmBZ,KAAAC,KAKtBH,KACDe,OAASd,IACTe,KAAOhB,EAAOiB,aAAanB,EAAgBG,uBAPvCa,EAAmBf,iBAAnBe,EAAmB,EAU9BP,IAAS,2BAACW,QACHH,OAASG,KAGhBX,IAAM,wBAACY,GACL,IAAMC,EAAYD,EAAiB,IAC7BE,EAAalB,KAAQa,KAAKf,SAASqB,QAAOnB,KAAMY,QAEhDQ,EAAQpB,KAAQY,OAAOS,WAAUrB,KAAMa,KAAKf,UAOlD,GANIsB,EAAW,GAAEpB,KACVsB,WA3CU,IA2CeL,QAEzBK,YA5CU,IA4CgBL,GAG7BG,EAAW,GAAI,CACjB,IAAMG,EAAaC,EAAAC,eAAeP,EAAalB,KAAQa,KAAKX,SACtDwB,EAAW1B,KAAQa,KAAKX,aACzBW,KAAKX,SAAWqB,EAAa,QAC7BV,KAAKV,gBACRqB,EAAAC,eAAczB,KAAMa,KAAKX,QAAUwB,GAAeT,OACrDjB,KACMa,KAAKV,gBAAkB,KAIxBC,IAAU,4BAACuB,EAAaV,GAC9B,IAAMW,EAAS5B,KAAQa,KAAKZ,WACvBY,KAAKZ,MAAQuB,EAAAK,UAChB,EA/DY,GAgEH7B,KACJa,KAAKZ,MAAQ0B,EAAMV,GAE1B,IAAMa,GAAYF,EAAS5B,KAAQa,KAAKZ,OAAS,OAC5CY,KAAKf,SAAQE,KAAQa,KAAKf,SAASiC,IACtCxB,EAAAC,QAAQC,UAAST,KAAMa,KAAKX,QAAS4B,EAAWb,QA7CzCN,EAAmB,CAASD,EAAAF,SAkD5BwB,EAAqB,SAAApC,yBAArBoC,EAGCnC,EAAgBC,sCAHjBkC,wDAAAA,GAAqBjC,KAAAC,KAIxBH,KACDgB,KAAOhB,EAAOiB,aAAanB,EAAgBG,uBALvCkC,EAAqBpC,iBAArBoC,EAAqB,EAQhC5B,IAAW,6BAACN,EAAmBI,EAAiBe,GAC9C,IAAMgB,EAAYjC,KAAQa,KAAKf,SACzB4B,EAAW1B,KAAQa,KAAKX,aAEzBW,KAAKX,QAAUA,OACfW,KAAKV,gBACRqB,EAAAC,eAAczB,KAAMa,KAAKX,QAAUwB,GAAeT,OAC/CJ,KAAKZ,MAAQgC,EAAaZ,WAAWvB,GAAYmB,OACjDJ,KAAKf,SAAWA,MAhBZkC,EAAqB,CAAStB,EAAAF,2LCtErC0B,EAAUC,KAAKC,GAAK,EAeLC,EAAO,SAAAzC,yBAAPyC,EAMPxC,EAAwByC,sCANjBD,wDAAAA,GAAOtC,KAAAC,KAOlBH,KAD4ByC,OAAAA,IAH5BC,oBAAqD,OACrDC,UAAoB,IAIrBC,YAAc5C,EAAO6C,aAAaC,EAAAC,kBAClCC,KAAOrB,EAAAsB,QACVtB,EAAAuB,QACEvB,EAAAwB,MAAMV,EAAOW,UAAQ,SAAEC,GACrB,IAAMC,GAAYD,EAAI,IAAMZ,EAAOW,SAAW,UAE5C,IAAIG,EAAA5C,QAAU6C,EACPZ,YAAWa,EAAAC,sBAAAF,GAEhBf,EACAd,EAAAgC,KAAKtB,EAAU,EAAGA,EAAU,EAAGiB,IAEjC,IAAIC,EAAA5C,QAAU6C,EACPZ,YAAWa,EAAAC,sBAAAF,GAEhBf,EACAd,EAAAgC,KAAgB,EAAVtB,GAAcA,EAAU,EAAGiB,8BAxB1Bd,EAAOzC,iBAAPyC,EAAO,EAgC1BjC,IAAsB,wCAACmC,QAChBA,oBAAsBA,KAG7BnC,IAAM,wBAACY,GACL,GAAEhB,KAAOuC,oBAAqB,CAC5B,IAAMkB,EAAMzD,KAAQuC,oBAAoBmB,OACtC1C,EAAchB,KACTyC,YAAWzC,KACX6C,WAEFL,UAAYiB,EAAOjB,UAExBmB,EAAAC,OAAOH,EAAOZ,KAAKgB,SAAM7D,KAAU6C,KAAKgB,aACnChB,KAAKiB,SAAO,SAAEC,EAAKC,UAAMD,EAAIL,OAAOD,EAAOZ,KAAKmB,WAIzD5D,IAAM,0BACJ,IAAM6D,EAAGjE,KAAQsC,OAAO4B,OAAMlE,KAAQwC,iBAE/B,IAAI2B,EAAA3D,QAAMR,KACVyC,YAAY3C,SAASsE,EAACpE,KACtByC,YAAY3C,SAASuE,EAACrE,KAAQsC,OAAOgC,UAAYL,EAAGjE,KACpDsC,OAAOiC,YAxDGlC,EAAO,CAAS3B,EAAAF,uICpBhBgE,EAAM,iCAANA,EAIPJ,EAAWC,EAAWE,yBAJfC,QAKZC,OAAS,IAAIlE,EAAAC,QAAQ4D,EAAGC,QACxBE,OAASA,EACdG,OAAOC,OAAM3E,2BAPIwE,EAAM,EAUrBpE,IAAa,sCACR,EAAI+B,KAAKC,GAAEpC,KAAQuE,UAG5BnE,IAAc,yCACL,IAAIwE,EAAApE,QACT,IAAID,EAAAC,QAAOR,KAAMyE,OAAOL,EAACpE,KAAOyE,OAAOJ,GACvC,IAAI9D,EAAAC,QAAsB,EAAfR,KAAMuE,OAA0B,EAAhBvE,KAAOuE,YAatCnE,IAAoB,sCAACyE,UACZ,IAAItE,EAAAC,QAAOR,KACXyE,OAAOL,EAAIjC,KAAK2C,IAAID,GAAO7E,KAASuE,OAAMvE,KAC1CyE,OAAOJ,EAAIlC,KAAK4C,IAAIF,GAAO7E,KAASuE,WAI7CnE,IAAa,+BAAC4E,UACLA,EAAM3D,WAAUrB,KAAMyE,QAAMzE,KAASuE,UAG9CnE,IAAgB,kCAAC6E,eACHR,OAAOpD,WAAW4D,EAAMR,QAAMzE,KAASuE,OAASU,EAAMV,UAGpEnE,IAAU,4BAACmE,UACF,IAAIC,EAAMxE,KAAMyE,OAAOL,EAACpE,KAAOyE,OAAOJ,EAAGE,OA9C/BC,EAAM,iICErBU,EAAY,SAAAC,OAAMZ,EAAMY,EAANZ,OAAQa,EAASD,EAATC,UAAWC,EAAQF,EAARE,gBACzClD,KAAKmD,KAAKf,EAASA,GAAUA,EAASa,IAAcb,EAASa,IAC7DC,GAQmBE,EAAU,iCAAVA,EAUTC,EACAC,EACAnD,EACDoD,yBAbUH,QAUTC,QAAAA,OACAC,QAAAA,OACAnD,OAAAA,OACDoD,YAAAA,OANTC,WAAqB,OAQdC,UAAYV,EAAa5C,QACzBuD,WAAaX,EAAa5C,GAAUA,EAAOwD,eAC3CC,YAAcb,EAAa5C,QAE3B0D,OAAMhG,KAAQiG,6BACdC,WAAUlG,KAAQiG,6CApBNV,EAAU,EAuB7BnF,IAAM,wBAACqD,QACAuC,OAASvC,EAAOuC,YAChBE,WAAazC,EAAO0C,0BACpBR,WAAalC,EAAOkC,cAG3BvF,IAAqB,gDACZG,EAAAC,QAAQC,UAAST,KACjBwF,QAAQtF,QAAOF,KAAQ0F,YAAW1F,KAClC+F,aACLhE,IAAG/B,KAAMwF,QAAQ1F,aAGrBM,IAAS,yCACK4F,UAGd5F,IAAQ,mCACCoB,EAAAgC,KAAK,EAACxD,KAAOoG,UAAOpG,KAAUsC,OAAO+D,WAAUrG,KAAO2F,eAG/DvF,IAAa,6CACC8F,cAGd9F,IAAS,yCACKoF,QAAQ1F,SACjBiC,IACCxB,EAAAC,QAAQC,UAAST,KACVwF,QAAQtF,QAAOF,KAAQ0F,YAAW1F,KAClC6F,aAGR9D,IACCxB,EAAAC,QAAQC,UAAST,KACVwF,QAAQtF,QAAOF,KACf2F,WAAU3F,KAAQsC,OAAOgE,gBAKtClG,IAAQ,wCACOmG,WAAQvG,KAAUoG,WAAa,KAG9ChG,IAAa,6CACCoG,eAAehD,KAAIxD,KAAMyG,gBAAiB,OAGxDrG,IAAQ,wCACMoF,QAAQ1F,SAASiC,IAC3BxB,EAAAC,QAAQC,UAAST,KACVwF,QAAQtF,QAAOF,KAAQ0F,YAAW1F,KAClC4F,eAQXxF,IAAO,2BACL,IAAMsG,EAAG1G,KAAQyF,QAAQkB,qBAElBnB,QAAQ1F,SAASuE,EACtBqC,EAAIjC,OAAOJ,GACVqC,EAAInC,OAAMvE,KAAQsC,OAAO8C,cAI9BhF,IAAY,4CACEoF,QAAQ1F,aA9FHyF,EAAU,qLCJzBqB,EAAUzE,KAAKC,GAAK,EAELyE,EAAW,SAAAjH,yBAAXiH,EAIPhH,EAAwByC,sCAJjBuE,wDAAAA,GAAW9G,KAAAC,KAKtBH,KAD4ByC,OAAAA,IAE7BzB,KAAOhB,EAAO6C,aAAaC,EAAAC,kBAC3BkE,KAAOjH,EAAO6C,aAAaqE,EAAAvG,6BAPfqG,EAAWjH,iBAAXiH,EAAW,EAU9BzG,IAAI,sBAAC4G,GACH,IAAM9G,EAAUsB,EAAAC,eAAczB,KAAMa,KAAKX,SAEzC8G,EAAIC,YAAW,IACfD,EAAIE,YAEJ,IAAMR,EAAG1G,KAAQ8G,KAAKH,SACtBK,EAAIG,QAAOnH,KACJa,KAAKf,SAASsE,EAACpE,KACfa,KAAKf,SAASuE,EACN,GAAbqC,EAAInC,OACJ,IAAAmC,EAAInC,OACJ,EACA,EACA,EAAIpC,KAAKC,IAEX4E,EAAII,UAAS,qBACbJ,EAAIK,YAECP,KAAKjE,KACPyE,QAAM,SAACC,UAAK/F,EAAAC,eAAe8F,EAAE7B,YAAcxF,GAAW,KACtD4D,QAAO,SAACC,eAAYyD,QAAQR,EAAKjD,qBAC/B+C,KAAKjE,KACPyE,QAAM,SAACC,UAAK/F,EAAAC,eAAe8F,EAAE7B,YAAcxF,IAAY,KACvD4D,QAAO,SAACC,eAAYyD,QAAQR,EAAKjD,qBAC/B0D,QAAQT,EAAKN,MAGZtG,IAAO,yBAAC4G,EAA+BjD,GAC7CiD,EAAIE,YAEJ,IAAMQ,EAAK1H,KAAQa,KAAKX,QAAU6D,EAAI2B,YAEhCiC,EAAoBnG,EAAAK,UACxB,EACA,EACAM,KAAKyF,IAAIpG,EAAAC,gBAAgBmF,EAAUc,GAASd,IAExCiB,EAAQ7H,KAAQsC,OAAOwF,MAAMC,OACjC,IAAO,EAAIJ,EAAoBA,IAG3BK,EAAGhI,KAAQiI,SACflE,EAAImE,WACJnE,EAAIqC,UACJrC,EAAIyC,gBAEA2B,EAAInI,KAAQiI,SAChBlE,EAAIqE,YACJrE,EAAIsE,WACJtE,EAAIuE,iBAEAC,EAAIvI,KAAQiI,SAChBlE,EAAIyE,YACJzE,EAAIwC,WACJxC,EAAI0C,iBAGNO,EAAIyB,OAAOT,EAAI5D,EAAG4D,EAAI3D,GACtB2C,EAAI0B,iBAAiBP,EAAK/D,EAAG+D,EAAK9D,EAAGkE,EAAKnE,EAAGmE,EAAKlE,GAClD2C,EAAI2B,QAAO,QACX3B,EAAI4B,YAAcf,EAASgB,WAC3B7B,EAAI8B,UAAS9I,KAAQsC,OAAO+C,SAC5B2B,EAAI+B,YAGE3I,IAAO,yBAAC4G,EAA+BN,GAC7CM,EAAIgC,OACJhC,EAAIE,YACJ+B,EAAAC,OAAoBlC,EAAKN,EAAIjC,OAAOL,EAAGsC,EAAIjC,OAAOJ,EAACrE,KAAOsC,OAAOiC,QACjEyC,EAAII,UAASpH,KAAQsC,OAAOwF,MAAMe,WAClC7B,EAAIK,OACJL,EAAImC,OAEJ,IAAMC,EACH5H,EAAAC,eAAemF,EAAO5G,KAAQa,KAAKX,SAAW0G,EAAO5G,KACjDsC,OAAOiC,OAGdyC,EAAIE,YACJ+B,EAAAC,OACElC,EACAoC,EAAQ1C,EAAIjC,OAAOL,EAACpE,KAAQsC,OAAO+G,KACnC3C,EAAIjC,OAAOJ,EAACrE,KAAQsC,OAAOgH,KAAItJ,KAC1BsC,OAAOiH,WAEdN,EAAAC,OACElC,EACAoC,EAAQ1C,EAAIjC,OAAOL,EAACpE,KAAQsC,OAAO+G,KACnC3C,EAAIjC,OAAOJ,EAACrE,KAAQsC,OAAOgH,KAAItJ,KAC1BsC,OAAOiH,WAEdvC,EAAII,UAASpH,KAAQsC,OAAOwF,MAAMC,OAAO,IAAKc,WAC9C7B,EAAIK,OAGJL,EAAIE,YACJF,EAAIyB,OACFW,EAAQ1C,EAAIjC,OAAOL,EAACpE,KAAQsC,OAAOkH,WACnC9C,EAAIjC,OAAOJ,EAACrE,KAAQsC,OAAOmH,QAE7BzC,EAAI0B,iBACFU,EAAQ1C,EAAIjC,OAAOL,EACnBsC,EAAIjC,OAAOJ,EAACrE,KAAQsC,OAAOmH,OAAMzJ,KAAQsC,OAAOoH,WAChDN,EAAQ1C,EAAIjC,OAAOL,EAACpE,KAAQsC,OAAOkH,WACnC9C,EAAIjC,OAAOJ,EAACrE,KAAQsC,OAAOmH,QAE7BzC,EAAI8B,UAAS9I,KAAQsC,OAAOqH,eAC5B3C,EAAI4B,YAAW5I,KAAQsC,OAAOwF,MAAMC,OAAO,IAAKc,WAChD7B,EAAI+B,SAGJ/B,EAAIE,iBACC0C,aAAa5C,EAAKN,EAAK0C,EAA6B,EAAxBpJ,KAAQsC,OAAOiC,aAC3CqF,aAAa5C,EAAKN,EAAK0C,EAA6B,EAAxBpJ,KAAQsC,OAAOiC,QAChDyC,EAAI8B,UAAS9I,KAAQsC,OAAOuH,cAC5B7C,EAAI4B,YAAW5I,KAAQsC,OAAOwF,MAAMC,OAAO,IAAKc,WAChD7B,EAAI+B,SAEJ/B,EAAI8C,aAGE1J,IAAY,8BAClB4G,EACAN,EACAqD,GAEA/C,EAAIyB,OAAe,IAARsB,EAAcrD,EAAIjC,OAAOL,EAAGsC,EAAIjC,OAAOJ,EAACrE,KAAQsC,OAAO0H,SAClEhD,EAAI0B,iBACM,IAARqB,EAAcrD,EAAIjC,OAAOL,EACzBsC,EAAIjC,OAAOJ,EAAqD,KAApDrE,KAASsC,OAAO0H,QAAOhK,KAAQsC,OAAO2H,YAClDF,EAAQrD,EAAIjC,OAAOL,EACnBsC,EAAIjC,OAAOJ,EAACrE,KAAQsC,OAAO2H,eAIvB7J,IAAQ,0BAAC8J,EAAaC,EAAWC,UAChC,IAAI7J,EAAAC,QAAQ0J,EAAG9F,EAAGgG,EAAO/F,EAAI8F,EAtJxB,IAsJ6BD,EAAG7F,EAAI+F,EAAO/F,QAnJtCwC,EAAW,CAASnG,EAAAF,6KCTzB6J,EACdrD,EACA5C,EACAC,EACAE,GAEAyC,EAAIsD,IAAIlG,EAAGC,EAAGE,EAAQ,EAAG,EAAIpC,KAAKC,IAAI,YAGxBmI,EAAKvD,EAA+BwD,GAC9CA,EAAKC,SAAS5G,QAChBmD,EAAIyB,OAAO+B,EAAKC,SAAS,GAAGC,WAAWtG,EAAGoG,EAAKC,SAAS,GAAGC,WAAWrG,OAGnEsG,GAAa,EAAbC,GAAa,EAAbC,OAAaC,cAAbC,EAAAC,EAAiBR,EAAKC,SAAQQ,OAAAC,cAA9BP,GAAAI,EAAAC,EAAaG,QAAAC,MAAbT,GAAa,EAAmB,CAAhC,IAAMU,EAANN,EAAaO,MAChB,GAAID,aAAmBE,EAAA/K,QACrBwG,EAAIwE,OAAOH,EAAQI,SAASrH,EAAGiH,EAAQI,SAASpH,OAC3C,CAAA,KAAIgH,aAAmBK,EAAAlL,SAU5B,MAAM,IAAImL,MAAK,8BAAkDC,OAAnBP,EAAQxC,aATtD7B,EAAIsD,IACFe,EAAQnC,OAAOzE,OAAOL,EACtBiH,EAAQnC,OAAOzE,OAAOJ,EACtBgH,EAAQnC,OAAO3E,OACf8G,EAAQQ,WACRR,EAAQS,SACRT,EAAQU,4BAVTnB,GAAa,EAAbC,EAAamB,cAAbrB,GAAa,MAAbK,EAAaiB,QAAbjB,EAAaiB,oBAAbrB,QAAAC,mICbcqB,EAAmB,iCAAnBA,EAIPC,EAAgBC,yBAJTF,QAKZG,KAAO,IAAIC,EAAA9L,QAAM2L,EAAOC,QACxBG,MAAKvM,KAAQqM,KAAKG,WACvB9H,OAAOC,OAAM3E,2BAPIkM,EAAmB,EAUtC9L,IAAQ,wCACMiM,KAAKF,SAGnB/L,IAAM,sCACQiM,KAAKD,OAGnBhM,IAAQ,wCACMmM,SAGdnM,IAAS,yCACKmM,MAAME,aAGhBrM,IAAK,mCACKmM,MAAM7E,SAGpBtH,IAAkB,oCAACN,GACjB,IAAM4M,EAAsBlL,EAAAK,UAAU,EAAC7B,KAAO2M,YAAa7M,eAC/CyM,MAAMK,cAAcF,GAAqB3K,IAAG/B,KAAMqM,KAAKF,UAGrE/L,IAAkB,kDACJmM,MAAM7E,UApCDwE,EAAmB,iICFlCW,EAAe,SAAIC,UACvBA,IAAUC,EAAAA,GAAYD,KAAWC,EAAAA,GAEdC,EAAK,iCAALA,EAwBPC,EAAYC,yBAxBLF,QAyBZb,MAAQc,OACRb,IAAMc,uBA1BMF,EAAK,EA6BxB5M,IAAQ,wCACMgM,IAAIe,IAAGnN,KAAMmM,UAGvB/L,IAAK,mCACMgM,IAAI/H,EAACrE,KAAQmM,MAAM9H,IAACrE,KAAUoM,IAAIhI,EAACpE,KAAQmM,MAAM/H,MAG5DhE,IAAY,0CACF+L,MAAM9H,EAACrE,KAAQmM,MAAM/H,EAACpE,KAAQ8M,SAGxC1M,IAAU,mCACLyM,EAAe7M,KAAM8M,UAG1B1M,IAAS,kCACXuD,EAAAC,OAAM5D,KAAMoN,WAAU,uDACVjB,MAAM/H,KAGhBhE,IAAkB,oCACpB,OAAEJ,KAAOoN,WAAmB,GACrB,EAAEpN,KAAQ8M,SAGnB1M,IAAY,8BAAC6E,eACEmI,YAAcnI,EAAMmI,YAAUpN,KAAU8M,QAAU7H,EAAM6H,SAGvE1M,IAA6B,+CAAC4E,UACrBgI,EAAMK,kBAAiBrN,KAAMsN,mBAAoBtI,MAG1D5E,IAAuB,yCAAC6E,GAGtB,IAAIb,EAFJT,EAAAC,QAAM5D,KAAOuN,aAAatI,GAAK,mCAI7Bb,EADApE,KAAOoN,WACNpN,KAAQwN,UACAvI,EAAMmI,WACXnI,EAAMuI,WAETxN,KAASyN,aAAexI,EAAMwI,eAAiBxI,EAAM6H,MAAK9M,KAAQ8M,OAGrE,IAAMzI,EAACrE,KAAQoN,WACXnI,EAAM6H,MAAQ1I,EAAIa,EAAMwI,aAAYzN,KAC/B8M,MAAQ1I,EAACpE,KAAQyN,oBAEnB,IAAIlN,EAAAC,QAAQ4D,EAAGC,QA9EjBjE,IAAwB,0CAAC0M,EAAeW,UAC7C9J,EAAAC,QACGiJ,EAAgBC,GAAK,iDAMjB,IAAIE,EAFG,IAAIzM,EAAAC,QAAQ,EAAGiN,GACjB,IAAIlN,EAAAC,QAAQ,EAAGsM,EAAQW,OAI9BrN,IAAiB,mCAAC0M,EAAe9H,GACtC,GAAI6H,EAAgBC,GAAK,OAChB,IAAIE,EAAMhI,EAAO,IAAIzE,EAAAC,QAAQwE,EAAMZ,EAAGY,EAAMX,EAAI,IAGzD,IAAMoJ,EAAezI,EAAMX,EAAIW,EAAMZ,EAAI0I,SAClCE,EAAMU,yBAAyBZ,EAAOW,OAlB5BT,EAAK,iICDLW,EAAiB,iCAAjBA,EAMjBlJ,EACAF,EACAsH,EACAC,yBATiB6B,QAWZzE,OAAS,IAAI/E,EAAA3D,QAAOiE,EAAOL,EAAGK,EAAOJ,EAAGE,QACxCsH,WAAaA,OACbC,SAAWA,EAChBpH,OAAOC,OAAM3E,2BAdI2N,EAAiB,EAiBpCvN,IAAQ,wCACM8I,OAAO0E,qBAAoB5N,KAAM6L,eAG/CzL,IAAM,sCACQ8I,OAAO0E,qBAAoB5N,KAAM8L,aAG3C1L,IAAe,wCACV+B,KAAK0L,MACV1L,KAAK4C,IAAG/E,KAAM8L,SAAQ9L,KAAQ6L,YAC9B1J,KAAK2C,IAAG9E,KAAM8L,SAAQ9L,KAAQ6L,gBAIlCzL,IAAS,6BACP,IAAM0N,EAAa3L,KAAKyF,IAAG5H,KAAM+N,kBAA8B,EAAV5L,KAAKC,gBAC9C8G,OAAO8E,cAAgBF,KAGjC1N,IAAe,6CACL2N,gBAAkB,KAGhC3N,IAAkB,oCAACN,GACjB,IAAM4H,EAAQlG,EAAAyM,SACZ,EAACjO,KACI2M,YAAS3M,KACT6L,WAAU7L,KACV6L,WAAU7L,KAAQ+N,gBACvBvM,EAAAK,UAAU,EAAC7B,KAAO2M,YAAa7M,gBAErBoJ,OAAO0E,qBAAqBlG,MAG1CtH,IAAkB,oCAACN,GACjB,OAAEE,KAAO+L,gBAELvK,EAAAyM,SACE,EAACjO,KACI2M,YAAS3M,KACT6L,WAAU7L,KACV6L,WAAU7L,KAAQ+N,gBACvBvM,EAAAK,UAAU,EAAC7B,KAAO2M,YAAa7M,IAEjCqC,KAAKC,GAAK,EAIVZ,EAAAyM,SACE,EAACjO,KACI2M,YAAS3M,KACT6L,WAAU7L,KACV6L,WAAU7L,KAAQ+N,gBACvBvM,EAAAK,UAAU,EAAC7B,KAAO2M,YAAa7M,IAEjCqC,KAAKC,GAAK,MAzEGuL,EAAiB,uJCU7BO,EAAW/I,UAAAA,EAAEgJ,aACE,MAOHC,EAA0B,iCAA1BA,EAIC9L,yBAJD8L,QAIC9L,OAAAA,OAFZ+L,UAAY,IAAIC,yBAFLF,EAA0B,EAM7ChO,IAAM,wBACJY,EACAuN,EACA1L,GAEA,IAAM5B,EAAYD,EAAiB,IAE9B2J,GAAS,EAATC,GAAS,EAATC,OAASC,cAATC,EAAAC,EAAanI,EAAIoI,OAAAC,cAAjBP,GAAAI,EAAAC,EAASG,QAAAC,MAATT,GAAS,EAAA,CAAT,IAAM5G,EAANgH,EAASO,WACPkD,eAAevN,EAAWsN,EAAK1L,EAAMkB,aADvC6G,GAAS,EAATC,EAASmB,cAATrB,GAAS,MAATK,EAASiB,QAATjB,EAASiB,oBAATrB,QAAAC,GAGL,IAAM4D,EAAa5L,EAAK6L,IAAG,SAAC3K,eAAY4K,aAAaJ,EAAKxK,uBASxDvB,UAPgBiM,EAAWG,QAAM,SAChCC,EAAKpL,UAAWoL,EAAMpL,EAAOkC,aAC9B,GAE0B9C,EAAKgB,OAI/BhB,KAAM4L,MAIFrO,IAAU,4BAChBmO,EACA1L,EACAkB,GAEAJ,EAAAC,OAAOf,EAAKiM,SAAS/K,GAAG,yBACxB,IAAMgL,EACJlM,EAAKyE,OAAM,SAACC,UAAKA,IAAMxD,IAAQmK,EAAUlO,KAAMgP,YAAYT,EAAKxK,iBAC7DF,OAAS1B,KAAK8M,MAAM9M,KAAK+M,IAAIrM,EAAKgB,SAEjCsL,EAAsBtM,EAAKuM,KAAI,SAACC,GACpC,IAAMC,EAAKtP,KAAQgP,YAAYT,EAAKc,UAElCC,EAAMnB,aAAe,GAAKmB,EAAMnB,aAAe,GAAKtL,EAAKgB,OAAS,IAErE0L,KAAAvP,cAEM+O,IAAsBI,KAGvB/O,IAAc,gCACpBa,EACAsN,EACA1L,EACAkB,GAEA,IAAMuL,EAAKtP,KAAQgP,YAAYT,EAAKxK,GAOpC,GALAuL,EAAME,UAAYhO,EAAAK,UAChB,EAAC7B,KACIsC,OAAOmN,iBACZH,EAAME,UAAYvO,KAENqO,EAnEGE,UACA,GAoEjB,GAAItB,EAAWoB,GACbA,EAAMnB,aAAe3M,EAAAK,UACnB,EACA,EACAyN,EAAMnB,aAAelN,EAASjB,KAAQsC,OAAOoN,cAGpB,IAAvBJ,EAAMnB,eACRmB,EAAMK,kBAAiB3P,KAAQwI,UAAU+F,EAAKxK,EAAKuL,GACnDA,EAAMM,2BAA6BrB,EAAIzO,SACvCwP,EAAMnB,aAAe,EACrBmB,EAAME,UAASxP,KAAQsC,OAAOoN,kBAE3B,CACL,IAAMG,EAAmB9L,EACtByE,YACAnH,WAAW0C,EAAIkC,yBAEhB4J,EAAgB7P,KAAQsC,OAAOwN,eAAa9P,KACvC+P,WAAWxB,EAAK1L,EAAMkB,KAE3BuL,EAAMU,mBAAqBxO,EAAAK,UACzB,EACA,EACAL,EAAAyM,SAAQjO,KACDsC,OAAOwN,cAAa9P,KACpBsC,OAAO2N,iBACZ,GACA,EACAJ,IAGJP,EAAMnB,aAAe3M,EAAAK,UACnB,EACA,EACAyN,EAAMnB,aAAelN,EAASjB,KAAQsC,OAAOoN,mBAM7CtP,IAAkB,oCAACmO,EAAqBxK,UAE5C4L,kBAAmB5L,EAAIkC,wBACvB2J,2BAA4BrB,EAAIzO,SAChCqO,aAAc,EACdqB,UAAW,EACXQ,mBAAoB,MAIhB5P,IAAW,6BAACmO,EAAqBxK,GACvC,IAAMuL,EAAKtP,KAAQqO,UAAU6B,IAAInM,GACjC,GAAIuL,EAAK,OACAA,EAGT,IAAMa,EAAYnQ,KAAQoQ,mBAAmB7B,EAAKxK,eAC7CsK,UAAUgC,IAAItM,EAAKoM,GACjBA,KAGD/P,IAAY,8BAACmO,EAAqBxK,GACxC,IAAMuL,EAAKtP,KAAQgP,YAAYT,EAAKxK,UAElCiC,OAAMhG,KAAOwI,UAAU+F,EAAKxK,EAAKuL,GACjCnJ,qBAAoBnG,KAAOyG,cAAc8H,EAAKxK,EAAKuL,GACnD3J,WAAU3F,KAAOsQ,iBAAiBhB,OAI9BlP,IAAS,2BACfmO,EACAxK,EACAuL,GAEA,GAAIpB,EAAWoB,GAAQ,CACrB,IAAMnD,EAAQmD,EAAMK,kBACd/O,EAAMZ,KAAQuQ,qCAAqChC,EAAKxK,EAAKuL,UAC5DnD,EAAM3I,KAAK5C,EAAQ0O,EAAMnB,qBAG3BmB,EAAMK,qBAGPvP,IAAa,+BACnBmO,EACAxK,EACAuL,GAEA,OAAIpB,EAAWoB,GACNA,EAAMM,2BAA2BpM,KACtC+K,EAAIzO,SACJwP,EAAMnB,cAIHmB,EAAMM,8BAGPxP,IAAoC,sDAC1CmO,EACAxK,EACAuL,GAEA,IAAMkB,GAAiB,IAAMlB,EAAMnB,cAAYnO,KAASsC,OAAOoN,aAEzDe,EAAoBlC,EACvBmC,cACApQ,MAAMkQ,GACNzO,IAAIwM,EAAIzO,UAEL6Q,EAAmBpC,EAAIrO,QAAUqO,EAAIpO,gBAAkBqQ,SAEtDjQ,EAAAC,QAAQC,UACbkQ,EAAmB5M,EAAI2B,YACvB3B,EAAIgC,aACJhE,IAAI0O,MAGArQ,IAAgB,kCAAC+E,OACvBgJ,EADuBhJ,EACvBgJ,aACA6B,EAFuB7K,EAEvB6K,0BAEO7N,KAAK4C,IAAIoJ,EAAehM,KAAKC,IAAM4N,MA7LzB5B,EAA0B,oICkClCwC,GAbJC,EAAAC,KAAKC,QAAQ,IAac,WAClC,IAAMxM,EAAS/C,EAAAwP,aAAa,GAAI,IAC1B5L,EAAY5D,EAAAwP,aAAsB,GAATzM,EAAc,IACvCD,EAAY9C,EAAAwP,aAAsB,EAATzM,EAAY,IACrC0M,EAAY3M,GAAaC,EAASa,UAGtCb,OAAAA,EACAD,UAAAA,EACAJ,OAAQ1C,EAAAwP,aAAazM,EAAQ,IAC7B+E,KAAM9H,EAAAwP,aAAsB,GAATzM,EAAc,IACjC8E,KAAM7H,EAAAwP,aAAsB,GAATzM,EAAc,IACjCgF,UAAW/H,EAAAwP,aAAsB,IAATzM,EAAe,IACvCoF,eAAgBnI,EAAAwP,aAAsB,IAATzM,EAAe,IAC5CkF,OAAQjI,EAAA0P,aAAa,EAAY,GAAT3M,GACxBiF,WAAYhI,EAAAwP,aAAsB,GAATzM,EAAc,IACvCmF,WAAYlI,EAAAwP,aAAsB,GAATzM,EAAc,IACvCyF,QAASxI,EAAAwP,aAAsB,GAATzM,EAAc,IACpC0F,WAAYzI,EAAAwP,aAAsB,IAATzM,EAAe,KACxCsF,cAAerI,EAAAwP,aAAsB,GAATzM,EAAc,IAC1CuD,MAAO+I,EAAAC,KAAKC,QAAQvP,EAAA2P,QAAO,GAAM,KAC9BC,SAAS5P,EAAA2P,QAAO,GAAM,KACtBE,OAAO7P,EAAA2P,QAAO,GAAK,KACtB/L,UAAAA,EACAU,UAAWtE,EAAA0P,aAAa,IAAK,IAC7B7K,WAAY7E,EAAA2P,OAAO,GAAK,IACxB7K,WAAY9E,EAAAwP,aAAyB,GAAZC,EAAiB,IAC1CvB,aAAclO,EAAAwP,aAAyB,IAAZC,EAAkB,IAC7CxB,iBAAkBjO,EAAAwP,aAAyB,MAAZC,EAAoB,IACnDnB,cAAetO,EAAAwP,aAAyB,IAAZC,EAAkB,IAC9ChB,iBAAkBzO,EAAAwP,aAAyB,GAAZC,EAAiB,IAChD5L,SAAU7D,EAAAwP,aAAsB,GAATzM,EAAc,IACrCtB,SAAUzB,EAAA8P,UAAU,EAAG,uGCrFdC,GAFW,IAAIC,EAAAC,GAAJ,CAAS,WACb,IAAID,EAAAC,GAAJ,CAAS,WACT,IAAID,EAAAC,GAAJ,CAAS,YACV,IAAID,EAAAC,GAAJ,CAAS,WACN,IAAID,EAAAC,GAAJ,CAAS","sources":["src/pals/PalController.ts","src/pals/PalGeom.ts","src/lib/geom/Circle.ts","src/pals/PalLegGeom.ts","src/pals/PalRenderer.ts","src/lib/canvasShapeHelpers.ts","src/lib/geom/StraightPathSegment.ts","src/lib/geom/Line2.ts","src/lib/geom/CirclePathSegment.ts","src/pals/PalWalkAnimationController.ts","src/pals/PalConfig.ts","src/pals/colors.ts"],"sourcesContent":["import Component from '../lib/scene/Component';\nimport { constrain, normalizeAngle } from '../lib/utils';\nimport Vector2 from '../lib/geom/Vector2';\nimport Entity from '../lib/scene/Entity';\n\nconst MAX_SPEED = 80;\nconst ACCELERATION = 200;\nconst DECELERATION = 200;\n\nexport class PalControlData extends Component {\n  speed: number = 0;\n  position: Vector2;\n  heading: number = 0;\n  headingVelocity: number = 0;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.position = position;\n  }\n\n  getVelocity(): Vector2 {\n    return this.getHeadingVec().scale(this.speed);\n  }\n\n  private getHeadingVec(): Vector2 {\n    return Vector2.fromPolar(this.heading, 1);\n  }\n}\n\nexport class PalTargetController extends Component {\n  private data: PalControlData;\n  private target: Vector2;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.target = position;\n    this.data = entity.addComponent(PalControlData, position);\n  }\n\n  setTarget(newTarget: Vector2) {\n    this.target = newTarget;\n  }\n\n  update(dtMilliseconds: number) {\n    const dtSeconds = dtMilliseconds / 1000;\n    const angleToTarget = this.data.position.angleTo(this.target);\n\n    const distance = this.target.distanceTo(this.data.position);\n    if (distance > 15) {\n      this.accelerate(ACCELERATION, dtSeconds);\n    } else {\n      this.accelerate(-DECELERATION, dtSeconds);\n    }\n\n    if (distance > 10) {\n      const angleDelta = normalizeAngle(angleToTarget - this.data.heading);\n      const lastHeading = this.data.heading;\n      this.data.heading += angleDelta / 10;\n      this.data.headingVelocity =\n        normalizeAngle(this.data.heading - lastHeading) / dtSeconds;\n    } else {\n      this.data.headingVelocity = 0;\n    }\n  }\n\n  private accelerate(amt: number, dtSeconds: number) {\n    const lastSpeed = this.data.speed;\n    this.data.speed = constrain(\n      0,\n      MAX_SPEED,\n      this.data.speed + amt * dtSeconds,\n    );\n    const avgSpeed = (lastSpeed + this.data.speed) / 2;\n    this.data.position = this.data.position.add(\n      Vector2.fromPolar(this.data.heading, avgSpeed * dtSeconds),\n    );\n  }\n}\n\nexport class PalAbsoluteController extends Component {\n  private data: PalControlData;\n\n  constructor(entity: Entity, position: Vector2) {\n    super(entity);\n    this.data = entity.addComponent(PalControlData, position);\n  }\n\n  setPosition(position: Vector2, heading: number, dtSeconds: number) {\n    const lastPosition = this.data.position;\n    const lastHeading = this.data.heading;\n\n    this.data.heading = heading;\n    this.data.headingVelocity =\n      normalizeAngle(this.data.heading - lastHeading) / dtSeconds;\n    this.data.speed = lastPosition.distanceTo(position) / dtSeconds;\n    this.data.position = position;\n  }\n}\n","import Component from '../lib/scene/Component';\nimport Entity from '../lib/scene/Entity';\nimport Circle from '../lib/geom/Circle';\nimport { PalControlData } from './PalController';\nimport { shuffle, flatten, times, lerp } from '../lib/utils';\nimport { PalConfig } from './PalConfig';\nimport PalLegGeom, { PalLegGeomUpdate } from './PalLegGeom';\nimport { assert } from '../lib/assert';\n\nconst HALF_PI = Math.PI / 2;\n\nexport type PalGeomUpdate = {\n  bobAmount: number;\n  legs: Array<PalLegGeomUpdate>;\n};\n\nexport interface PalAnimationController {\n  update(\n    dtMilliseconds: number,\n    controlData: PalControlData,\n    legs: Array<PalLegGeom>,\n  ): PalGeomUpdate;\n}\n\nexport default class PalGeom extends Component {\n  private controlData: PalControlData;\n  legs: Array<PalLegGeom>;\n  private animationController: PalAnimationController | null = null;\n  private bobAmount: number = 0;\n\n  constructor(entity: Entity, private config: PalConfig) {\n    super(entity);\n    this.controlData = entity.getComponent(PalControlData);\n    this.legs = shuffle(\n      flatten(\n        times(config.legPairs, n => {\n          const progress = (n + 1) / (config.legPairs + 1);\n          return [\n            new PalLegGeom(\n              this.controlData,\n              this,\n              config,\n              lerp(HALF_PI - 1, HALF_PI + 1, progress),\n            ),\n            new PalLegGeom(\n              this.controlData,\n              this,\n              config,\n              lerp(-HALF_PI + 1, -HALF_PI - 1, progress),\n            ),\n          ];\n        }),\n      ),\n    );\n  }\n\n  setAnimationController(animationController: PalAnimationController) {\n    this.animationController = animationController;\n  }\n\n  update(dtMilliseconds: number) {\n    if (this.animationController) {\n      const update = this.animationController.update(\n        dtMilliseconds,\n        this.controlData,\n        this.legs,\n      );\n      this.bobAmount = update.bobAmount;\n\n      assert(update.legs.length === this.legs.length);\n      this.legs.forEach((leg, i) => leg.update(update.legs[i]));\n    }\n  }\n\n  getBod(): Circle {\n    const bob = this.config.bodBob * this.bobAmount;\n\n    return new Circle(\n      this.controlData.position.x,\n      this.controlData.position.y - this.config.bodHeight - bob,\n      this.config.radius,\n    );\n  }\n}\n","// @flow\nimport Vector2 from './Vector2';\nimport AABB from './AABB';\n\nexport default class Circle {\n  readonly center: Vector2;\n  readonly radius: number;\n\n  constructor(x: number, y: number, radius: number) {\n    this.center = new Vector2(x, y);\n    this.radius = radius;\n    Object.freeze(this);\n  }\n\n  get circumference(): number {\n    return 2 * Math.PI * this.radius;\n  }\n\n  getBoundingBox(): AABB {\n    return new AABB(\n      new Vector2(this.center.x, this.center.y),\n      new Vector2(this.radius * 2, this.radius * 2),\n    );\n  }\n\n  // debugDraw(color: string) {\n  //   const ctx: CanvasRenderingContext2D = window.debugContext;\n  //   ctx.strokeStyle = color;\n  //   ctx.lineWidth = 1;\n  //   ctx.beginPath();\n  //   ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, false);\n  //   ctx.stroke();\n  // }\n\n  pointOnCircumference(radians: number): Vector2 {\n    return new Vector2(\n      this.center.x + Math.cos(radians) * this.radius,\n      this.center.y + Math.sin(radians) * this.radius,\n    );\n  }\n\n  containsPoint(point: Vector2): boolean {\n    return point.distanceTo(this.center) < this.radius;\n  }\n\n  intersectsCircle(other: Circle): boolean {\n    return this.center.distanceTo(other.center) < this.radius + other.radius;\n  }\n\n  withRadius(radius: number): Circle {\n    return new Circle(this.center.x, this.center.y, radius);\n  }\n}\n","import PalGeom from './PalGeom';\nimport { PalConfig } from './PalConfig';\nimport Vector2 from '../lib/geom/Vector2';\nimport { PalControlData } from './PalController';\nimport { lerp } from '../lib/utils';\n\nconst getLegRadius = ({ radius, hipHeight, legWidth }: PalConfig) =>\n  Math.sqrt(radius * radius - (radius - hipHeight) * (radius - hipHeight)) -\n  legWidth;\n\nexport type PalLegGeomUpdate = {\n  footXY: Vector2;\n  footProjectionOrigin: Vector2;\n  liftAmount: number;\n};\n\nexport default class PalLegGeom {\n  hipRadius: number;\n  kneeRadius: number;\n  floorRadius: number;\n\n  footXY: Vector2;\n  footOrigin: Vector2;\n  liftAmount: number = 0;\n\n  constructor(\n    private palData: PalControlData,\n    private palGeom: PalGeom,\n    private config: PalConfig,\n    public angleOffset: number,\n  ) {\n    this.hipRadius = getLegRadius(config);\n    this.kneeRadius = getLegRadius(config) * config.kneeScale;\n    this.floorRadius = getLegRadius(config);\n\n    this.footXY = this.getIdealFootRestingXY();\n    this.footOrigin = this.getIdealFootRestingXY();\n  }\n\n  update(update: PalLegGeomUpdate) {\n    this.footXY = update.footXY;\n    this.footOrigin = update.footProjectionOrigin;\n    this.liftAmount = update.liftAmount;\n  }\n\n  getIdealFootRestingXY(): Vector2 {\n    return Vector2.fromPolar(\n      this.palData.heading + this.angleOffset,\n      this.floorRadius,\n    ).add(this.palData.position);\n  }\n\n  getFootXY(): Vector2 {\n    return this.footXY;\n  }\n\n  getFootZ(): number {\n    return lerp(0, this.getHipZ() * this.config.legMaxLift, this.liftAmount);\n  }\n\n  getFootOrigin(): Vector2 {\n    return this.footOrigin;\n  }\n\n  getKneeXY(): Vector2 {\n    return this.palData.position\n      .add(\n        Vector2.fromPolar(\n          this.palData.heading + this.angleOffset,\n          this.kneeRadius,\n        ),\n      )\n      .add(\n        Vector2.fromPolar(\n          this.palData.heading,\n          this.liftAmount * this.config.kneeMaxOut,\n        ),\n      );\n  }\n\n  getKneeZ(): number {\n    return (this.getFootZ() + this.getHipZ()) / 2;\n  }\n\n  getKneeOrigin(): Vector2 {\n    return this.getHipOrigin().lerp(this.getFootOrigin(), 0.5);\n  }\n\n  getHipXY(): Vector2 {\n    return this.palData.position.add(\n      Vector2.fromPolar(\n        this.palData.heading + this.angleOffset,\n        this.hipRadius,\n      ),\n    );\n    // return this._hipEllipse\n    //   .pointOnCircumference(this.angle)\n    //   .add(this.palData.bod.center);\n  }\n\n  getHipZ(): number {\n    const bod = this.palGeom.getBod();\n    return (\n      this.palData.position.y -\n      bod.center.y -\n      (bod.radius - this.config.hipHeight)\n    );\n  }\n\n  getHipOrigin(): Vector2 {\n    return this.palData.position;\n  }\n}\n","import Component from '../lib/scene/Component';\nimport { PalControlData } from './PalController';\nimport Entity from '../lib/scene/Entity';\nimport PalGeom from './PalGeom';\nimport * as ShapeHelpers from '../lib/canvasShapeHelpers';\nimport { normalizeAngle, constrain } from '../lib/utils';\nimport Circle from '../lib/geom/Circle';\nimport { PalConfig } from './PalConfig';\nimport PalLegGeom from './PalLegGeom';\nimport Vector2 from '../lib/geom/Vector2';\n\nconst Y_SCALE = 0.3;\nconst HALF_PI = Math.PI / 2;\n\nexport default class PalRenderer extends Component {\n  private data: PalControlData;\n  private geom: PalGeom;\n\n  constructor(entity: Entity, private config: PalConfig) {\n    super(entity);\n    this.data = entity.getComponent(PalControlData);\n    this.geom = entity.getComponent(PalGeom);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const heading = normalizeAngle(this.data.heading);\n\n    ctx.setLineDash([]);\n    ctx.beginPath();\n\n    const bod = this.geom.getBod();\n    ctx.ellipse(\n      this.data.position.x,\n      this.data.position.y,\n      bod.radius * 0.8,\n      bod.radius * 0.8 * 0.3,\n      0,\n      0,\n      2 * Math.PI,\n    );\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n    ctx.fill();\n\n    this.geom.legs\n      .filter(l => normalizeAngle(l.angleOffset + heading) < 0)\n      .forEach(leg => this.drawLeg(ctx, leg));\n    this.geom.legs\n      .filter(l => normalizeAngle(l.angleOffset + heading) >= 0)\n      .forEach(leg => this.drawLeg(ctx, leg));\n    this.drawBod(ctx, bod);\n  }\n\n  private drawLeg(ctx: CanvasRenderingContext2D, leg: PalLegGeom) {\n    ctx.beginPath();\n\n    const angle = this.data.heading + leg.angleOffset;\n\n    const colorDarkenAmount = constrain(\n      0,\n      1,\n      Math.abs(normalizeAngle(-HALF_PI - angle) / HALF_PI),\n    );\n    const legColor = this.config.color.darken(\n      0.2 * (1 - colorDarkenAmount * colorDarkenAmount),\n    );\n\n    const hip = this.projectZ(\n      leg.getHipXY(),\n      leg.getHipZ(),\n      leg.getHipOrigin(),\n    );\n    const knee = this.projectZ(\n      leg.getKneeXY(),\n      leg.getKneeZ(),\n      leg.getKneeOrigin(),\n    );\n    const foot = this.projectZ(\n      leg.getFootXY(),\n      leg.getFootZ(),\n      leg.getFootOrigin(),\n    );\n\n    ctx.moveTo(hip.x, hip.y);\n    ctx.quadraticCurveTo(knee.x, knee.y, foot.x, foot.y);\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = legColor.toString();\n    ctx.lineWidth = this.config.legWidth;\n    ctx.stroke();\n  }\n\n  private drawBod(ctx: CanvasRenderingContext2D, bod: Circle) {\n    ctx.save();\n    ctx.beginPath();\n    ShapeHelpers.circle(ctx, bod.center.x, bod.center.y, this.config.radius);\n    ctx.fillStyle = this.config.color.toString();\n    ctx.fill();\n    ctx.clip();\n\n    const faceX =\n      (normalizeAngle(HALF_PI - this.data.heading) / HALF_PI) *\n      this.config.radius;\n\n    // EYES\n    ctx.beginPath();\n    ShapeHelpers.circle(\n      ctx,\n      faceX + bod.center.x + this.config.eyeX,\n      bod.center.y - this.config.eyeY,\n      this.config.eyeRadius,\n    );\n    ShapeHelpers.circle(\n      ctx,\n      faceX + bod.center.x - this.config.eyeX,\n      bod.center.y - this.config.eyeY,\n      this.config.eyeRadius,\n    );\n    ctx.fillStyle = this.config.color.darken(0.5).toString();\n    ctx.fill();\n\n    // MOUTH\n    ctx.beginPath();\n    ctx.moveTo(\n      faceX + bod.center.x - this.config.mouthWidth,\n      bod.center.y - this.config.mouthY,\n    );\n    ctx.quadraticCurveTo(\n      faceX + bod.center.x,\n      bod.center.y - this.config.mouthY + this.config.mouthSmile,\n      faceX + bod.center.x + this.config.mouthWidth,\n      bod.center.y - this.config.mouthY,\n    );\n    ctx.lineWidth = this.config.mouthThickness;\n    ctx.strokeStyle = this.config.color.darken(0.5).toString();\n    ctx.stroke();\n\n    // BUTT\n    ctx.beginPath();\n    this.makeButtLine(ctx, bod, faceX + this.config.radius * 2);\n    this.makeButtLine(ctx, bod, faceX - this.config.radius * 2);\n    ctx.lineWidth = this.config.buttThickness;\n    ctx.strokeStyle = this.config.color.darken(0.3).toString();\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  private makeButtLine(\n    ctx: CanvasRenderingContext2D,\n    bod: Circle,\n    buttX: number,\n  ) {\n    ctx.moveTo(buttX * 1.6 + bod.center.x, bod.center.y + this.config.buttTop);\n    ctx.quadraticCurveTo(\n      buttX * 1.7 + bod.center.x,\n      bod.center.y + (this.config.buttTop + this.config.buttBottom) * 0.65,\n      buttX + bod.center.x,\n      bod.center.y + this.config.buttBottom,\n    );\n  }\n\n  private projectZ(xy: Vector2, z: number, origin: Vector2): Vector2 {\n    return new Vector2(xy.x, origin.y - z + (xy.y - origin.y) * Y_SCALE);\n  }\n}\n","// @flow\nimport Path from './geom/Path';\nimport StraightPathSegment from './geom/StraightPathSegment';\nimport CirclePathSegment from './geom/CirclePathSegment';\n\nexport function circle(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  radius: number,\n) {\n  ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n}\n\nexport function path(ctx: CanvasRenderingContext2D, path: Path) {\n  if (path.segments.length) {\n    ctx.moveTo(path.segments[0].getStart().x, path.segments[0].getStart().y);\n  }\n\n  for (const segment of path.segments) {\n    if (segment instanceof StraightPathSegment) {\n      ctx.lineTo(segment.getEnd().x, segment.getEnd().y);\n    } else if (segment instanceof CirclePathSegment) {\n      ctx.arc(\n        segment.circle.center.x,\n        segment.circle.center.y,\n        segment.circle.radius,\n        segment.startAngle,\n        segment.endAngle,\n        segment.isAnticlockwise,\n      );\n    } else {\n      throw new Error(`Unknown path segment type: ${segment.toString()}`);\n    }\n  }\n}\n","// @flow\nimport { constrain } from '../utils';\nimport Vector2 from './Vector2';\nimport { PathSegment } from './Path';\nimport Line2 from './Line2';\n\nexport default class StraightPathSegment implements PathSegment {\n  readonly line: Line2;\n  private readonly delta: Vector2;\n\n  constructor(start: Vector2, end: Vector2) {\n    this.line = new Line2(start, end);\n    this.delta = this.line.getDelta();\n    Object.freeze(this);\n  }\n\n  getStart(): Vector2 {\n    return this.line.start;\n  }\n\n  getEnd(): Vector2 {\n    return this.line.end;\n  }\n\n  getDelta(): Vector2 {\n    return this.delta;\n  }\n\n  getLength(): number {\n    return this.delta.magnitude;\n  }\n\n  get angle(): number {\n    return this.delta.angle;\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const constrainedPosition = constrain(0, this.getLength(), position);\n    return this.delta.withMagnitude(constrainedPosition).add(this.line.start);\n  }\n\n  getAngleAtPosition(): number {\n    return this.delta.angle;\n  }\n}\n","// @flow\nimport { assert } from '../assert';\nimport Vector2 from './Vector2';\n\nconst isSlopeVertical = (slope: number) =>\n  slope === Infinity || slope === -Infinity;\n\nexport default class Line2 {\n  static fromSlopeAndDisplacement(slope: number, displacement: number) {\n    assert(\n      !isSlopeVertical(slope),\n      'cannot create vertical line from displacement',\n    );\n\n    const start = new Vector2(0, displacement);\n    const end = new Vector2(1, slope + displacement);\n    return new Line2(start, end);\n  }\n\n  static fromSlopeAndPoint(slope: number, point: Vector2): Line2 {\n    if (isSlopeVertical(slope)) {\n      return new Line2(point, new Vector2(point.x, point.y + 1));\n    }\n\n    const displacement = point.y - point.x * slope;\n    return Line2.fromSlopeAndDisplacement(slope, displacement);\n  }\n\n  readonly start: Vector2;\n  readonly end: Vector2;\n\n  constructor(a: Vector2, b: Vector2) {\n    this.start = a;\n    this.end = b;\n  }\n\n  getDelta(): Vector2 {\n    return this.end.sub(this.start);\n  }\n\n  get slope(): number {\n    return (this.end.y - this.start.y) / (this.end.x - this.start.x);\n  }\n\n  get displacement(): number {\n    return this.start.y - this.start.x * this.slope;\n  }\n\n  get isVertical(): boolean {\n    return isSlopeVertical(this.slope);\n  }\n\n  get verticalX(): number {\n    assert(this.isVertical, 'verticalX is not defined on non vertical lines');\n    return this.start.x;\n  }\n\n  get perpendicularSlope(): number {\n    if (this.isVertical) return 0;\n    return -1 / this.slope;\n  }\n\n  isParallelTo(other: Line2): boolean {\n    return (this.isVertical && other.isVertical) || this.slope === other.slope;\n  }\n\n  perpendicularLineThroughPoint(point: Vector2): Line2 {\n    return Line2.fromSlopeAndPoint(this.perpendicularSlope, point);\n  }\n\n  pointAtIntersectionWith(other: Line2): Vector2 {\n    assert(!this.isParallelTo(other), 'parallel lines do not intersect');\n\n    let x;\n    if (this.isVertical) {\n      x = this.verticalX;\n    } else if (other.isVertical) {\n      x = other.verticalX;\n    } else {\n      x = (this.displacement - other.displacement) / (other.slope - this.slope);\n    }\n\n    const y = this.isVertical\n      ? other.slope * x + other.displacement\n      : this.slope * x + this.displacement;\n\n    return new Vector2(x, y);\n  }\n}\n","// @flow\nimport { constrain, mapRange } from '../utils';\nimport Vector2 from './Vector2';\nimport Circle from './Circle';\nimport { PathSegment } from './Path';\n\nexport default class CirclePathSegment implements PathSegment {\n  readonly circle: Circle;\n  readonly startAngle: number;\n  readonly endAngle: number;\n\n  constructor(\n    center: Vector2,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n  ) {\n    this.circle = new Circle(center.x, center.y, radius);\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    Object.freeze(this);\n  }\n\n  getStart(): Vector2 {\n    return this.circle.pointOnCircumference(this.startAngle);\n  }\n\n  getEnd(): Vector2 {\n    return this.circle.pointOnCircumference(this.endAngle);\n  }\n\n  get angleDifference(): number {\n    return Math.atan2(\n      Math.sin(this.endAngle - this.startAngle),\n      Math.cos(this.endAngle - this.startAngle),\n    );\n  }\n\n  getLength(): number {\n    const proportion = Math.abs(this.angleDifference) / (Math.PI * 2);\n    return this.circle.circumference * proportion;\n  }\n\n  get isAnticlockwise(): boolean {\n    return this.angleDifference < 0;\n  }\n\n  getPointAtPosition(position: number): Vector2 {\n    const angle = mapRange(\n      0,\n      this.getLength(),\n      this.startAngle,\n      this.startAngle + this.angleDifference,\n      constrain(0, this.getLength(), position),\n    );\n    return this.circle.pointOnCircumference(angle);\n  }\n\n  getAngleAtPosition(position: number): number {\n    if (this.isAnticlockwise) {\n      return (\n        mapRange(\n          0,\n          this.getLength(),\n          this.startAngle,\n          this.startAngle + this.angleDifference,\n          constrain(0, this.getLength(), position),\n        ) -\n        Math.PI / 2\n      );\n    } else {\n      return (\n        mapRange(\n          0,\n          this.getLength(),\n          this.startAngle,\n          this.startAngle + this.angleDifference,\n          constrain(0, this.getLength(), position),\n        ) +\n        Math.PI / 2\n      );\n    }\n  }\n}\n","import { PalAnimationController, PalGeomUpdate } from './PalGeom';\nimport { PalControlData } from './PalController';\nimport PalLegGeom, { PalLegGeomUpdate } from './PalLegGeom';\nimport Vector2 from '../lib/geom/Vector2';\nimport { PalConfig } from './PalConfig';\nimport { constrain, mapRange } from '../lib/utils';\nimport { assert } from '../lib/assert';\n\ntype LegState = {\n  lastFootOnFloorXY: Vector2;\n  lastFootOnFloorPalPosition: Vector2;\n  stepProgress: number;\n  restTimer: number;\n  currentStepMaxLift: number;\n};\n\nfunction isStepping({ stepProgress }: LegState): boolean {\n  return stepProgress > 0;\n}\n\nfunction isResting({ restTimer }: LegState): boolean {\n  return restTimer > 0;\n}\n\nexport default class PalWalkAnimationController\n  implements PalAnimationController {\n  private legStates = new Map<PalLegGeom, LegState>();\n\n  constructor(private config: PalConfig) {}\n\n  update(\n    dtMilliseconds: number,\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n  ): PalGeomUpdate {\n    const dtSeconds = dtMilliseconds / 1000;\n\n    for (const leg of legs) {\n      this.updateLegState(dtSeconds, pal, legs, leg);\n    }\n    const legUpdates = legs.map(leg => this.getLegUpdate(pal, leg));\n\n    const totalLift = legUpdates.reduce(\n      (sum, update) => sum + update.liftAmount,\n      0,\n    );\n    const avgLift = totalLift / legs.length;\n\n    return {\n      bobAmount: avgLift,\n      legs: legUpdates,\n    };\n  }\n\n  private canLiftLeg(\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n    leg: PalLegGeom,\n  ): boolean {\n    assert(legs.includes(leg), 'whos leg even is this');\n    const enoughLegsOnFloor =\n      legs.filter(l => l !== leg && !isStepping(this.getLegState(pal, leg)))\n        .length > Math.floor(Math.log(legs.length));\n\n    const anyStepsJustStarted = legs.some(leg => {\n      const state = this.getLegState(pal, leg);\n      return (\n        state.stepProgress > 0 && state.stepProgress < 1 / (legs.length / 2)\n      );\n    });\n\n    return enoughLegsOnFloor && !anyStepsJustStarted;\n  }\n\n  private updateLegState(\n    dtSeconds: number,\n    pal: PalControlData,\n    legs: Array<PalLegGeom>,\n    leg: PalLegGeom,\n  ) {\n    const state = this.getLegState(pal, leg);\n\n    state.restTimer = constrain(\n      0,\n      this.config.stepRestDuration,\n      state.restTimer - dtSeconds,\n    );\n    if (isResting(state)) return;\n\n    if (isStepping(state)) {\n      state.stepProgress = constrain(\n        0,\n        1,\n        state.stepProgress + dtSeconds / this.config.stepDuration,\n      );\n\n      if (state.stepProgress === 1) {\n        state.lastFootOnFloorXY = this.getFootXY(pal, leg, state);\n        state.lastFootOnFloorPalPosition = pal.position;\n        state.stepProgress = 0;\n        state.restTimer = this.config.stepDuration;\n      }\n    } else {\n      const footLeanDistance = leg\n        .getFootXY()\n        .distanceTo(leg.getIdealFootRestingXY());\n      if (\n        footLeanDistance > this.config.stepThreshold &&\n        this.canLiftLeg(pal, legs, leg)\n      ) {\n        state.currentStepMaxLift = constrain(\n          0,\n          1,\n          mapRange(\n            this.config.stepThreshold,\n            this.config.fullStepDistance,\n            0.1,\n            1,\n            footLeanDistance,\n          ),\n        );\n        state.stepProgress = constrain(\n          0,\n          1,\n          state.stepProgress + dtSeconds / this.config.stepDuration,\n        );\n      }\n    }\n  }\n\n  private getInitialLegState(pal: PalControlData, leg: PalLegGeom): LegState {\n    return {\n      lastFootOnFloorXY: leg.getIdealFootRestingXY(),\n      lastFootOnFloorPalPosition: pal.position,\n      stepProgress: 0,\n      restTimer: 0,\n      currentStepMaxLift: 1,\n    };\n  }\n\n  private getLegState(pal: PalControlData, leg: PalLegGeom): LegState {\n    const state = this.legStates.get(leg);\n    if (state) {\n      return state;\n    }\n\n    const initialState = this.getInitialLegState(pal, leg);\n    this.legStates.set(leg, initialState);\n    return initialState;\n  }\n\n  private getLegUpdate(pal: PalControlData, leg: PalLegGeom): PalLegGeomUpdate {\n    const state = this.getLegState(pal, leg);\n    return {\n      footXY: this.getFootXY(pal, leg, state),\n      footProjectionOrigin: this.getFootOrigin(pal, leg, state),\n      liftAmount: this.getLegLiftAmount(state),\n    };\n  }\n\n  private getFootXY(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    if (isStepping(state)) {\n      const start = state.lastFootOnFloorXY;\n      const target = this.getPredictedIdealFootXYAtEndOfOfStep(pal, leg, state);\n      return start.lerp(target, state.stepProgress);\n    }\n\n    return state.lastFootOnFloorXY;\n  }\n\n  private getFootOrigin(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    if (isStepping(state)) {\n      return state.lastFootOnFloorPalPosition.lerp(\n        pal.position,\n        state.stepProgress,\n      );\n    }\n\n    return state.lastFootOnFloorPalPosition;\n  }\n\n  private getPredictedIdealFootXYAtEndOfOfStep(\n    pal: PalControlData,\n    leg: PalLegGeom,\n    state: LegState,\n  ): Vector2 {\n    const timeRemaining = (1.4 - state.stepProgress) * this.config.stepDuration;\n\n    const predictedPosition = pal\n      .getVelocity()\n      .scale(timeRemaining)\n      .add(pal.position);\n\n    const predictedHeading = pal.heading + pal.headingVelocity * timeRemaining;\n\n    return Vector2.fromPolar(\n      predictedHeading + leg.angleOffset,\n      leg.floorRadius,\n    ).add(predictedPosition);\n  }\n\n  private getLegLiftAmount({\n    stepProgress,\n    currentStepMaxLift,\n  }: LegState): number {\n    return Math.sin(stepProgress * Math.PI) * currentStepMaxLift;\n  }\n}\n","import Color from 'color';\nimport { varyRelative, varyAbsolute, random, randomInt } from '../lib/utils';\nimport { BLUE } from './colors';\n\nexport type PalConfig = {\n  radius: number;\n  bodHeight: number;\n  bodBob: number;\n  eyeY: number;\n  eyeX: number;\n  eyeRadius: number;\n  mouthThickness: number;\n  mouthY: number;\n  mouthWidth: number;\n  mouthSmile: number;\n  buttTop: number;\n  buttBottom: number;\n  buttThickness: number;\n  color: Color;\n  hipHeight: number;\n  kneeScale: number;\n  legMaxLift: number;\n  kneeMaxOut: number;\n  stepDuration: number;\n  stepRestDuration: number;\n  stepThreshold: number;\n  fullStepDistance: number;\n  legWidth: number;\n  legPairs: number;\n};\n\nexport const classicPalConfig: PalConfig = {\n  radius: 14,\n  bodHeight: 25,\n  bodBob: 15,\n  eyeY: 6,\n  eyeX: 5,\n  eyeRadius: 2,\n  mouthThickness: 2,\n  mouthY: 2,\n  mouthWidth: 8,\n  mouthSmile: 4,\n  buttTop: 6,\n  buttBottom: 12,\n  buttThickness: 1.4,\n  color: BLUE.lighten(0.2),\n  hipHeight: 10,\n  kneeScale: 1.3,\n  legMaxLift: 0.3,\n  kneeMaxOut: 14,\n  stepDuration: 0.2,\n  stepRestDuration: 0.2,\n  stepThreshold: 0.2,\n  fullStepDistance: 20,\n  legWidth: 4,\n  legPairs: 1,\n};\n\nexport const generateRandomPalConfig = (): PalConfig => {\n  const radius = varyRelative(14, 0.2);\n  const hipHeight = varyRelative(radius * 0.7, 0.3);\n  const bodHeight = varyRelative(radius * 2, 0.3);\n  const legLength = bodHeight - (radius - hipHeight); // typical: 24\n\n  return {\n    radius,\n    bodHeight,\n    bodBob: varyRelative(radius, 0.2),\n    eyeY: varyRelative(radius * 0.5, 0.2),\n    eyeX: varyRelative(radius * 0.4, 0.3),\n    eyeRadius: varyRelative(radius * 0.15, 0.4),\n    mouthThickness: varyRelative(radius * 0.15, 0.4),\n    mouthY: varyAbsolute(0, radius * 0.2),\n    mouthWidth: varyRelative(radius * 0.5, 0.3),\n    mouthSmile: varyRelative(radius * 0.3, 0.3),\n    buttTop: varyRelative(radius * 0.4, 0.2),\n    buttBottom: varyRelative(radius * 0.85, 0.15),\n    buttThickness: varyRelative(radius * 0.1, 0.5),\n    color: BLUE.lighten(random(-0.2, 0.2))\n      .saturate(random(-0.2, 0.2))\n      .rotate(random(-10, 10)),\n    hipHeight,\n    kneeScale: varyAbsolute(1.3, 0.3),\n    legMaxLift: random(0.2, 0.5),\n    kneeMaxOut: varyRelative(legLength * 0.6, 0.4),\n    stepDuration: varyRelative(legLength * 0.01, 0.4),\n    stepRestDuration: varyRelative(legLength * 0.0083, 0.4),\n    stepThreshold: varyRelative(legLength * 0.01, 0.4),\n    fullStepDistance: varyRelative(legLength * 0.7, 0.4),\n    legWidth: varyRelative(radius * 0.3, 0.4),\n    legPairs: randomInt(1, 4),\n  };\n};\n","import Color from 'color';\n\n// https://coolors.co/f8ffe5-06d6a0-1b9aaa-ef476f-ffc43d\nexport const LIGHT_BG = new Color('#F8FFE5');\nexport const TEAL = new Color('#06D6A0');\nexport const BLUE = new Color('#1B9AAA');\nexport const RED = new Color('#EF476F');\nexport const YELLOW = new Color('#FFC43D');\n"],"names":["$67415279aea4fa31$export$771f7f07404bb309","Component","entity","position","call","this","speed","heading","headingVelocity","key","getHeadingVec","scale","$54lVR","default","fromPolar","$eCbAo","$67415279aea4fa31$export$5afbdcac57724934","target","data","addComponent","newTarget","dtMilliseconds","dtSeconds","angleToTarget","angleTo","distance","distanceTo","accelerate","angleDelta","$8pNpe","normalizeAngle","lastHeading","amt","lastSpeed","constrain","avgSpeed","add","$67415279aea4fa31$export$322a75620edc3405","lastPosition","$01b4d2aebfb060de$var$HALF_PI","Math","PI","$01b4d2aebfb060de$export$9099ad97b570f7c","config","animationController","bobAmount","controlData","getComponent","$6zCnW","PalControlData","legs","shuffle","flatten","times","legPairs","n","progress","$ih3lo","_this","$eUMMJ","assertThisInitialized","lerp","update1","update","$diH60","assert","length","forEach","leg","i","bob","bodBob","$a5M8K","x","y","bodHeight","radius","$b23bdc4ed229300c$export$9099ad97b570f7c","center","Object","freeze","$7B1qO","radians","cos","sin","point","other","$c5e41071047a02b8$var$getLegRadius","param","hipHeight","legWidth","sqrt","$c5e41071047a02b8$export$9099ad97b570f7c","palData","palGeom","angleOffset","liftAmount","hipRadius","kneeRadius","kneeScale","floorRadius","footXY","getIdealFootRestingXY","footOrigin","footProjectionOrigin","getHipZ","legMaxLift","kneeMaxOut","getFootZ","getHipOrigin","getFootOrigin","bod","getBod","$c675f3fa01b38062$var$HALF_PI","$c675f3fa01b38062$export$9099ad97b570f7c","geom","$cw897","ctx","setLineDash","beginPath","ellipse","fillStyle","fill","filter","l","drawLeg","drawBod","angle","colorDarkenAmount","abs","legColor","color","darken","hip","projectZ","getHipXY","knee","getKneeXY","getKneeZ","getKneeOrigin","foot","getFootXY","moveTo","quadraticCurveTo","lineCap","strokeStyle","toString","lineWidth","stroke","save","$ao5QL","circle","clip","faceX","eyeX","eyeY","eyeRadius","mouthWidth","mouthY","mouthSmile","mouthThickness","makeButtLine","buttThickness","restore","buttX","buttTop","buttBottom","xy","z","origin","$67fecbe272f4dc33$export$6d7591033d9fdf14","arc","$67fecbe272f4dc33$export$2d694b79c3fc5e44","path","segments","getStart","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","segment","value","$laB6d","lineTo","getEnd","$bJddX","Error","concat","startAngle","endAngle","isAnticlockwise","err","return","$67f0dded92d082da$export$9099ad97b570f7c","start","end","line","$7RPk8","delta","getDelta","magnitude","constrainedPosition","getLength","withMagnitude","$33217af47750d189$var$isSlopeVertical","slope","Infinity","$33217af47750d189$export$9099ad97b570f7c","a","b","sub","isVertical","fromSlopeAndPoint","perpendicularSlope","isParallelTo","verticalX","displacement","fromSlopeAndDisplacement","$c7a7436f4384d2fe$export$9099ad97b570f7c","pointOnCircumference","atan2","proportion","angleDifference","circumference","mapRange","$671723dd4393d2fe$var$isStepping","stepProgress","$671723dd4393d2fe$export$9099ad97b570f7c","legStates","Map","pal","updateLegState","legUpdates","map","getLegUpdate","reduce","sum","includes","enoughLegsOnFloor","getLegState","floor","log","anyStepsJustStarted","some","leg1","state","bind","restTimer","stepRestDuration","stepDuration","lastFootOnFloorXY","lastFootOnFloorPalPosition","footLeanDistance","stepThreshold","canLiftLeg","currentStepMaxLift","fullStepDistance","get","initialState","getInitialLegState","set","getLegLiftAmount","getPredictedIdealFootXYAtEndOfOfStep","timeRemaining","predictedPosition","getVelocity","predictedHeading","$28eee7c63212e6bd$export$9b1652e9c90e3c24","$9NHDg","BLUE","lighten","varyRelative","legLength","varyAbsolute","random","saturate","rotate","randomInt","$4324f7adc0715d00$export$a283c84a2d1e7223","$parcel$interopDefault","$aG1uz"],"version":3,"file":"index.b702e1d5.js.map"}