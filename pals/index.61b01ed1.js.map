{"mappings":"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","sources":["src/lib/scene/Scene.ts","src/lib/assert.ts","src/lib/scene/Entity.ts","src/lib/scene/SceneObject.ts","src/lib/scene/SortOrderProvider.ts","src/lib/scene/Component.ts"],"sourcesContent":["import { assert } from '../assert';\nimport SceneObject from './SceneObject';\nimport SceneSystem from './SceneSystem';\n\nconst speed = 1;\nconst scale = 1;\nconst repeatUpdate = 1;\n\ntype SystemClass<T extends SceneSystem = SceneSystem> = {\n  systemName: string;\n  new (): T;\n};\n\nexport default class Scene {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  private _scaleFactor: number;\n  private _children: SceneObject[] = [];\n  private _isPlaying: boolean = false;\n  private frameHandle: number | null = null;\n  private lastElapsedTime: number | null = null;\n  private systemsByClass = new Map<SystemClass<SceneSystem>, SceneSystem>();\n\n  constructor(width: number, height: number, scaleFactor: number = 1) {\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = width * scaleFactor;\n    this.canvas.height = height * scaleFactor;\n    this.canvas.style.width = `${width}px`;\n    this.canvas.style.height = `${height}px`;\n    const ctx = this.canvas.getContext('2d');\n    assert(ctx, 'ctx');\n    this.ctx = ctx;\n    this._scaleFactor = scaleFactor * scale;\n\n    this._setupVisiblityChange();\n  }\n\n  get width(): number {\n    return this.canvas.width / this._scaleFactor;\n  }\n\n  get height(): number {\n    return this.canvas.height / this._scaleFactor;\n  }\n\n  get scaleFactor(): number {\n    return this._scaleFactor;\n  }\n\n  get isPlaying(): boolean {\n    return this.frameHandle !== null && this._isPlaying;\n  }\n\n  set isPlaying(newValue: boolean) {\n    assert(\n      this.frameHandle !== null,\n      'cannot set isPlaying without calling start',\n    );\n    this._isPlaying = newValue;\n  }\n\n  get children(): SceneObject[] {\n    return this._children;\n  }\n\n  appendTo(element: HTMLElement) {\n    element.appendChild(this.canvas);\n  }\n\n  hasSystem(systemType: SystemClass): boolean {\n    return this.systemsByClass.has(systemType);\n  }\n\n  getSystem<T extends SceneSystem>(systemType: SystemClass<T>): T {\n    const system = this.systemsByClass.get(systemType);\n    assert(system, `system, ${systemType.systemName} not found`);\n    assert(system instanceof systemType, 'system is wrong instance type');\n    return system;\n  }\n\n  addSystem(system: SceneSystem) {\n    assert(\n      !this.hasSystem(system.constructor as any),\n      'only one system of each type allowed',\n    );\n    this.systemsByClass.set(system.constructor as any, system);\n    system.afterAddToScene(this);\n  }\n\n  removeSystem(systemType: SystemClass) {\n    const system = this.getSystem(systemType);\n    system.beforeRemoveFromScene(this);\n    this.systemsByClass.delete(systemType);\n  }\n\n  addChild(child: SceneObject) {\n    this._children.push(child);\n    child.onAddedToScene(this);\n  }\n\n  addChildBefore(targetChild: SceneObject, newChild: SceneObject) {\n    const index = this._children.indexOf(targetChild);\n    assert(index !== -1, 'target child must be present');\n\n    this.addChildAtIndex(index, newChild);\n  }\n\n  addChildAfter(targetChild: SceneObject, newChild: SceneObject) {\n    const index = this._children.indexOf(targetChild);\n    assert(index !== -1, 'target child must be present');\n\n    this.addChildAtIndex(index + 1, newChild);\n  }\n\n  addChildAtIndex(index: number, child: SceneObject) {\n    this._children.splice(index, 0, child);\n    child.onAddedToScene(this);\n  }\n\n  removeChild(child: SceneObject): boolean {\n    const index = this._children.indexOf(child);\n    if (index === -1) return false;\n\n    this.removeChildAtIndex(index);\n    return true;\n  }\n\n  removeChildAtIndex(index: number): SceneObject {\n    const child = this._children[index];\n    this._children.splice(index, 1);\n    child.onRemovedFromScene();\n    return child;\n  }\n\n  update(delta: number) {\n    for (let i = 0; i < repeatUpdate; i++) {\n      for (const system of this.systemsByClass.values()) {\n        system.beforeUpdate(delta);\n      }\n      this._children.forEach((child) => child.update(delta));\n      for (const system of this.systemsByClass.values()) {\n        system.afterUpdate(delta);\n      }\n    }\n  }\n\n  draw(elapsedTime: number) {\n    this.ctx.save();\n    this.ctx.scale(this._scaleFactor, this._scaleFactor);\n    this.ctx.clearRect(0, 0, this.width, this.height);\n\n    for (const system of this.systemsByClass.values()) {\n      system.beforeDraw(this.ctx, elapsedTime);\n    }\n    this._children\n      .sort((a, b) => a.getSortOrder() - b.getSortOrder())\n      .forEach((child) => child.draw(this.ctx, elapsedTime));\n    for (const system of this.systemsByClass.values()) {\n      system.afterDraw(this.ctx, elapsedTime);\n    }\n\n    this.ctx.restore();\n  }\n\n  start() {\n    this._isPlaying = true;\n    this.frameHandle = window.requestAnimationFrame(this._tick);\n  }\n\n  stop() {\n    if (this.frameHandle !== null) {\n      window.cancelAnimationFrame(this.frameHandle);\n      this.frameHandle = null;\n    }\n    this._isPlaying = false;\n    this.lastElapsedTime = null;\n  }\n\n  _tick = (elapsedTime: number) => {\n    elapsedTime = elapsedTime * speed;\n    const lastElapsedTime = this.lastElapsedTime;\n    if (lastElapsedTime !== null) {\n      const deltaTime = elapsedTime - lastElapsedTime;\n      if (this.isPlaying) {\n        this.update(deltaTime);\n        this.draw(elapsedTime);\n      }\n    }\n\n    this.lastElapsedTime = elapsedTime;\n    this.frameHandle = window.requestAnimationFrame(this._tick);\n  };\n\n  _setupVisiblityChange() {\n    let playOnVisible = false;\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden && this.isPlaying) {\n        playOnVisible = true;\n        this.stop();\n      }\n      if (playOnVisible && !document.hidden) {\n        playOnVisible = false;\n        this.start();\n      }\n    });\n  }\n}\n","export function fail(message: string): never {\n  throw new Error(message);\n}\n\nexport function assert(value: unknown, message?: string): asserts value {\n  if (!value) {\n    fail(message || 'Assertion Error');\n  }\n}\n","import SceneObject from './SceneObject';\nimport Component from './Component';\nimport { assert } from '../assert';\nimport SortOrderProvider from './SortOrderProvider';\nimport Scene from './Scene';\n\ntype ComponentClass<T extends Component, Args extends unknown[]> = {\n  name: string;\n  new (entity: Entity, ...args: Args): T;\n};\n\nexport default class Entity extends SceneObject {\n  private componentInstances = new Map<\n    ComponentClass<Component, any>,\n    Component\n  >();\n\n  addComponent<T extends Component, Args extends unknown[]>(\n    component: ComponentClass<T, Args>,\n    ...args: Args\n  ): T {\n    assert(\n      !this.componentInstances.has(component),\n      `component instance ${component.name} already exists`,\n    );\n    const instance = new component(this, ...args);\n    this.componentInstances.set(component, instance);\n    return instance;\n  }\n\n  hasComponent<T extends Component>(\n    component: ComponentClass<T, any[]>,\n  ): boolean {\n    return this.componentInstances.has(component);\n  }\n\n  getComponent<T extends Component>(component: ComponentClass<T, any[]>): T {\n    const instance = this.componentInstances.get(component);\n    assert(instance, `no instance for ${component.name} exists`);\n    assert(instance instanceof component, 'wrong instance type');\n    return instance;\n  }\n\n  removeComponent<T extends Component>(component: ComponentClass<T, any[]>): T {\n    const instance = this.getComponent(component);\n    this.componentInstances.delete(component);\n    instance.onRemove();\n    return instance;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, elapsedTime: number): void {\n    for (const component of this.componentInstances.values()) {\n      component.beforeDraw(ctx, elapsedTime);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.draw(ctx, elapsedTime);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.afterDraw(ctx, elapsedTime);\n    }\n  }\n  update(delta: number): void {\n    for (const component of this.componentInstances.values()) {\n      component.beforeUpdate(delta);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.update(delta);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.afterUpdate(delta);\n    }\n  }\n\n  onAddedToScene(scene: Scene) {\n    super.onAddedToScene(scene);\n    for (const component of this.componentInstances.values()) {\n      component.onAddedToScene(scene);\n    }\n  }\n\n  onRemovedFromScene() {\n    const scene = this.getScene();\n    super.onRemovedFromScene();\n    for (const component of this.componentInstances.values()) {\n      component.onRemovedFromScene(scene);\n    }\n  }\n\n  getSortOrder() {\n    if (this.hasComponent(SortOrderProvider)) {\n      return this.getComponent(SortOrderProvider).getSortOrder();\n    } else {\n      return super.getSortOrder();\n    }\n  }\n}\n","import { assert } from '../assert';\nimport Scene from './Scene';\n\nconst constructorIdCounts = {} as Record<string, number>;\n\nconst getNextCount = (name: string): string => {\n  if (!constructorIdCounts[name]) constructorIdCounts[name] = 0;\n  return `${name}@${constructorIdCounts[name]++}`;\n};\n\nexport default abstract class SceneObject {\n  id: string = getNextCount(this.constructor.name);\n  private scene: Scene | null = null;\n\n  hasScene(): boolean {\n    return this.scene !== null;\n  }\n\n  getScene(): Scene {\n    assert(this.scene, 'scene must be present');\n    return this.scene;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, elapsedTime: number): void {}\n  update(delta: number): void {}\n\n  addTo(scene: Scene): this {\n    scene.addChild(this);\n    return this;\n  }\n\n  onAddedToScene(scene: Scene) {\n    this.scene = scene;\n  }\n\n  onRemovedFromScene() {\n    this.scene = null;\n  }\n\n  getSortOrder(): number {\n    return 0;\n  }\n}\n","import Component from './Component';\nimport Entity from './Entity';\n\nexport default class SortOrderProvider extends Component {\n  constructor(\n    entity: Entity,\n    private getSortOrderFn: (entity: Entity) => number,\n  ) {\n    super(entity);\n  }\n\n  getSortOrder(): number {\n    return this.getSortOrderFn(this.entity);\n  }\n}\n","import Entity from './Entity';\nimport Scene from './Scene';\n\nexport default abstract class Component {\n  readonly entity: Entity;\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  onRemove() {}\n\n  onAddedToScene(scene: Scene) {}\n\n  onRemovedFromScene(scene: Scene) {}\n\n  beforeUpdate(delta: number) {}\n\n  update(delta: number) {}\n\n  afterUpdate(delta: number) {}\n\n  beforeDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  draw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  afterDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  getScene(): Scene {\n    return this.entity.getScene();\n  }\n}\n"],"names":["$25a250b24a7929ba$export$9099ad97b570f7c","width","height","param","scaleFactor","_children","_isPlaying","frameHandle","lastElapsedTime","systemsByClass","Map","_tick","elapsedTime","this","deltaTime","isPlaying","update","draw","window","requestAnimationFrame","bind","canvas","document","createElement","style","concat","ctx","getContext","$diH60","assert","_scaleFactor","_setupVisiblityChange","key","newValue","element","appendChild","systemType","has","system","get","systemName","hasSystem","constructor","set","afterAddToScene","getSystem","beforeRemoveFromScene","delete","child","push","onAddedToScene","targetChild","newChild","index","indexOf","addChildAtIndex","splice","removeChildAtIndex","onRemovedFromScene","delta","i","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","values","Symbol","iterator","next","done","value","beforeUpdate","err","return","forEach","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","afterUpdate","save","scale","clearRect","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","beforeDraw","sort","a","b","getSortOrder","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","afterDraw","restore","cancelAnimationFrame","playOnVisible","addEventListener","hidden","stop","start","$52750c4f2800ba92$export$62d771998a1345d1","message","Error","$52750c4f2800ba92$export$b8795f4f643ce74f","$c9b8955300fed54d$export$9099ad97b570f7c","SceneObject","apply","arguments","componentInstances","component","_len","length","args","Array","_key","name","instance","$eUMMJ","construct","toConsumableArray","getComponent","onRemove","scene","prototype","call","getScene","hasComponent","$8JKq7","default","$bApi3","$4216f8fee303c5f5$var$constructorIdCounts","$4216f8fee303c5f5$export$9099ad97b570f7c","id","addChild","$358c4e7e6dcb4654$export$9099ad97b570f7c","Component","entity","getSortOrderFn","$80b85a9ea574141b$export$9099ad97b570f7c","time"],"version":3,"file":"index.61b01ed1.js.map"}