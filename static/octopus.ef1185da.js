import{x as oe,m as K,t as j,g as pt,y as Ke,l as gt,a as $,h as Et,z as bt,A as yt,B as St,f as Nt,C as k,D as wt,u as _t,s as Le}from"./chunk_utils.6b6c081d.js";/* empty css                       */import{j as N,a as x,F as pe}from"./chunk_jsx-runtime.c8900cdf.js";import{D as Mt}from"./chunk_DebugDraw.f44d647a.js";import{S as ge,V as le}from"./chunk_Vector2.355c88df.js";import{E as de}from"./chunk_EventEmitter.daf2b5cf.js";import{g as vt,s as It}from"./chunk_storage.53b3eddc.js";import{u as Ee}from"./chunk_useStoredState.4a137abc.js";import{r as S,a as At}from"./chunk_index.0b9c6f54.js";import{c as be}from"./chunk_index.2e4736b8.js";import{R as Ct}from"./chunk_ResizeObserver.41516555.js";import"./chunk__commonjsHelpers.725317a4.js";class D{constructor(e=!1){this.eventMap={},this.eventsSuspended=e==!0}addListener(e,t,n={}){if(typeof e=="string"&&e.length<1||e instanceof String&&e.length<1||typeof e!="string"&&!(e instanceof String)&&e!==D.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(typeof t!="function")throw new TypeError("The callback must be a function.");const r=new Pe(e,this,t,n);return this.eventMap[e]||(this.eventMap[e]=[]),n.prepend?this.eventMap[e].unshift(r):this.eventMap[e].push(r),r}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(e,t){return e===void 0?this.eventMap[D.ANY_EVENT]&&this.eventMap[D.ANY_EVENT].length>0?!0:Object.entries(this.eventMap).some(([,n])=>n.length>0):this.eventMap[e]&&this.eventMap[e].length>0?t instanceof Pe?this.eventMap[e].filter(r=>r===t).length>0:typeof t=="function"?this.eventMap[e].filter(r=>r.callback===t).length>0:t==null:!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(t=>{t.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(t=>{t.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(e,...t){if(typeof e!="string"&&!(e instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let n=[],r=this.eventMap[D.ANY_EVENT]||[];return this.eventMap[e]&&(r=r.concat(this.eventMap[e])),r.forEach(s=>{if(s.suspended)return;let o=[...t];Array.isArray(s.arguments)&&(o=o.concat(s.arguments)),s.remaining>0&&(n.push(s.callback.apply(s.context,o)),s.count++),--s.remaining<1&&s.remove()}),n}removeListener(e,t,n={}){if(e===void 0){this.eventMap={};return}else if(!this.eventMap[e])return;let r=this.eventMap[e].filter(s=>t&&s.callback!==t||n.remaining&&n.remaining!==s.remaining||n.context&&n.context!==s.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise((n,r)=>{let s,o=this.addListener(e,()=>{clearTimeout(s),n()},{remaining:1});t.duration!==1/0&&(s=setTimeout(()=>{o.remove(),r("The duration expired before the event was emitted.")},t.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class Pe{constructor(e,t,n,r={}){if(typeof e!="string"&&!(e instanceof String)&&e!==D.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!t)throw new ReferenceError("The 'target' parameter is mandatory.");if(typeof n!="function")throw new TypeError("The 'callback' must be a function.");r.arguments!==void 0&&!Array.isArray(r.arguments)&&(r.arguments=[r.arguments]),r=Object.assign({context:t,remaining:1/0,arguments:void 0,duration:1/0},r),r.duration!==1/0&&setTimeout(()=>this.remove(),r.duration),this.arguments=r.arguments,this.callback=n,this.context=r.context,this.count=0,this.event=e,this.remaining=parseInt(r.remaining)>=1?parseInt(r.remaining):1/0,this.suspended=!1,this.target=t}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}/**
 * The `Enumerations` class contains enumerations and arrays of elements used throughout the
 * library. All its properties are static and should be referenced using the class name. For
 * example: `Enumerations.CHANNEL_MESSAGES`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class a{static get MIDI_CHANNEL_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MESSAGES enum instead."),a.CHANNEL_MESSAGES}static get CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_NUMBERS(){return this.validation&&console.warn("The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the Enumerations.CHANNEL_NUMBERS array instead."),[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MODE_MESSAGES enum instead."),a.CHANNEL_MODE_MESSAGES}static get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the Enumerations.CONTROL_CHANGE_MESSAGES array instead."),{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get CONTROL_CHANGE_MESSAGES(){return[{number:0,name:"bankselectcoarse",description:"Bank Select (Coarse)",position:"msb"},{number:1,name:"modulationwheelcoarse",description:"Modulation Wheel (Coarse)",position:"msb"},{number:2,name:"breathcontrollercoarse",description:"Breath Controller (Coarse)",position:"msb"},{number:3,name:"controller3",description:"Undefined",position:"msb"},{number:4,name:"footcontrollercoarse",description:"Foot Controller (Coarse)",position:"msb"},{number:5,name:"portamentotimecoarse",description:"Portamento Time (Coarse)",position:"msb"},{number:6,name:"dataentrycoarse",description:"Data Entry (Coarse)",position:"msb"},{number:7,name:"volumecoarse",description:"Channel Volume (Coarse)",position:"msb"},{number:8,name:"balancecoarse",description:"Balance (Coarse)",position:"msb"},{number:9,name:"controller9",description:"Controller 9 (Coarse)",position:"msb"},{number:10,name:"pancoarse",description:"Pan (Coarse)",position:"msb"},{number:11,name:"expressioncoarse",description:"Expression Controller (Coarse)",position:"msb"},{number:12,name:"effectcontrol1coarse",description:"Effect Control 1 (Coarse)",position:"msb"},{number:13,name:"effectcontrol2coarse",description:"Effect Control 2 (Coarse)",position:"msb"},{number:14,name:"controller14",description:"Undefined",position:"msb"},{number:15,name:"controller15",description:"Undefined",position:"msb"},{number:16,name:"generalpurposecontroller1",description:"General Purpose Controller 1 (Coarse)",position:"msb"},{number:17,name:"generalpurposecontroller2",description:"General Purpose Controller 2 (Coarse)",position:"msb"},{number:18,name:"generalpurposecontroller3",description:"General Purpose Controller 3 (Coarse)",position:"msb"},{number:19,name:"generalpurposecontroller4",description:"General Purpose Controller 4 (Coarse)",position:"msb"},{number:20,name:"controller20",description:"Undefined",position:"msb"},{number:21,name:"controller21",description:"Undefined",position:"msb"},{number:22,name:"controller22",description:"Undefined",position:"msb"},{number:23,name:"controller23",description:"Undefined",position:"msb"},{number:24,name:"controller24",description:"Undefined",position:"msb"},{number:25,name:"controller25",description:"Undefined",position:"msb"},{number:26,name:"controller26",description:"Undefined",position:"msb"},{number:27,name:"controller27",description:"Undefined",position:"msb"},{number:28,name:"controller28",description:"Undefined",position:"msb"},{number:29,name:"controller29",description:"Undefined",position:"msb"},{number:30,name:"controller30",description:"Undefined",position:"msb"},{number:31,name:"controller31",description:"Undefined",position:"msb"},{number:32,name:"bankselectfine",description:"Bank Select (Fine)",position:"lsb"},{number:33,name:"modulationwheelfine",description:"Modulation Wheel (Fine)",position:"lsb"},{number:34,name:"breathcontrollerfine",description:"Breath Controller (Fine)",position:"lsb"},{number:35,name:"controller35",description:"Undefined",position:"lsb"},{number:36,name:"footcontrollerfine",description:"Foot Controller (Fine)",position:"lsb"},{number:37,name:"portamentotimefine",description:"Portamento Time (Fine)",position:"lsb"},{number:38,name:"dataentryfine",description:"Data Entry (Fine)",position:"lsb"},{number:39,name:"channelvolumefine",description:"Channel Volume (Fine)",position:"lsb"},{number:40,name:"balancefine",description:"Balance (Fine)",position:"lsb"},{number:41,name:"controller41",description:"Undefined",position:"lsb"},{number:42,name:"panfine",description:"Pan (Fine)",position:"lsb"},{number:43,name:"expressionfine",description:"Expression Controller (Fine)",position:"lsb"},{number:44,name:"effectcontrol1fine",description:"Effect control 1 (Fine)",position:"lsb"},{number:45,name:"effectcontrol2fine",description:"Effect control 2 (Fine)",position:"lsb"},{number:46,name:"controller46",description:"Undefined",position:"lsb"},{number:47,name:"controller47",description:"Undefined",position:"lsb"},{number:48,name:"controller48",description:"General Purpose Controller 1 (Fine)",position:"lsb"},{number:49,name:"controller49",description:"General Purpose Controller 2 (Fine)",position:"lsb"},{number:50,name:"controller50",description:"General Purpose Controller 3 (Fine)",position:"lsb"},{number:51,name:"controller51",description:"General Purpose Controller 4 (Fine)",position:"lsb"},{number:52,name:"controller52",description:"Undefined",position:"lsb"},{number:53,name:"controller53",description:"Undefined",position:"lsb"},{number:54,name:"controller54",description:"Undefined",position:"lsb"},{number:55,name:"controller55",description:"Undefined",position:"lsb"},{number:56,name:"controller56",description:"Undefined",position:"lsb"},{number:57,name:"controller57",description:"Undefined",position:"lsb"},{number:58,name:"controller58",description:"Undefined",position:"lsb"},{number:59,name:"controller59",description:"Undefined",position:"lsb"},{number:60,name:"controller60",description:"Undefined",position:"lsb"},{number:61,name:"controller61",description:"Undefined",position:"lsb"},{number:62,name:"controller62",description:"Undefined",position:"lsb"},{number:63,name:"controller63",description:"Undefined",position:"lsb"},{number:64,name:"damperpedal",description:"Damper Pedal On/Off"},{number:65,name:"portamento",description:"Portamento On/Off"},{number:66,name:"sostenuto",description:"Sostenuto On/Off"},{number:67,name:"softpedal",description:"Soft Pedal On/Off"},{number:68,name:"legatopedal",description:"Legato Pedal On/Off"},{number:69,name:"hold2",description:"Hold 2 On/Off"},{number:70,name:"soundvariation",description:"Sound Variation",position:"lsb"},{number:71,name:"resonance",description:"Resonance",position:"lsb"},{number:72,name:"releasetime",description:"Release Time",position:"lsb"},{number:73,name:"attacktime",description:"Attack Time",position:"lsb"},{number:74,name:"brightness",description:"Brightness",position:"lsb"},{number:75,name:"decaytime",description:"Decay Time",position:"lsb"},{number:76,name:"vibratorate",description:"Vibrato Rate",position:"lsb"},{number:77,name:"vibratodepth",description:"Vibrato Depth",position:"lsb"},{number:78,name:"vibratodelay",description:"Vibrato Delay",position:"lsb"},{number:79,name:"controller79",description:"Undefined",position:"lsb"},{number:80,name:"generalpurposecontroller5",description:"General Purpose Controller 5",position:"lsb"},{number:81,name:"generalpurposecontroller6",description:"General Purpose Controller 6",position:"lsb"},{number:82,name:"generalpurposecontroller7",description:"General Purpose Controller 7",position:"lsb"},{number:83,name:"generalpurposecontroller8",description:"General Purpose Controller 8",position:"lsb"},{number:84,name:"portamentocontrol",description:"Portamento Control",position:"lsb"},{number:85,name:"controller85",description:"Undefined"},{number:86,name:"controller86",description:"Undefined"},{number:87,name:"controller87",description:"Undefined"},{number:88,name:"highresolutionvelocityprefix",description:"High Resolution Velocity Prefix",position:"lsb"},{number:89,name:"controller89",description:"Undefined"},{number:90,name:"controller90",description:"Undefined"},{number:91,name:"effect1depth",description:"Effects 1 Depth (Reverb Send Level)"},{number:92,name:"effect2depth",description:"Effects 2 Depth"},{number:93,name:"effect3depth",description:"Effects 3 Depth (Chorus Send Level)"},{number:94,name:"effect4depth",description:"Effects 4 Depth"},{number:95,name:"effect5depth",description:"Effects 5 Depth"},{number:96,name:"dataincrement",description:"Data Increment"},{number:97,name:"datadecrement",description:"Data Decrement"},{number:98,name:"nonregisteredparameterfine",description:"Non-Registered Parameter Number (Fine)",position:"lsb"},{number:99,name:"nonregisteredparametercoarse",description:"Non-Registered Parameter Number (Coarse)",position:"msb"},{number:100,name:"registeredparameterfine",description:"Registered Parameter Number (Fine)",position:"lsb"},{number:101,name:"registeredparametercoarse",description:"Registered Parameter Number (Coarse)",position:"msb"},{number:102,name:"controller102",description:"Undefined"},{number:103,name:"controller103",description:"Undefined"},{number:104,name:"controller104",description:"Undefined"},{number:105,name:"controller105",description:"Undefined"},{number:106,name:"controller106",description:"Undefined"},{number:107,name:"controller107",description:"Undefined"},{number:108,name:"controller108",description:"Undefined"},{number:109,name:"controller109",description:"Undefined"},{number:110,name:"controller110",description:"Undefined"},{number:111,name:"controller111",description:"Undefined"},{number:112,name:"controller112",description:"Undefined"},{number:113,name:"controller113",description:"Undefined"},{number:114,name:"controller114",description:"Undefined"},{number:115,name:"controller115",description:"Undefined"},{number:116,name:"controller116",description:"Undefined"},{number:117,name:"controller117",description:"Undefined"},{number:118,name:"controller118",description:"Undefined"},{number:119,name:"controller119",description:"Undefined"},{number:120,name:"allsoundoff",description:"All Sound Off"},{number:121,name:"resetallcontrollers",description:"Reset All Controllers"},{number:122,name:"localcontrol",description:"Local Control On/Off"},{number:123,name:"allnotesoff",description:"All Notes Off"},{number:124,name:"omnimodeoff",description:"Omni Mode Off"},{number:125,name:"omnimodeon",description:"Omni Mode On"},{number:126,name:"monomodeon",description:"Mono Mode On"},{number:127,name:"polymodeon",description:"Poly Mode On"}]}static get REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_REGISTERED_PARAMETERS(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the Enumerations.REGISTERED_PARAMETERS enum instead."),a.MIDI_REGISTERED_PARAMETERS}static get SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the Enumerations.SYSTEM_MESSAGES enum instead."),a.SYSTEM_MESSAGES}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-dataincrement","nrpn-datadecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-dataincrement","rpn-datadecrement","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn-databuttonincrement","rpn-databuttondecrement"]}}/**
 * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
 *
 * `Note` objects can be played back on a single channel by calling
 * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
 * output, by calling [`Output.playNote()`]{@link Output#playNote}.
 *
 * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
 * These can be changed by passing in the appropriate option. It is also possible to set a
 * system-wide default for attack and release velocities by using the
 * [`WebMidi.defaults`](WebMidi#defaults) property.
 *
 * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
 * [`rawRelease`](#rawRelease) to both get and set the values.
 *
 * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
 * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
 * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
 * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
 * [`Output.stopNote()`]{@link Output#stopNote} or similar.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class V{constructor(e,t={}){this.duration=l.defaults.note.duration,this.attack=l.defaults.note.attack,this.release=l.defaults.note.release,t.duration!=null&&(this.duration=t.duration),t.attack!=null&&(this.attack=t.attack),t.rawAttack!=null&&(this.attack=c.from7bitToFloat(t.rawAttack)),t.release!=null&&(this.release=t.release),t.rawRelease!=null&&(this.release=c.from7bitToFloat(t.rawRelease)),Number.isInteger(e)?this.identifier=c.toNoteIdentifier(e):this.identifier=e}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(e){const t=c.getNoteDetails(e);if(l.validation&&!e)throw new Error("Invalid note identifier");this._name=t.name,this._accidental=t.accidental,this._octave=t.octave}get name(){return this._name}set name(e){if(l.validation&&(e=e.toUpperCase(),!["C","D","E","F","G","A","B"].includes(e)))throw new Error("Invalid name value");this._name=e}get accidental(){return this._accidental}set accidental(e){if(l.validation&&(e=e.toLowerCase(),!["#","##","b","bb"].includes(e)))throw new Error("Invalid accidental value");this._accidental=e}get octave(){return this._octave}set octave(e){if(l.validation&&(e=parseInt(e),isNaN(e)))throw new Error("Invalid octave value");this._octave=e}get duration(){return this._duration}set duration(e){if(l.validation&&(e=parseFloat(e),isNaN(e)||e===null||e<0))throw new RangeError("Invalid duration value.");this._duration=e}get attack(){return this._attack}set attack(e){if(l.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid attack value.");this._attack=e}get release(){return this._release}set release(e){if(l.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid release value.");this._release=e}get rawAttack(){return c.fromFloatTo7Bit(this._attack)}set rawAttack(e){this._attack=c.from7bitToFloat(e)}get rawRelease(){return c.fromFloatTo7Bit(this._release)}set rawRelease(e){this._release=c.from7bitToFloat(e)}get number(){return c.toNoteNumber(this.identifier)}getOffsetNumber(e=0,t=0){return l.validation&&(e=parseInt(e)||0,t=parseInt(t)||0),Math.min(Math.max(this.number+e*12+t,0),127)}}/**
 * The `Utilities` class contains general-purpose utility methods. All methods are static and
 * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class c{static toNoteNumber(e,t=0){if(t=t==null?0:parseInt(t),isNaN(t))throw new RangeError("Invalid 'octaveOffset' value");typeof e!="string"&&(e="");const n=this.getNoteDetails(e);if(!n)throw new TypeError("Invalid note identifier");const r={C:0,D:2,E:4,F:5,G:7,A:9,B:11};let s=(n.octave+1+t)*12;if(s+=r[n.name],n.accidental&&(n.accidental.startsWith("b")?s-=n.accidental.length:s+=n.accidental.length),s<0||s>127)throw new RangeError("Invalid octaveOffset value");return s}static getNoteDetails(e){Number.isInteger(e)&&(e=this.toNoteIdentifier(e));const t=e.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!t)throw new TypeError("Invalid note identifier");const n=t[1].toUpperCase(),r=parseInt(t[3]);let s=t[2].toLowerCase();return s=s===""?void 0:s,{accidental:s,identifier:n+(s||"")+r,name:n,octave:r}}static sanitizeChannels(e){let t;if(l.validation){if(e==="all")t=["all"];else if(e==="none")return[]}return Array.isArray(e)?t=e:t=[e],t.indexOf("all")>-1&&(t=a.MIDI_CHANNEL_NUMBERS),t.map(function(n){return parseInt(n)}).filter(function(n){return n>=1&&n<=16})}static toTimestamp(e){let t=!1;const n=parseFloat(e);return isNaN(n)?!1:(typeof e=="string"&&e.substring(0,1)==="+"?n>=0&&(t=l.time+n):n>=0&&(t=n),t)}static guessNoteNumber(e,t){t=parseInt(t)||0;let n=!1;if(Number.isInteger(e)&&e>=0&&e<=127)n=parseInt(e);else if(parseInt(e)>=0&&parseInt(e)<=127)n=parseInt(e);else if(typeof e=="string"||e instanceof String)try{n=this.toNoteNumber(e.trim(),t)}catch{return!1}return n}static toNoteIdentifier(e,t){if(e=parseInt(e),isNaN(e)||e<0||e>127)throw new RangeError("Invalid note number");if(t=t==null?0:parseInt(t),isNaN(t))throw new RangeError("Invalid octaveOffset value");const n=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],r=Math.floor(e/12-1)+t;return n[e%12]+r.toString()}static buildNote(e,t={}){if(t.octaveOffset=parseInt(t.octaveOffset)||0,e instanceof V)return e;let n=this.guessNoteNumber(e,t.octaveOffset);if(n===!1)throw new TypeError(`The input could not be parsed as a note (${e})`);return t.octaveOffset=void 0,new V(n,t)}static buildNoteArray(e,t={}){let n=[];return Array.isArray(e)||(e=[e]),e.forEach(r=>{n.push(this.buildNote(r,t))}),n}static from7bitToFloat(e){return e===1/0&&(e=127),e=parseInt(e)||0,Math.min(Math.max(e/127,0),1)}static fromFloatTo7Bit(e){return e===1/0&&(e=1),e=parseFloat(e)||0,Math.min(Math.max(Math.round(e*127),0),127)}static fromMsbLsbToFloat(e,t=0){l.validation&&(e=Math.min(Math.max(parseInt(e)||0,0),127),t=Math.min(Math.max(parseInt(t)||0,0),127));const n=((e<<7)+t)/16383;return Math.min(Math.max(n,0),1)}static fromFloatToMsbLsb(e){l.validation&&(e=Math.min(Math.max(parseFloat(e)||0,0),1));const t=Math.round(e*16383);return{msb:t>>7,lsb:t&127}}static offsetNumber(e,t=0,n=0){if(l.validation){if(e=parseInt(e),isNaN(e))throw new Error("Invalid note number");t=parseInt(t)||0,n=parseInt(n)||0}return Math.min(Math.max(e+t*12+n,0),127)}static getPropertyByValue(e,t){return Object.keys(e).find(n=>e[n]===t)}static getCcNameByNumber(e){if(!(l.validation&&(e=parseInt(e),!(e>=0&&e<=127))))return a.CONTROL_CHANGE_MESSAGES[e].name}static getCcNumberByName(e){let t=a.CONTROL_CHANGE_MESSAGES.find(n=>n.name===e);return t?t.number:a.MIDI_CONTROL_CHANGE_MESSAGES[e]}static getChannelModeByNumber(e){if(!(e>=120&&e<=127))return!1;for(let t in a.CHANNEL_MODE_MESSAGES)if(a.CHANNEL_MODE_MESSAGES.hasOwnProperty(t)&&e===a.CHANNEL_MODE_MESSAGES[t])return t;return!1}static get isNode(){return typeof process<"u"&&process.versions!=null&&process.versions.node!=null}static get isBrowser(){return typeof window<"u"&&typeof window.document<"u"}}/**
 * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
 * provided by an [`Output`](Output) port which, itself, is made available by a device. The
 * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `OutputChannel` objects can be found inside the parent output's
 * [`channels`]{@link Output#channels} property.
 *
 * @param {Output} output The [`Output`](Output) this channel belongs to.
 * @param {number} number The MIDI channel number (`1` - `16`).
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class Tt extends D{constructor(e,t){super(),this._output=e,this._number=t,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(e,t={time:0}){return this.output.send(e,t),this}sendKeyAftertouch(e,t,n={}){if(l.validation){if(n.useRawValue&&(n.rawValue=n.useRawValue),isNaN(parseFloat(t)))throw new RangeError("Invalid key aftertouch value.");if(n.rawValue){if(!(t>=0&&t<=127&&Number.isInteger(t)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(t>=0&&t<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}n.rawValue||(t=c.fromFloatTo7Bit(t));const r=l.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(e)||(e=[e]),c.buildNoteArray(e).forEach(s=>{this.send([(a.CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),s.getOffsetNumber(r),t],{time:c.toTimestamp(n.time)})}),this}sendControlChange(e,t,n={}){if(typeof e=="string"&&(e=c.getCcNumberByName(e)),Array.isArray(t)||(t=[t]),l.validation){if(e===void 0)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if(t=t.map(r=>{const s=Math.min(Math.max(parseInt(r),0),127);if(isNaN(s))throw new TypeError("Values must be integers between 0 and 127");return s}),t.length===2&&e>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return t.forEach((r,s)=>{this.send([(a.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e+s*32,t[s]],{time:c.toTimestamp(n.time)})}),this}_selectNonRegisteredParameter(e,t={}){return this.sendControlChange(99,e[0],t),this.sendControlChange(98,e[1],t),this}_deselectRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_deselectNonRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_selectRegisteredParameter(e,t={}){return this.sendControlChange(101,e[0],t),this.sendControlChange(100,e[1],t),this}_setCurrentParameter(e,t={}){return e=[].concat(e),this.sendControlChange(6,e[0],t),e.length<2?this:(this.sendControlChange(38,e[1],t),this)}sendRpnDecrement(e,t={}){if(Array.isArray(e)||(e=a.REGISTERED_PARAMETERS[e]),l.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(a.REGISTERED_PARAMETERS).forEach(r=>{a.REGISTERED_PARAMETERS[r][0]===e[0]&&a.REGISTERED_PARAMETERS[r][1]===e[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(97,0,t),this._deselectRegisteredParameter(t),this}sendRpnIncrement(e,t={}){if(Array.isArray(e)||(e=a.REGISTERED_PARAMETERS[e]),l.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(a.REGISTERED_PARAMETERS).forEach(r=>{a.REGISTERED_PARAMETERS[r][0]===e[0]&&a.REGISTERED_PARAMETERS[r][1]===e[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(96,0,t),this._deselectRegisteredParameter(t),this}playNote(e,t={}){this.sendNoteOn(e,t);const n=Array.isArray(e)?e:[e];for(let r of n)if(parseInt(r.duration)>0){const s={time:(c.toTimestamp(t.time)||l.time)+parseInt(r.duration),release:r.release,rawRelease:r.rawRelease};this.sendNoteOff(r,s)}else if(parseInt(t.duration)>0){const s={time:(c.toTimestamp(t.time)||l.time)+parseInt(t.duration),release:t.release,rawRelease:t.rawRelease};this.sendNoteOff(r,s)}return this}sendNoteOff(e,t={}){if(l.validation){if(t.rawRelease!=null&&!(t.rawRelease>=0&&t.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(t.release!=null&&!(t.release>=0&&t.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");t.rawVelocity&&(t.rawRelease=t.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),t.velocity&&(t.release=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;t.rawRelease!=null?n=t.rawRelease:isNaN(t.release)||(n=Math.round(t.release*127));const r=l.octaveOffset+this.output.octaveOffset+this.octaveOffset;return c.buildNoteArray(e,{rawRelease:parseInt(n)}).forEach(s=>{this.send([(a.CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),s.getOffsetNumber(r),s.rawRelease],{time:c.toTimestamp(t.time)})}),this}stopNote(e,t={}){return this.sendNoteOff(e,t)}sendNoteOn(e,t={}){if(l.validation){if(t.rawAttack!=null&&!(t.rawAttack>=0&&t.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(t.attack!=null&&!(t.attack>=0&&t.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");t.rawVelocity&&(t.rawAttack=t.velocity,t.rawRelease=t.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),t.velocity&&(t.attack=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;t.rawAttack!=null?n=t.rawAttack:isNaN(t.attack)||(n=Math.round(t.attack*127));const r=l.octaveOffset+this.output.octaveOffset+this.octaveOffset;return c.buildNoteArray(e,{rawAttack:n}).forEach(s=>{this.send([(a.CHANNEL_MESSAGES.noteon<<4)+(this.number-1),s.getOffsetNumber(r),s.rawAttack],{time:c.toTimestamp(t.time)})}),this}sendChannelMode(e,t=0,n={}){if(typeof e=="string"&&(e=a.CHANNEL_MODE_MESSAGES[e]),l.validation){if(e===void 0)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(e)||!(e>=120&&e<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(t))||t<0||t>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(a.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e,t],{time:c.toTimestamp(n.time)}),this}sendOmniMode(e,t={}){return e===void 0||e?this.sendChannelMode("omnimodeon",0,t):this.sendChannelMode("omnimodeoff",0,t),this}sendChannelAftertouch(e,t={}){if(l.validation){if(isNaN(parseFloat(e)))throw new RangeError("Invalid channel aftertouch value.");if(t.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return this.send([(a.CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(e*127)],{time:c.toTimestamp(t.time)}),this}sendMasterTuning(e,t={}){if(e=parseFloat(e)||0,l.validation&&!(e>-65&&e<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let n=Math.floor(e)+64,r=e-Math.floor(e);r=Math.round((r+1)/2*16383);let s=r>>7&127,o=r&127;return this.sendRpnValue("channelcoarsetuning",n,t),this.sendRpnValue("channelfinetuning",[s,o],t),this}sendModulationRange(e,t,n={}){if(l.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(t!=null&&(!Number.isInteger(t)||!(t>=0&&t<=127)))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return t>=0&&t<=127||(t=0),this.sendRpnValue("modulationrange",[e,t],n),this}sendNrpnValue(e,t,n={}){if(t=[].concat(t),l.validation){if(!Array.isArray(e)||!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");t.forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")})}return this._selectNonRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectNonRegisteredParameter(n),this}sendPitchBend(e,t={}){if(l.validation)if(t.rawValue&&Array.isArray(e)){if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(t.rawValue&&!Array.isArray(e)){if(!(e>=0&&e<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(e)||e===null)throw new RangeError("Invalid pitch bend value.");if(!(e>=-1&&e<=1))throw new RangeError("The pitch bend value must be a float between -1 and 1.")}let n=0,r=0;if(t.rawValue&&Array.isArray(e))n=e[0],r=e[1];else if(t.rawValue&&!Array.isArray(e))n=e;else{const s=c.fromFloatToMsbLsb((e+1)/2);n=s.msb,r=s.lsb}return this.send([(a.CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),r,n],{time:c.toTimestamp(t.time)}),this}sendPitchBendRange(e,t,n={}){if(l.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[e,t],n),this}sendProgramChange(e,t={}){if(e=parseInt(e)||0,l.validation&&!(e>=0&&e<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(a.CHANNEL_MESSAGES.programchange<<4)+(this.number-1),e],{time:c.toTimestamp(t.time)}),this}sendRpnValue(e,t,n={}){if(Array.isArray(e)||(e=a.REGISTERED_PARAMETERS[e]),l.validation){if(!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(t).forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")})}return this._selectRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectRegisteredParameter(n),this}sendTuningBank(e,t={}){if(l.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",e,t),this}sendTuningProgram(e,t={}){if(l.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",e,t),this}sendLocalControl(e,t={}){return e?this.sendChannelMode("localcontrol",127,t):this.sendChannelMode("localcontrol",0,t)}sendAllNotesOff(e={}){return this.sendChannelMode("allnotesoff",0,e)}sendAllSoundOff(e={}){return this.sendChannelMode("allsoundoff",0,e)}sendResetAllControllers(e={}){return this.sendChannelMode("resetallcontrollers",0,e)}sendPolyphonicMode(e,t={}){return e==="mono"?this.sendChannelMode("monomodeon",0,t):this.sendChannelMode("polymodeon",0,t)}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get output(){return this._output}get number(){return this._number}}/**
 * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
 * A port is made available by a MIDI device. A MIDI device can advertise several input and output
 * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
 * property.
 *
 * The `Output` object is automatically instantiated by the library according to the host's MIDI
 * subsystem and should not be directly instantiated.
 *
 * You can access all available `Output` objects by referring to the
 * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
 * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
 * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
 *
 * @fires Output#opened
 * @fires Output#disconnected
 * @fires Output#closed
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class he extends D{constructor(e){super(),this._midiOutput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new Tt(this,t);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._midiOutput.onstatechange=null,await this.close(),this._midiOutput=null}_onStateChange(e){let t={timestamp:l.time};e.port.connection==="open"?(t.type="opened",t.target=this,t.port=t.target,this.emit("opened",t)):e.port.connection==="closed"&&e.port.state==="connected"?(t.type="closed",t.target=this,t.port=t.target,this.emit("closed",t)):e.port.connection==="closed"&&e.port.state==="disconnected"?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught:",e.port.connection,e.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(e){return Promise.reject(e)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}send(e,t={time:0},n=0){if(e instanceof je&&(e=c.isNode?e.data:e.rawData),e instanceof Uint8Array&&c.isNode&&(e=Array.from(e)),l.validation){if(!Array.isArray(e)&&!(e instanceof Uint8Array)&&(e=[e],Array.isArray(t)&&(e=e.concat(t)),t=isNaN(n)?{time:0}:{time:n}),!(parseInt(e[0])>=128&&parseInt(e[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");e.slice(1).forEach(r=>{if(r=parseInt(r),!(r>=0&&r<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")}),t||(t={time:0})}return this._midiOutput.send(e,c.toTimestamp(t.time)),this}sendSysex(e,t=[],n={}){if(e=[].concat(e),t instanceof Uint8Array){const r=new Uint8Array(1+e.length+t.length+1);r[0]=a.SYSTEM_MESSAGES.sysex,r.set(Uint8Array.from(e),1),r.set(t,1+e.length),r[r.length-1]=a.SYSTEM_MESSAGES.sysexend,this.send(r,{time:n.time})}else{const r=e.concat(t,a.SYSTEM_MESSAGES.sysexend);this.send([a.SYSTEM_MESSAGES.sysex].concat(r),{time:n.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():l.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(e,t={}){if(l.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([a.SYSTEM_MESSAGES.timecode,e],{time:t.time}),this}sendSongPosition(e=0,t={}){e=Math.floor(e)||0;var n=e>>7&127,r=e&127;return this.send([a.SYSTEM_MESSAGES.songposition,n,r],{time:t.time}),this}sendSongSelect(e=0,t={}){if(l.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([a.SYSTEM_MESSAGES.songselect,e],{time:t.time}),this}sendTuneRequest(e={}){return this.send([a.SYSTEM_MESSAGES.tunerequest],{time:e.time}),this}sendClock(e={}){return this.send([a.SYSTEM_MESSAGES.clock],{time:e.time}),this}sendStart(e={}){return this.send([a.SYSTEM_MESSAGES.start],{time:e.time}),this}sendContinue(e={}){return this.send([a.SYSTEM_MESSAGES.continue],{time:e.time}),this}sendStop(e={}){return this.send([a.SYSTEM_MESSAGES.stop],{time:e.time}),this}sendActiveSensing(e={}){return this.send([a.SYSTEM_MESSAGES.activesensing],{time:e.time}),this}sendReset(e={}){return this.send([a.SYSTEM_MESSAGES.reset],{time:e.time}),this}sendTuningRequest(e={}){return l.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(e)}sendKeyAftertouch(e,t,n={}){return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendKeyAftertouch(e,t,n)}),this}sendControlChange(e,t,n={},r={}){if(l.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const s=n;n=r,n.channels=s,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendControlChange(e,t,n)}),this}sendPitchBendRange(e=0,t=0,n={}){return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendPitchBendRange(e,t,n)}),this}setPitchBendRange(e=0,t=0,n="all",r={}){return l.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(e,t,r)}sendRpnValue(e,t,n={}){return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendRpnValue(e,t,n)}),this}setRegisteredParameter(e,t=[],n="all",r={}){return l.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(e,t,r)}sendChannelAftertouch(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendChannelAftertouch(e,t)}),this}sendPitchBend(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendPitchBend(e,t)}),this}sendProgramChange(e=0,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendProgramChange(e,t)}),this}sendModulationRange(e,t,n={}){return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendModulationRange(e,t,n)}),this}setModulationRange(e=0,t=0,n="all",r={}){return l.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(e,t,r)}sendMasterTuning(e,t={}){return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendMasterTuning(e,t)}),this}setMasterTuning(e,t={},n={}){return l.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),n.channels=t,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(e,n)}sendTuningProgram(e,t={}){return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendTuningProgram(e,t)}),this}setTuningProgram(e,t="all",n={}){return l.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),n.channels=t,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(e,n)}sendTuningBank(e=0,t={}){return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendTuningBank(e,t)}),this}setTuningBank(e,t="all",n={}){return l.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),n.channels=t,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(e,n)}sendChannelMode(e,t=0,n={},r={}){if(l.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const s=n;n=r,n.channels=s,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendChannelMode(e,t,n)}),this}sendAllSoundOff(e={}){return e.channels==null&&(e.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].sendAllSoundOff(e)}),this}sendAllNotesOff(e={}){return e.channels==null&&(e.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].sendAllNotesOff(e)}),this}sendResetAllControllers(e={},t={}){if(l.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const n=e;e=t,e.channels=n,e.channels==="all"&&(e.channels=a.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendResetAllControllers(e)}),this}sendPolyphonicMode(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendPolyphonicMode(e,t)}),this}sendLocalControl(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendLocalControl(e,t)}),this}sendOmniMode(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendOmniMode(e,t)}),this}sendNrpnValue(e,t,n={}){return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendNrpnValue(e,t,n)}),this}setNonRegisteredParameter(e,t=[],n="all",r={}){return l.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(e,t,r)}sendRpnIncrement(e,t={}){return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendRpnIncrement(e,t)}),this}incrementRegisteredParameter(e,t="all",n={}){return l.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),n.channels=t,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(e,n)}sendRpnDecrement(e,t={}){return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendRpnDecrement(e,t)}),this}decrementRegisteredParameter(e,t="all",n={}){return l.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),n.channels=t,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(e,n)}sendNoteOff(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendNoteOff(e,t)}),this}stopNote(e,t){return this.sendNoteOff(e,t)}playNote(e,t={},n={}){if(l.validation&&(t.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),t.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].playNote(e,t)}),this}sendNoteOn(e,t={},n={}){if(l.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendNoteOn(e,t)}),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}}/**
 * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
 * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
 * to all the outputs listed in its [`destinations`](#destinations) property.
 *
 * If specific channels or message types have been defined in the [`channels`](#channels) or
 * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
 *
 * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
 * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class Ue{constructor(e=[],t={}){this.destinations=[],this.types=[...Object.keys(a.SYSTEM_MESSAGES),...Object.keys(a.CHANNEL_MESSAGES)],this.channels=a.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(e)||(e=[e]),t.types&&!Array.isArray(t.types)&&(t.types=[t.types]),t.channels&&!Array.isArray(t.channels)&&(t.channels=[t.channels]),l.validation&&(e.forEach(n=>{if(!(n instanceof he))throw new TypeError("Destinations must be of type 'Output'.")}),t.types!==void 0&&t.types.forEach(n=>{if(!a.SYSTEM_MESSAGES.hasOwnProperty(n)&&!a.CHANNEL_MESSAGES.hasOwnProperty(n))throw new TypeError("Type must be a valid message type.")}),t.channels!==void 0&&t.channels.forEach(n=>{if(!a.MIDI_CHANNEL_NUMBERS.includes(n))throw new TypeError("MIDI channel must be between 1 and 16.")})),this.destinations=e,t.types&&(this.types=t.types),t.channels&&(this.channels=t.channels)}forward(e){this.suspended||this.types.includes(e.type)&&(e.channel&&!this.channels.includes(e.channel)||this.destinations.forEach(t=>{l.validation&&!(t instanceof he)||t.send(e)}))}}/**
 * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
 * device. This object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
 * property.
 *
 * @fires InputChannel#midimessage
 * @fires InputChannel#unknownmessage
 *
 * @fires InputChannel#noteoff
 * @fires InputChannel#noteon
 * @fires InputChannel#keyaftertouch
 * @fires InputChannel#programchange
 * @fires InputChannel#channelaftertouch
 * @fires InputChannel#pitchbend
 *
 * @fires InputChannel#allnotesoff
 * @fires InputChannel#allsoundoff
 * @fires InputChannel#localcontrol
 * @fires InputChannel#monomode
 * @fires InputChannel#omnimode
 * @fires InputChannel#resetallcontrollers
 *
 * @fires InputChannel#event:nrpn
 * @fires InputChannel#event:nrpn-dataentrycoarse
 * @fires InputChannel#event:nrpn-dataentryfine
 * @fires InputChannel#event:nrpn-dataincrement
 * @fires InputChannel#event:nrpn-datadecrement
 * @fires InputChannel#event:rpn
 * @fires InputChannel#event:rpn-dataentrycoarse
 * @fires InputChannel#event:rpn-dataentryfine
 * @fires InputChannel#event:rpn-dataincrement
 * @fires InputChannel#event:rpn-datadecrement
 *
 * @fires InputChannel#controlchange
 * @fires InputChannel#event:controlchange-controllerxxx
 * @fires InputChannel#event:controlchange-bankselectcoarse
 * @fires InputChannel#event:controlchange-modulationwheelcoarse
 * @fires InputChannel#event:controlchange-breathcontrollercoarse
 * @fires InputChannel#event:controlchange-footcontrollercoarse
 * @fires InputChannel#event:controlchange-portamentotimecoarse
 * @fires InputChannel#event:controlchange-dataentrycoarse
 * @fires InputChannel#event:controlchange-volumecoarse
 * @fires InputChannel#event:controlchange-balancecoarse
 * @fires InputChannel#event:controlchange-pancoarse
 * @fires InputChannel#event:controlchange-expressioncoarse
 * @fires InputChannel#event:controlchange-effectcontrol1coarse
 * @fires InputChannel#event:controlchange-effectcontrol2coarse
 * @fires InputChannel#event:controlchange-generalpurposecontroller1
 * @fires InputChannel#event:controlchange-generalpurposecontroller2
 * @fires InputChannel#event:controlchange-generalpurposecontroller3
 * @fires InputChannel#event:controlchange-generalpurposecontroller4
 * @fires InputChannel#event:controlchange-bankselectfine
 * @fires InputChannel#event:controlchange-modulationwheelfine
 * @fires InputChannel#event:controlchange-breathcontrollerfine
 * @fires InputChannel#event:controlchange-footcontrollerfine
 * @fires InputChannel#event:controlchange-portamentotimefine
 * @fires InputChannel#event:controlchange-dataentryfine
 * @fires InputChannel#event:controlchange-channelvolumefine
 * @fires InputChannel#event:controlchange-balancefine
 * @fires InputChannel#event:controlchange-panfine
 * @fires InputChannel#event:controlchange-expressionfine
 * @fires InputChannel#event:controlchange-effectcontrol1fine
 * @fires InputChannel#event:controlchange-effectcontrol2fine
 * @fires InputChannel#event:controlchange-damperpedal
 * @fires InputChannel#event:controlchange-portamento
 * @fires InputChannel#event:controlchange-sostenuto
 * @fires InputChannel#event:controlchange-softpedal
 * @fires InputChannel#event:controlchange-legatopedal
 * @fires InputChannel#event:controlchange-hold2
 * @fires InputChannel#event:controlchange-soundvariation
 * @fires InputChannel#event:controlchange-resonance
 * @fires InputChannel#event:controlchange-releasetime
 * @fires InputChannel#event:controlchange-attacktime
 * @fires InputChannel#event:controlchange-brightness
 * @fires InputChannel#event:controlchange-decaytime
 * @fires InputChannel#event:controlchange-vibratorate
 * @fires InputChannel#event:controlchange-vibratodepth
 * @fires InputChannel#event:controlchange-vibratodelay
 * @fires InputChannel#event:controlchange-generalpurposecontroller5
 * @fires InputChannel#event:controlchange-generalpurposecontroller6
 * @fires InputChannel#event:controlchange-generalpurposecontroller7
 * @fires InputChannel#event:controlchange-generalpurposecontroller8
 * @fires InputChannel#event:controlchange-portamentocontrol
 * @fires InputChannel#event:controlchange-highresolutionvelocityprefix
 * @fires InputChannel#event:controlchange-effect1depth
 * @fires InputChannel#event:controlchange-effect2depth
 * @fires InputChannel#event:controlchange-effect3depth
 * @fires InputChannel#event:controlchange-effect4depth
 * @fires InputChannel#event:controlchange-effect5depth
 * @fires InputChannel#event:controlchange-dataincrement
 * @fires InputChannel#event:controlchange-datadecrement
 * @fires InputChannel#event:controlchange-nonregisteredparameterfine
 * @fires InputChannel#event:controlchange-nonregisteredparametercoarse
 * @fires InputChannel#event:controlchange-registeredparameterfine
 * @fires InputChannel#event:controlchange-registeredparametercoarse
 * @fires InputChannel#event:controlchange-allsoundoff
 * @fires InputChannel#event:controlchange-resetallcontrollers
 * @fires InputChannel#event:controlchange-localcontrol
 * @fires InputChannel#event:controlchange-allnotesoff
 * @fires InputChannel#event:controlchange-omnimodeoff
 * @fires InputChannel#event:controlchange-omnimodeon
 * @fires InputChannel#event:controlchange-monomodeon
 * @fires InputChannel#event:controlchange-polymodeon
 * @fires InputChannel#event:
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class Rt extends D{constructor(e,t){super(),this._input=e,this._number=t,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const t=Object.assign({},e);t.port=this.input,t.target=this,t.type="midimessage",this.emit(t.type,t),this._parseEventForStandardMessages(t)}_parseEventForStandardMessages(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmessage";const n=e.message.dataBytes[0],r=e.message.dataBytes[1];if(t.type==="noteoff"||t.type==="noteon"&&r===0)this.notesState[n]=!1,t.type="noteoff",t.note=new V(c.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+l.octaveOffset),{rawAttack:0,rawRelease:r}),t.value=c.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.release,t.rawVelocity=t.note.rawRelease;else if(t.type==="noteon")this.notesState[n]=!0,t.note=new V(c.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+l.octaveOffset),{rawAttack:r}),t.value=c.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.attack,t.rawVelocity=t.note.rawAttack;else if(t.type==="keyaftertouch")t.note=new V(c.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+l.octaveOffset)),t.value=c.from7bitToFloat(r),t.rawValue=r,t.identifier=t.note.identifier,t.key=t.note.number,t.rawKey=n;else if(t.type==="controlchange"){t.controller={number:n,name:a.CONTROL_CHANGE_MESSAGES[n].name,description:a.CONTROL_CHANGE_MESSAGES[n].description,position:a.CONTROL_CHANGE_MESSAGES[n].position},t.subtype=t.controller.name||"controller"+n,t.value=c.from7bitToFloat(r),t.rawValue=r;const s=Object.assign({},t);s.type=`${t.type}-controller${n}`,delete s.subtype,this.emit(s.type,s);const o=Object.assign({},t);o.type=`${t.type}-`+a.CONTROL_CHANGE_MESSAGES[n].name,delete o.subtype,o.type.indexOf("controller")!==0&&this.emit(o.type,o),t.message.dataBytes[0]>=120&&this._parseChannelModeMessage(t),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(t.message.dataBytes[0])&&this._parseEventForParameterNumber(t)}else t.type==="programchange"?(t.value=n,t.rawValue=t.value):t.type==="channelaftertouch"?(t.value=c.from7bitToFloat(n),t.rawValue=n):t.type==="pitchbend"?(t.value=((r<<7)+n-8192)/8192,t.rawValue=(r<<7)+n):t.type="unknownmessage";this.emit(t.type,t)}_parseChannelModeMessage(e){const t=Object.assign({},e);t.type=t.controller.name,t.type==="localcontrol"&&(t.value=t.message.data[2]===127,t.rawValue=t.message.data[2]),t.type==="omnimodeon"?(t.type="omnimode",t.value=!0,t.rawValue=t.message.data[2]):t.type==="omnimodeoff"&&(t.type="omnimode",t.value=!1,t.rawValue=t.message.data[2]),t.type==="monomodeon"?(t.type="monomode",t.value=!0,t.rawValue=t.message.data[2]):t.type==="polymodeon"&&(t.type="monomode",t.value=!1,t.rawValue=t.message.data[2]),this.emit(t.type,t)}_parseEventForParameterNumber(e){const t=e.message.dataBytes[0],n=e.message.dataBytes[1];t===99||t===101?(this._nrpnBuffer=[],this._rpnBuffer=[],t===99?this._nrpnBuffer=[e.message]:n!==127&&(this._rpnBuffer=[e.message])):t===98||t===100?t===98?(this._rpnBuffer=[],this._nrpnBuffer.length===1?this._nrpnBuffer.push(e.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],this._rpnBuffer.length===1&&n!==127?this._rpnBuffer.push(e.message):this._rpnBuffer=[]):(t===6||t===38||t===96||t===97)&&(this._rpnBuffer.length===2?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],e):this._nrpnBuffer.length===2?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],e):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(e){return e===6||e===38||e===96||e===97||e===98||e===99||e===100||e===101}_dispatchParameterNumberEvent(e,t,n,r){e=e==="nrpn"?"nrpn":"rpn";const s={target:r.target,timestamp:r.timestamp,message:r.message,parameterMsb:t,parameterLsb:n,value:c.from7bitToFloat(r.message.dataBytes[1]),rawValue:r.message.dataBytes[1]};e==="rpn"?s.parameter=Object.keys(a.REGISTERED_PARAMETERS).find(d=>a.REGISTERED_PARAMETERS[d][0]===t&&a.REGISTERED_PARAMETERS[d][1]===n):s.parameter=(t<<7)+n;const o=a.CONTROL_CHANGE_MESSAGES[r.message.dataBytes[0]].name;s.type=`${e}-${o}`,this.emit(s.type,s);const f=Object.assign({},s);f.type==="nrpn-dataincrement"?f.type="nrpn-databuttonincrement":f.type==="nrpn-datadecrement"?f.type="nrpn-databuttondecrement":f.type==="rpn-dataincrement"?f.type="rpn-databuttonincrement":f.type==="rpn-datadecrement"&&(f.type="rpn-databuttondecrement"),this.emit(f.type,f),s.type=e,s.subtype=o,this.emit(s.type,s)}getChannelModeByNumber(e){return l.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),e=Math.floor(e)),c.getChannelModeByNumber(e)}getCcNameByNumber(e){if(l.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),e=parseInt(e),!(e>=0&&e<=127)))throw new RangeError("Invalid control change number.");return c.getCcNameByNumber(e)}getNoteState(e){e instanceof V&&(e=e.identifier);const t=c.guessNoteNumber(e,l.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[t]}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(e){this.validation&&(e=!!e),this.parameterNumberEventsEnabled=e}}/**
 * The `Message` class represents a single MIDI message. It has several properties that make it
 * easy to make sense of the binary data it contains.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class je{constructor(e){this.rawData=e,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=(this.statusByte&15)+1):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=c.getPropertyByValue(a.CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=c.getPropertyByValue(a.SYSTEM_MESSAGES,this.command)),this.statusByte===a.SYSTEM_MESSAGES.sysex&&(this.dataBytes[0]===0?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}/**
 * The `Input` class represents a single MIDI input port. This object is automatically instantiated
 * by the library according to the host's MIDI subsystem and does not need to be directly
 * instantiated. Instead, you can access all `Input` objects by referring to the
 * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
 * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
 * [`WebMidi.getInputById()`](WebMidi#getInputById).
 *
 * Note that a single MIDI device may expose several inputs and/or outputs.
 *
 * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
 * (such as [`noteon`](InputChannel#event:noteon) or
 * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
 * object does that. However, you can still use the
 * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
 * [`InputChannel`](InputChannel) objects at once.
 *
 * @fires Input#opened
 * @fires Input#disconnected
 * @fires Input#closed
 * @fires Input#midimessage
 *
 * @fires Input#sysex
 * @fires Input#timecode
 * @fires Input#songposition
 * @fires Input#songselect
 * @fires Input#tunerequest
 * @fires Input#clock
 * @fires Input#start
 * @fires Input#continue
 * @fires Input#stop
 * @fires Input#activesensing
 * @fires Input#reset
 *
 * @fires Input#unknownmidimessage
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Ot extends D{constructor(e){super(),this._midiInput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new Rt(this,t);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(e){let t={timestamp:l.time,target:this,port:this};e.port.connection==="open"?(t.type="opened",this.emit("opened",t)):e.port.connection==="closed"&&e.port.state==="connected"?(t.type="closed",this.emit("closed",t)):e.port.connection==="closed"&&e.port.state==="disconnected"?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught: ",e.port.connection,e.port.state)}_onMidiMessage(e){const t=new je(e.data),n={port:this,target:this,message:t,timestamp:e.timeStamp,type:"midimessage",data:t.data,rawData:t.data,statusByte:t.data[0],dataBytes:t.dataBytes};this.emit("midimessage",n),t.isSystemMessage?this._parseEvent(n):t.isChannelMessage&&this.channels[t.channel]._processMidiMessageEvent(n),this._forwarders.forEach(r=>r.forward(t))}_parseEvent(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmidimessage",t.type==="songselect"&&(t.song=e.data[1]+1,t.value=e.data[1],t.rawValue=t.value),this.emit(t.type,t)}async open(){try{await this._midiInput.open()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}getChannelModeByNumber(){l.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(e,t,n={}){if(l.validation&&typeof n=="function"){let r=t!=null?[].concat(t):void 0;t=n,n={channels:r}}if(a.CHANNEL_EVENTS.includes(e)){n.channels===void 0&&(n.channels=a.MIDI_CHANNEL_NUMBERS);let r=[];return c.sanitizeChannels(n.channels).forEach(s=>{r.push(this.channels[s].addListener(e,t,n))}),r}else return super.addListener(e,t,n)}addOneTimeListener(e,t,n={}){return n.remaining=1,this.addListener(e,t,n)}on(e,t,n,r){return this.addListener(e,t,n,r)}hasListener(e,t,n={}){if(l.validation&&typeof n=="function"){let r=[].concat(t);t=n,n={channels:r}}return a.CHANNEL_EVENTS.includes(e)?(n.channels===void 0&&(n.channels=a.MIDI_CHANNEL_NUMBERS),c.sanitizeChannels(n.channels).every(r=>this.channels[r].hasListener(e,t))):super.hasListener(e,t)}removeListener(e,t,n={}){if(l.validation&&typeof n=="function"){let r=[].concat(t);t=n,n={channels:r}}if(n.channels===void 0&&(n.channels=a.MIDI_CHANNEL_NUMBERS),e==null)return c.sanitizeChannels(n.channels).forEach(r=>{this.channels[r]&&this.channels[r].removeListener()}),super.removeListener();a.CHANNEL_EVENTS.includes(e)?c.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].removeListener(e,t,n)}):super.removeListener(e,t,n)}addForwarder(e,t={}){let n;return e instanceof Ue?n=e:n=new Ue(e,t),this._forwarders.push(n),n}removeForwarder(e){this._forwarders=this._forwarders.filter(t=>t!==e)}hasForwarder(e){return this._forwarders.includes(e)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return l.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}/**
 * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
 * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
 *
 * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
 * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
 * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
 * module) version, you get an already-instantiated object when you import the module.
 *
 * @fires WebMidi#connected
 * @fires WebMidi#disabled
 * @fires WebMidi#disconnected
 * @fires WebMidi#enabled
 * @fires WebMidi#error
 * @fires WebMidi#midiaccessgranted
 * @fires WebMidi#portschanged
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Dt extends D{constructor(){super(),this.defaults={note:{attack:c.from7bitToFloat(64),release:c.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(e={},t=!1){if(c.isNode){try{window.navigator}catch{global.navigator=await Object.getPrototypeOf(async function(){}).constructor(`
        let jzz = await import("jzz");
        return jzz.default;
        `)()}try{}catch{global.performance=await Object.getPrototypeOf(async function(){}).constructor(`
        let perf_hooks = await import("perf_hooks");
        return perf_hooks.performance;
        `)()}}if(this.validation=e.validation!==!1,this.validation&&(typeof e=="function"&&(e={callback:e,sysex:t}),t&&(e.sysex=!0)),this.enabled)return typeof e.callback=="function"&&e.callback(),Promise.resolve();const n={timestamp:this.time,target:this,type:"error",error:void 0},r={timestamp:this.time,target:this,type:"midiaccessgranted"},s={timestamp:this.time,target:this,type:"enabled"};try{typeof e.requestMIDIAccessFunction=="function"?this.interface=await e.requestMIDIAccessFunction({sysex:e.sysex,software:e.software}):this.interface=await navigator.requestMIDIAccess({sysex:e.sysex,software:e.software})}catch(o){return n.error=o,this.emit("error",n),typeof e.callback=="function"&&e.callback(o),Promise.reject(o)}this.emit("midiaccessgranted",r),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(o){return n.error=o,this.emit("error",n),typeof e.callback=="function"&&e.callback(o),Promise.reject(o)}return this.emit("enabled",s),typeof e.callback=="function"&&e.callback(),Promise.resolve(this)}async disable(){return this._destroyInputsAndOutputs().then(()=>{navigator&&typeof navigator.close=="function"&&navigator.close(),this.interface&&(this.interface.onstatechange=void 0),this.interface=null;let e={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",e),this.removeListener()})}getInputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let n=0;n<this._disconnectedInputs.length;n++)if(this._disconnectedInputs[n].id===e.toString())return this._disconnectedInputs[n]}else for(let n=0;n<this.inputs.length;n++)if(this.inputs[n].id===e.toString())return this.inputs[n]}getInputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let n=0;n<this._disconnectedInputs.length;n++)if(~this._disconnectedInputs[n].name.indexOf(e))return this._disconnectedInputs[n]}else for(let n=0;n<this.inputs.length;n++)if(~this.inputs[n].name.indexOf(e))return this.inputs[n]}getOutputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let n=0;n<this._disconnectedOutputs.length;n++)if(~this._disconnectedOutputs[n].name.indexOf(e))return this._disconnectedOutputs[n]}else for(let n=0;n<this.outputs.length;n++)if(~this.outputs[n].name.indexOf(e))return this.outputs[n]}getOutputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let n=0;n<this._disconnectedOutputs.length;n++)if(this._disconnectedOutputs[n].id===e.toString())return this._disconnectedOutputs[n]}else for(let n=0;n<this.outputs.length;n++)if(this.outputs[n].id===e.toString())return this.outputs[n]}noteNameToNumber(e){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),c.toNoteNumber(e,this.octaveOffset)}getOctave(e){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),e=parseInt(e)),!isNaN(e)&&e>=0&&e<=127?c.getNoteDetails(c.offsetNumber(e,this.octaveOffset)).octave:!1}sanitizeChannels(e){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),c.sanitizeChannels(e)}toMIDIChannels(e){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),c.sanitizeChannels(e)}guessNoteNumber(e){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),c.guessNoteNumber(e,this.octaveOffset)}getValidNoteArray(e,t={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),c.buildNoteArray(e,t)}convertToTimestamp(e){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),c.toTimestamp(e)}async _destroyInputsAndOutputs(){let e=[];return this.inputs.forEach(t=>e.push(t.destroy())),this.outputs.forEach(t=>e.push(t.destroy())),Promise.all(e).then(()=>{this._inputs=[],this._outputs=[]})}_onInterfaceStateChange(e){this._updateInputsAndOutputs();let t={timestamp:e.timeStamp,type:e.port.state,target:this};if(e.port.state==="connected"&&e.port.connection==="open"){e.port.type==="output"?t.port=this.getOutputById(e.port.id):e.port.type==="input"&&(t.port=this.getInputById(e.port.id)),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}else if(e.port.state==="disconnected"&&e.port.connection==="pending"){e.port.type==="input"?t.port=this.getInputById(e.port.id,{disconnected:!0}):e.port.type==="output"&&(t.port=this.getOutputById(e.port.id,{disconnected:!0})),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let t=this._inputs.length-1;t>=0;t--){const n=this._inputs[t];Array.from(this.interface.inputs.values()).find(s=>s===n._midiInput)||(this._disconnectedInputs.push(n),this._inputs.splice(t,1))}let e=[];return this.interface.inputs.forEach(t=>{if(!this._inputs.find(n=>n._midiInput===t)){let n=this._disconnectedInputs.find(r=>r._midiInput===t);n||(n=new Ot(t)),this._inputs.push(n),e.push(n.open())}}),Promise.all(e)}async _updateOutputs(){if(!this.interface)return;for(let t=this._outputs.length-1;t>=0;t--){const n=this._outputs[t];Array.from(this.interface.outputs.values()).find(s=>s===n._midiOutput)||(this._disconnectedOutputs.push(n),this._outputs.splice(t,1))}let e=[];return this.interface.outputs.forEach(t=>{if(!this._outputs.find(n=>n._midiOutput===t)){let n=this._disconnectedOutputs.find(r=>r._midiOutput===t);n||(n=new he(t)),this._outputs.push(n),e.push(n.open())}}),Promise.all(e)}get enabled(){return this.interface!==null}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),c.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),c.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get outputs(){return this._outputs}get supported(){return typeof navigator<"u"&&navigator.requestMIDIAccess}get sysexEnabled(){return!!(this.interface&&this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.1.5"}get flavour(){return"esm"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),a.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.SYSTEM_MESSAGES."),a.SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.CHANNEL_MODE_MESSAGES."),a.CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the Enumerations.CONTROL_CHANGE_MESSAGES array."),a.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.REGISTERED_PARAMETERS."),a.REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}}const l=new Dt;l.constructor=null;async function xt(){return await l.enable()}async function Bt(){try{await xt()}catch(e){return console.log(e),()=>()=>{}}console.log(l);const i=new de;for(const e of l.inputs)e.addListener("controlchange",t=>{i.emit({id:`${e.id}.${t.type}.${t.controller.number}`,value:oe(t.value)})}),e.addListener("pitchbend",t=>{i.emit({id:`${e.id}.${t.type}`,value:K(-1,1,0,1,oe(t.value))})}),e.addListener("noteon",t=>{i.emit({id:`${e.id}.note.${t.note.number}`,value:oe(t.value)})}),e.addListener("noteoff",t=>{i.emit({id:`${e.id}.note.${t.note.number}`,value:0})});return e=>i.listen(e)}class Lt{constructor(e=32){this.start=0,this.end=0,this.buffer=j(Math.max(e,1),()=>null)}resize(e){const t=this.length;this.buffer=j(e,n=>n<t?this.get(n):null),this.start=0,this.end=t}growForInsertIfNeeded(){this.length>=this.capacity-1&&this.resize(this.capacity*2)}get length(){return this.start<=this.end?this.end-this.start:this.end+this.buffer.length-this.start}get capacity(){return this.buffer.length}get(e){return this.buffer[(this.start+e)%this.capacity]}push(e){this.growForInsertIfNeeded(),this.buffer[this.end]=e,this.end=(this.end+1)%this.capacity}pop(){if(this.end===this.start)return null;this.end===0?this.end=this.capacity-1:this.end=this.end-1;const e=this.buffer[this.end];return this.buffer[this.end]=null,e}unshift(e){this.growForInsertIfNeeded(),this.start===0?this.start=this.capacity-1:this.start=this.start-1,this.buffer[this.start]=e}shift(){if(this.end===this.start)return null;const e=this.buffer[this.start];return this.buffer[this.start]=null,this.start=(this.start+1)%this.capacity,e}first(){return this.get(0)}last(){return this.get(this.length-1)}}class $e{constructor(e){this.manager=e,this.currentValue=null}debug(e){return e!==null&&this.manager.debug(e,this),this}clear(){this.currentValue=null}read(){return this.currentValue===null&&(this.currentValue=this.update()),this.currentValue}}class qe extends $e{constructor(e,t){super(e),this.value=t}update(){return this.value}set(e){this.value=e}}function Ge(i,e){return e?Ke(e[0],e[1],i):i}class Xe extends qe{constructor(e,t,n,r){super(e,Ge(vt(`signalSetting.${t}`,n),r)),this.key=t,this.saveDebounced=pt(200,s=>It(`signalSetting.${this.key}`,s)),this.range=r||null}set(e){e=Ge(e,this.range),super.set(e),this.saveDebounced(e)}}class Pt extends $e{constructor(e,t){super(e),this.compute=t}update(){return this.compute()}}class Ut{constructor(){this.debugSignalsByName={},this.debugSignalsChangeEvent=new de,this.updateEvent=new de,this.signals=new Set,this.driver=this.controlled(0).debug("internal.driver")}onDebugSignalsChange(e){return this.debugSignalsChangeEvent.listen(e)}onUpdate(e){return this.updateEvent.listen(e)}update(e){this.driver.set(Math.min(e,.03));for(const t of this.signals)t.clear();for(const t of this.signals)t.read();this.updateEvent.emit()}controlled(e){return this.addSignal(new qe(this,e))}computed(e){return this.addSignal(new Pt(this,e))}input(e,t,n){return this.addSignal(new Xe(this,e,t,n)).debug(e)}sin({min:e=0,max:t=1,frequency:n=1,driver:r=this.driver,offset:s=0}={}){const o=this.toSignal(e),f=this.toSignal(t),d=this.toSignal(n),h=this.toSignal(s);let m=0;return this.computed(()=>{const g=d.read();return m+=r.read()*g,K(-1,1,o.read(),f.read(),Math.cos((h.read()+m)*Math.PI*2))})}spring(e){const t=e.target,n=e.driver??this.driver,r=this.toSignal(e.tension??230),s=this.toSignal(e.friction??22);let o=t.read(),f=0;return this.computed(()=>{const d=t.read(),h=n.read(),m=r.read(),g=s.read();let p=o,u=f;const b=f,E=m*(d-p)-g*f;p=o+b*h*.5,u=f+E*h*.5;const M=u,_=m*(d-p)-g*u;p=o+M*h*.5,u=f+_*h*.5;const I=u,R=m*(d-p)-g*u;p=o+I*h,u=f+R*h;const O=u,B=m*(d-p)-g*u,q=1/6*(b+2*(M+I)+O),X=1/6*(E+2*(_+R)+B);return o+=q*h,f+=X*h,o})}add(e,t){const n=this.toSignal(e),r=this.toSignal(t);return this.computed(()=>n.read()+r.read())}subtract(e,t){const n=this.toSignal(e),r=this.toSignal(t);return this.computed(()=>n.read()-r.read())}multiply(e,t){const n=this.toSignal(e),r=this.toSignal(t);return this.computed(()=>n.read()*r.read())}divide(e,t){const n=this.toSignal(e),r=this.toSignal(t);return this.computed(()=>n.read()/r.read())}switch(e,t,n){const r=this.toSignal(e),s=this.toSignal(t),o=this.toSignal(n);return this.computed(()=>r.read()?s.read():o.read())}adsr({target:e,attack:t=0,delay:n=0,sustain:r=1,release:s=0,driver:o=this.driver}){const f=this.toSignal(t),d=this.toSignal(n),h=this.toSignal(r),m=this.toSignal(s);let g;(E=>{E[E.Off=0]="Off",E[E.Attacking=1]="Attacking",E[E.Holding=2]="Holding",E[E.Releasing=3]="Releasing"})(g||(g={}));let p=0,u=0,b=0;return this.computed(()=>{const E=e.read();if(E!==0){if((p===0||p===3)&&(f.read()===0?p=2:p=1),p===1&&(u+=E/f.read()*o.read(),u>=E&&(p=2)),p===2){const _=E*h.read();d.read()===0?u=_:u=Ke(_,E,u+(_-E)/d.read()*o.read())}}else(p===1||p===2)&&(u===0?p=0:(b=u,p=3)),p===3&&(u-=b/m.read()*o.read(),u<=0&&(u=0,p=0)),p===0&&(u=0);return u})}easeExponential({target:e,rate:t=.1}){const n=this.toSignal(t);let r=e.read();return this.computed(()=>{const s=e.read()-r;return r+=s*n.read(),r})}lerp(e,t,n){const r=this.toSignal(e),s=this.toSignal(t),o=this.toSignal(n);return this.computed(()=>gt(r.read(),s.read(),o.read()))}delay({target:e,amount:t=0,driver:n=this.driver}){const r=this.toSignal(t);console.log(r.read());const s=new Lt(r.read()*1.2/(1/60));let o=0,f=e.read();return this.computed(()=>{o+=n.read();const d=r.read();s.push({time:o,value:e.read()});let h=null;for(;(h=s.first())&&h.time+d<=o;)f=h.value,s.shift();return f})}debug(e,t){$(this.signals.has(t),`signal called ${e} does not belong to this signal manager`);const n=Et(this.debugSignalsByName,e)?[...this.debugSignalsByName[e],t]:[t];this.debugSignalsByName={...this.debugSignalsByName,[e]:n},this.debugSignalsChangeEvent.emit()}addSignal(e){return this.signals.add(e),e}toSignal(e){return typeof e=="number"?this.controlled(e):e}}const Gt={position:"fixed",top:0,left:0,width:"100%",height:"100%",zIndex:"100000",touchAction:"none"};class Qe{constructor({down:e,move:t,up:n,debug:r,cursor:s}){this.attachedTo=null,this.onDown=e,this.onMove=t,this.onUp=n;const o=document.createElement("div");o.setAttribute("touch-action","none"),Object.assign(o.style,Gt),r&&(o.style.background="rgba(0, 255, 0, 0.3)"),s&&(o.style.cursor=s),this.cover=o}attach(){const e=document.body;!this.attachedTo&&e&&(this.attachedTo=e,this.attachedTo.appendChild(this.cover),this.attachEvents())}remove(){this.attachedTo&&(this.attachedTo.removeChild(this.cover),this.attachedTo=null,this.removeEvents())}attachEvents(){this.onDown&&window.addEventListener("mousedown",this.onDown,!1),this.onMove&&window.addEventListener("mousemove",this.onMove,!1),this.onUp&&window.addEventListener("mouseup",this.onUp,!1)}removeEvents(){this.onDown&&window.removeEventListener("mousedown",this.onDown),this.onMove&&window.removeEventListener("mousemove",this.onMove),this.onUp&&window.removeEventListener("mouseup",this.onUp)}}var ne={},Ht={get exports(){return ne},set exports(i){ne=i}},Ze={},ue={},kt={get exports(){return ue},set exports(i){ue=i}},Je={};/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Y=S;function Ft(i,e){return i===e&&(i!==0||1/i===1/e)||i!==i&&e!==e}var Vt=typeof Object.is=="function"?Object.is:Ft,Yt=Y.useState,zt=Y.useEffect,Wt=Y.useLayoutEffect,Kt=Y.useDebugValue;function jt(i,e){var t=e(),n=Yt({inst:{value:t,getSnapshot:e}}),r=n[0].inst,s=n[1];return Wt(function(){r.value=t,r.getSnapshot=e,ce(r)&&s({inst:r})},[i,t,e]),zt(function(){return ce(r)&&s({inst:r}),i(function(){ce(r)&&s({inst:r})})},[i]),Kt(t),t}function ce(i){var e=i.getSnapshot;i=i.value;try{var t=e();return!Vt(i,t)}catch{return!0}}function $t(i,e){return e()}var qt=typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"?$t:jt;Je.useSyncExternalStore=Y.useSyncExternalStore!==void 0?Y.useSyncExternalStore:qt;(function(i){i.exports=Je})(kt);/**
 * @license React
 * use-subscription.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Xt=ue;Ze.useSubscription=function(i){return Xt.useSyncExternalStore(i.subscribe,i.getCurrentValue)};(function(i){i.exports=Ze})(Ht);function te(i){return ne.useSubscription(S.useMemo(()=>({getCurrentValue:()=>i.read(),subscribe:e=>i.manager.onUpdate(e)}),[i]))}const fe=(i,e)=>{const t=i.toString().split(".");if(t.length===1)return t[0];if(t.length===2){if(t[0].length>=e)return t[0];{const n=e-t[0].length;return`${t[0]}.${t[1].slice(0,n)}`}}throw new Error(`unexpected number of value parts: ${t.length}`)},et=S.memo(function({signal:e,className:t}){const n=te(e);return N("div",{className:be("text-gray-400",t),children:fe(n,5)})}),Qt=S.memo(function({signals:e,width:t}){let[{lines:s,min:o,max:f},d]=S.useState(()=>{const m=e.map(g=>g.read());return{lines:m.map(g=>[g]),min:Math.min(...m),max:Math.max(...m)}});S.useEffect(()=>e[0].manager.onUpdate(()=>{const m=e.map(g=>g.read());d(g=>({lines:g.lines.map((p,u)=>[m[u],...p.slice(0,t-1)]),min:Math.min(g.min,...m),max:Math.max(g.max,...m)}))}),[e,t]);const h=Math.round(t/2);return o===f&&(o=o-.1,f=f+.1),x("svg",{width:t,height:h,children:[N("text",{x:t-8,y:8+8,fill:"#cbd5e0",fontSize:8,textAnchor:"end",children:fe(f,5)}),N("text",{x:t-8,y:h-8,fill:"#cbd5e0",fontSize:8,textAnchor:"end",children:fe(o,5)}),s.map((m,g)=>{const p=[];for(let u=0;u<m.length;u++){const b=u===0?"M":"L";p.push(`${b} ${t-u} ${K(o,f,h-8,8,m[u]).toFixed(1)}`)}return N("path",{d:p.join(" "),stroke:"#cbd5e0",strokeWidth:1,fill:"none"},g)})]})});function Zt({name:i,signal:e,listenToMidi:t}){const[n,r]=S.useState(!1),[s,o]=Ee(`midiControlForSignal.${i}`,ge.string.nullable(),null);S.useEffect(()=>t(({id:h,value:m})=>{e.range&&(n?(o(h),r(!1),e.set(K(0,1,e.range[0],e.range[1],m))):h===s&&e.set(K(0,1,e.range[0],e.range[1],m)))}),[t,e,n,s,o]);function f(h){h.stopPropagation(),s===null?r(!n):o(null)}function d(h){h.preventDefault();const m=h.screenY,g=e.read(),p=e.range?Math.abs(e.range[1]-e.range[0])/250:Math.abs(g===0?.1:g*.01),u=E=>{const M=(m-E)*p;e.set(g+M)},b=new Qe({move:E=>{u(E.screenY)},up:E=>{u(E.screenY),b.remove()},cursor:"ns-resize"});b.attach()}return x(pe,{children:[e.range&&N("div",{className:be("cursor-pointer px-1 py-1",n?"text-gray-100":s!==null?"text-gray-300":"text-gray-500 hover:text-gray-300"),onClick:f,children:n?"◎":s!==null?"◉":"○"}),x("div",{className:"cursor-move py-1 pr-2 pl-1",style:{cursor:"ns-resize"},onMouseDown:d,children:["↕",N(et,{signal:e,className:"inline-block pl-1"})]})]})}const tt=S.memo(function({signals:e,name:t,displayName:n=t,width:r,listenToMidi:s}){const[o,f]=Ee(`signal.${t}`,ge.boolean,!1),d=e.filter(h=>h instanceof Xe);return x("div",{className:"border-t border-gray-700 text-xs",children:[x("div",{className:"flex cursor-pointer hover:bg-gray-800",onClick:()=>f(!o),children:[N("div",{className:"flex-auto whitespace-pre px-2 py-1",children:n}),d.length?N(Zt,{name:t,signal:d[0],listenToMidi:s}):N(et,{signal:e[0],className:"px-2 py-1"})]}),o&&N(Qt,{signals:e,width:r})]})});function Jt({groupName:i,signalNamePairs:e,width:t,listenToMidi:n}){const[r,s]=Ee(`group.${i}`,ge.boolean,!1);return x("div",{className:"border-t border-gray-700 text-xs",children:[x("div",{className:"flex cursor-pointer px-2 py-1 hover:bg-gray-800",onClick:()=>s(!r),children:[N("div",{className:"flex-auto",children:i}),N("div",{className:"text-gray-600",children:r?"▽":"▷"})]}),r&&N(pe,{children:e.map(([o,f])=>N(tt,{name:o,displayName:`  ${o.slice(i.length+1)}`,signals:f,width:t,listenToMidi:n},o))})]})}const en=S.memo(function({signalManager:e,width:t,listenToMidi:n}){const r=ne.useSubscription(S.useMemo(()=>({getCurrentValue:()=>e.debugSignalsByName,subscribe:h=>e.onDebugSignalsChange(h)}),[e])),s=bt(Object.entries(r).filter(([h])=>!h.startsWith("_")),h=>h[0]),[o,f]=yt(s,([h])=>h.includes(".")),d=St(o,([h])=>{const m=h.indexOf(".");return $(m!==-1,"Assertion Error: lastDotIdx !== -1"),h.slice(0,m)});return x("div",{className:"absolute right-0 top-0 bottom-0 h-full overflow-auto border-l border-gray-600 text-sm",style:{width:t},children:[N("div",{className:"py-1 px-2",children:"signals"}),Array.from(d).map(([h,m])=>N(Jt,{groupName:h,signalNamePairs:m,width:t-1,listenToMidi:n},h)),f.map(([h,m])=>N(tt,{name:h,signals:m,width:t-1,listenToMidi:n},h))]})}),He=300;function tn({debuggerEnabled:i,signalManager:e,listenToMidi:t,scene:n}){const[r,s]=S.useState(null),o=S.useRef(null),f=S.useRef(null),[d,h]=S.useState({width:100,height:100,devicePixelRatio:1});return S.useEffect(()=>{let m=!1;$(f.current&&o.current,"Assertion Error: canvasRef.current && containerRef.current");const g=f.current,p=o.current;h({width:g.clientWidth,height:g.clientHeight,devicePixelRatio:window.devicePixelRatio});const u={width:e.controlled(g.clientWidth).debug("canvas.width"),height:e.controlled(g.clientHeight).debug("canvas.height"),devicePixelRatio:e.controlled(window.devicePixelRatio).debug("canvas.devicePixelRatio"),mouseX:e.controlled(0).debug("canvas.mouseX"),mouseY:e.controlled(0).debug("canvas.mouseY"),mouseDown:e.controlled(0).debug("canvas.mouseDown")},b=new Ct(()=>{const I=g.clientWidth,R=g.clientHeight,O=window.devicePixelRatio;u.width.set(I),u.height.set(R),u.devicePixelRatio.set(O),h(B=>B.width!==I||B.height!==R||B.devicePixelRatio!==O?{width:I,height:R,devicePixelRatio:O}:B)});b.observe(g),window.addEventListener("mousemove",I=>{u.mouseX.set(I.clientX),u.mouseY.set(I.clientY)}),p.addEventListener("mousedown",()=>{u.mouseDown.set(1);const I=new Qe({up:()=>{u.mouseDown.set(0),I.remove()}});I.attach()});const E=Date.now(),M=n(e,g,u);console.log("get frame loop",Date.now()-E,e.debugSignalsByName.size);let _=0;return Nt((I,R)=>{if(m)R();else{const O=I-_;_=I,e.update(O/1e3),M.update&&M.update(),M.draw()}}),s(M.children),()=>{m=!0,b.disconnect()}},[n,e]),x("div",{style:{position:"absolute",top:0,left:0,bottom:0,right:0},children:[x("div",{ref:o,style:{position:"absolute",top:0,left:0,bottom:0,right:i?He:0},children:[N("canvas",{ref:f,style:{position:"absolute",top:0,left:0,width:"100%",height:"100%",zIndex:10,pointerEvents:"none"},width:d.width*d.devicePixelRatio,height:d.height*d.devicePixelRatio}),r]}),i&&N(en,{signalManager:e,listenToMidi:t,width:He})]})}const nn=S.memo(tn);async function rn(i,e){const t=await Bt(),n=new Ut,r=document.getElementById("root");$(r,"Assertion Error: root"),At.render(N(nn,{debuggerEnabled:e,signalManager:n,listenToMidi:t,scene:i}),r)}const sn=45,ke=1.5,ee=8;function an(i){const e=i%12;return e===1||e===3||e===6||e===8||e===10}const on=S.memo(function({offset:e,isAccidental:t,styles:n,isNoteDown:r,note:s,setRefForKey:o}){const f=t?{left:e-n.accidentalWidth/2,width:n.accidentalWidth,height:n.accidentalHeight,position:"absolute",zIndex:1,borderWidth:n.scale*ke}:{left:e,width:n.standardWidth,height:n.standardHeight,position:"absolute",borderWidth:n.scale*ke};return N("div",{ref:d=>o(d,s),style:f,className:be("border-gray-600",{"bg-black hover:bg-blue-900":t,"bg-white hover:bg-blue-200":!t,"bg-purple-800":t&&r,"bg-purple-300":!t&&r})})});function ln({lowestNote:i,highestNote:e,scale:t,top:n,left:r,notesDown:s,setRefForKey:o}){const f=S.useMemo(()=>{const g=(e-i)*.5833333333333334,p=sn*t,u=g*p,b=p*.6;return{standardWidth:p,accidentalWidth:b,standardHeight:p*6,accidentalHeight:b*6,scale:t,totalWidth:u}},[i,e,t]),d=f.totalWidth+2*ee*t,h=f.standardHeight+2*ee*t;let m=0;return N("div",{className:"absolute border-gray-600 bg-gray-600",style:{width:d,height:h,borderWidth:ee*t,borderRadius:ee*t,top:n-h/2,left:r-d/2},children:j(e-i,g=>{const p=i+g,u=an(p),b=N(on,{note:p,offset:m,isAccidental:u,styles:f,isNoteDown:s.includes(p),setRefForKey:o},p);return m+=u?0:f.standardWidth,b})})}const cn=S.memo(ln),me=1300,Fe=1300,dn=33,hn=72,un=!0,F=46,W=F-12,nt=me/2,Ve={KeyA:33,KeyS:34,KeyD:35,KeyF:36,KeyG:37,KeyH:38,KeyJ:39,KeyK:40,KeyL:41,Semicolon:42,Quote:43,Backslash:44,KeyQ:45,KeyW:46,KeyE:47,KeyR:48,KeyT:49,KeyY:50,KeyU:51,KeyI:52,KeyO:53,KeyP:54,BracketLeft:55,BracketRight:56,Digit1:57,Digit2:58,Digit3:59,Digit4:60,Digit5:61,Digit6:62,Digit7:63,Digit8:64,Digit9:65,Digit0:66,Minus:67,Equal:68};function Ye(i,e,t){return(i-e)/t}function ze(i,e,t){return i*t+e}function fn(i,e,{mouseX:t,mouseY:n,mouseDown:r,width:s,height:o,devicePixelRatio:f}){const d=e.getContext("2d");$(d,"Assertion Error: ctx");const h=new Mt(d),m=i.computed(()=>Math.min(s.read()/me,o.read()/Fe)),g=i.computed(()=>(s.read()-m.read()*me)/2),p=i.computed(()=>(o.read()-m.read()*Fe)/2),u=8,b=30,E=i.input("spring.activeFriction",35,[1,40]),M=i.input("spring.activeTension",1e3,[1,1e3]),_=i.input("spring.idleFriction",25,[1,40]),I=i.input("spring.idleTension",180,[1,1e3]),R=nt,O=250,B=i.controlled(R),q=i.controlled(O),X=i.spring({target:B}),ye=i.spring({target:q}),rt=X,it=i.subtract(ye,70),w=j(u,v=>{const y=i.controlled(0),C=i.controlled(0),A=i.controlled(0),z=i.computed(()=>X.read()+(v-(u-1)/2)*65),ie=i.computed(()=>ye.read()+Math.sin(v/(u-1)*Math.PI)*120);let Z=z,J=ie,we=i.controlled(Math.PI/2-(v-u/2)/(u*.9));const _e=i.subtract(C,z),Me=i.subtract(A,ie),ve=i.computed(()=>Math.atan2(Me.read(),_e.read())),ot=i.sin({min:k(-1,.75),max:k(1,.75),frequency:k(.5,.4),offset:Math.random()}),Ie=k(2,1.5)*Math.sign(k(0,1)),lt=i.sin({min:Ie-2,max:Ie+2,frequency:k(.5,.4),offset:Math.random()});return{points:j(b,T=>{const Ae=b-(T+1),Ce=i.adsr({target:y,attack:.05*Ae,release:2}),Te=i.adsr({target:y,attack:.05*Ae}),Re=i.lerp(_,E,Ce),Oe=i.lerp(I,M,Ce),ct=i.sin({min:-.3,max:.3,frequency:.2*1.1**(T/2),offset:Math.random()}),se=i.add(ct,we),De=24*.95**(T/2),dt=i.add(Z,i.computed(()=>Math.cos(se.read())*De)),ht=i.add(J,i.computed(()=>Math.sin(se.read())*De)),ae=(T+1)/b,xe=Math.sin(ae*Math.PI)*20,Be=i.sin({min:-xe,max:xe,offset:i.computed(()=>T/b*lt.read()),frequency:ot}),ut=i.computed(()=>z.read()+_e.read()*ae+Math.sin(-ve.read())*Be.read()),ft=i.computed(()=>ie.read()+Me.read()*ae+Math.cos(ve.read())*Be.read()),P=i.spring({target:i.lerp(dt,ut,Te),friction:Re,tension:Oe}).debug(T===b-1?"tentacle.endX":null),U=i.spring({target:i.lerp(ht,ft,Te),friction:Re,tension:Oe}),G=i.subtract(P,Z),H=i.subtract(U,J),L=i.computed(()=>Math.sqrt(G.read()*G.read()+H.read()*H.read())),mt={start:[Z,J],end:[P,U],leftInner:[i.computed(()=>P.read()-H.read()/L.read()*(W/2-T+1)),i.computed(()=>U.read()+G.read()/L.read()*(W/2-T+1))],rightInner:[i.computed(()=>P.read()+H.read()/L.read()*(W/2-T+1)),i.computed(()=>U.read()-G.read()/L.read()*(W/2-T+1))],leftOuter:[i.computed(()=>P.read()-H.read()/L.read()*(F/2-T+1)),i.computed(()=>U.read()+G.read()/L.read()*(F/2-T+1))],rightOuter:[i.computed(()=>P.read()+H.read()/L.read()*(F/2-T+1)),i.computed(()=>U.read()-G.read()/L.read()*(F/2-T+1))]};return Z=P,J=U,we=se,mt}),isActive:y,activeTargetX:C,activeTargetY:A}}),Q=new Map,st=(v,y,C)=>{const A=Le(w.filter(z=>!Q.has(z)))??Le(w);Q.set(A,v),A.isActive.set(1),A.activeTargetX.set(y),A.activeTargetY.set(C)},at=v=>{for(const[y,C]of Q.entries())C===v&&(Q.delete(y),y.isActive.set(0))},Se=i.computed(()=>{let v=0;for(let y=0;y<u;y++)v+=w[y].points[b-1].end[0].read();return v/u}),Ne=i.computed(()=>{let v=0;for(let y=0;y<u;y++)v+=w[y].points[b-1].end[1].read();return v/u}),re=wt(w);return{update:()=>{const v=new le(Se.read()-R,Ne.read()-400-O),y=v.withMagnitude(v.magnitude()**.9);B.set(R+y.x),q.set(O+y.y)},draw:()=>{const v=new le(rt.read(),it.read());d.resetTransform(),d.scale(f.read(),f.read()),d.fillStyle="#7F95D1",d.clearRect(0,0,s.read(),o.read()),d.translate(g.read(),p.read()),d.scale(m.read(),m.read()),h.ellipse(v,250,200,{stroke:"#FF709D",strokeWidth:12}),d.lineCap="round",d.lineJoin="round",d.beginPath(),d.moveTo(w[0].points[0].start[0].read(),w[0].points[0].start[1].read());for(let y=1;y<w.length;y++){const C=w[y-1],A=w[y];d.lineTo(C.points[3].rightOuter[0].read(),C.points[3].rightOuter[1].read()),d.bezierCurveTo(C.points[1].rightOuter[0].read(),C.points[1].rightOuter[1].read(),A.points[1].leftOuter[0].read(),A.points[1].leftOuter[1].read(),A.points[3].leftOuter[0].read(),A.points[3].leftOuter[1].read())}d.lineTo(w[w.length-1].points[0].start[0].read(),w[w.length-1].points[0].start[1].read()),d.fillStyle="#FF709D",d.fill();for(let y=0;y<re.length;y++)We(d,re[y],"#FF709D",F,0),We(d,re[y],"#FF4782",W,3);h.ellipse(v,250,200,{fill:"#FF4782"}),d.beginPath(),d.moveTo(w[0].points[0].start[0].read(),w[0].points[0].start[1].read());for(let y=1;y<w.length;y++){const C=w[y-1],A=w[y];d.lineTo(C.points[1].rightInner[0].read(),C.points[1].rightInner[1].read()),d.bezierCurveTo(C.points[0].rightInner[0].read(),C.points[0].rightInner[1].read(),A.points[0].leftInner[0].read(),A.points[0].leftInner[1].read(),A.points[1].leftInner[0].read(),A.points[1].leftInner[1].read())}d.lineTo(w[w.length-1].points[0].start[0].read(),w[w.length-1].points[0].start[1].read()),d.fillStyle="#FF4782",d.fill(),h.debugPointX(new le(Se.read(),Ne.read()),{label:"avg end"})},children:N(mn,{canvasScaleSignal:m,canvasTranslateXSignal:g,canvasTranslateYSignal:p,onNoteDown:st,onNoteUp:at})}}function We(i,e,t,n,r){i.strokeStyle=t;for(let s=0;s<e.points.length-r;s++){const{start:o,end:f}=e.points[s];i.beginPath(),i.moveTo(o[0].read(),o[1].read()),i.lineTo(f[0].read(),f[1].read()),i.lineWidth=n-s,i.stroke()}}function mn({canvasScaleSignal:i,canvasTranslateXSignal:e,canvasTranslateYSignal:t,onNoteDown:n,onNoteUp:r}){const s=S.useRef(new Map),o=te(i),f=te(e),d=te(t),[h,m]=S.useState([]);console.log(h);const g=S.useCallback((b,E)=>{b?s.current.set(E,b):s.current.delete(E)},[]),p=S.useCallback(b=>{m(E=>{if(E.includes(b))return E;const M=s.current.get(b);if(M){const _=M.getBoundingClientRect();n(b,Ye(_.x+_.width/2,e.read(),i.read()),Ye(_.y+_.height*.8,t.read(),i.read()))}return _t([...E,b])})},[i,e,t,n]),u=S.useCallback(b=>{m(E=>E.includes(b)?(r(b),E.filter(M=>M!==b)):E)},[r]);return S.useEffect(()=>{const b=M=>{const _=Ve[M.code];_!==void 0&&p(_)},E=M=>{const _=Ve[M.code];_!==void 0&&u(_)};return window.addEventListener("keydown",b),window.addEventListener("keyup",E),()=>{window.removeEventListener("keydown",b),window.removeEventListener("keyup",E)}},[p,u]),x(pe,{children:[N("div",{style:{background:"#7F95D1"},className:"absolute top-0 left-0 h-full w-full"}),N(cn,{lowestNote:dn,highestNote:hn,scale:o,top:ze(1100,d,o),left:ze(nt,f,o),notesDown:h,setRefForKey:g})]})}rn(fn,un);
