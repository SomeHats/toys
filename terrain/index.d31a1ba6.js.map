{"mappings":"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","sources":["src/lib/geom/Vector2.ts"],"sourcesContent":["import { normalizeAngle, lerp } from '../utils';\n\nexport default class Vector2 {\n  static readonly ZERO = new Vector2(0, 0);\n\n  static fromPolar(angle: number, radius: number) {\n    return new Vector2(radius * Math.cos(angle), radius * Math.sin(angle));\n  }\n\n  static average(points: ReadonlyArray<Vector2>): Vector2 {\n    const sum = points.reduce((memo, p) => memo.add(p), Vector2.ZERO);\n    return sum.div(points.length);\n  }\n\n  static fromVectorLike({ x, y }: { x: number; y: number }): Vector2 {\n    return new Vector2(x, y);\n  }\n\n  constructor(public readonly x: number, public readonly y: number) {}\n\n  toString(): string {\n    return `Vector2(${this.x}, ${this.y})`;\n  }\n\n  get magnitudeSquared(): number {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  get magnitude(): number {\n    return Math.sqrt(this.magnitudeSquared);\n  }\n\n  get angle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  isInPolygon(polygon: ReadonlyArray<Vector2>): boolean {\n    // ray-casting algorithm based on\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n    const { x, y } = this;\n\n    let isInside = false;\n    for (\n      let currentIdx = 0, previousIdx = polygon.length - 1;\n      currentIdx < polygon.length;\n      previousIdx = currentIdx++\n    ) {\n      const { x: currentX, y: currentY } = polygon[currentIdx];\n      const { x: previousX, y: previousY } = polygon[previousIdx];\n      const doesIntersect =\n        currentY > y != previousY > y &&\n        x <\n          ((previousX - currentX) * (y - currentY)) / (previousY - currentY) +\n            currentX;\n\n      if (doesIntersect) {\n        isInside = !isInside;\n      }\n    }\n\n    return isInside;\n  }\n\n  equals(other: Vector2) {\n    return this === other || (this.x === other.x && this.y === other.y);\n  }\n\n  distanceTo({ x, y }: Vector2): number {\n    const dx = x - this.x;\n    const dy = y - this.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  angleTo(other: Vector2): number {\n    return other.sub(this).angle;\n  }\n\n  angleBetween(other: Vector2): number {\n    return normalizeAngle(\n      Math.atan2(other.y, other.x) - Math.atan2(this.y, this.x),\n    );\n  }\n\n  dot(other: Vector2): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  div(scale: number): Vector2 {\n    return new Vector2(this.x / scale, this.y / scale);\n  }\n\n  scale(scale: number): Vector2 {\n    return new Vector2(this.x * scale, this.y * scale);\n  }\n\n  negate(): Vector2 {\n    return this.scale(-1);\n  }\n\n  add({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x + x, this.y + y);\n  }\n\n  sub({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x - x, this.y - y);\n  }\n\n  floor(): Vector2 {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y));\n  }\n\n  ceil(): Vector2 {\n    return new Vector2(Math.ceil(this.x), Math.ceil(this.y));\n  }\n\n  round(): Vector2 {\n    return new Vector2(Math.round(this.x), Math.round(this.y));\n  }\n\n  withMagnitude(newMagnitude: number): Vector2 {\n    return Vector2.fromPolar(this.angle, newMagnitude);\n  }\n\n  normalize(): Vector2 {\n    return this.withMagnitude(1);\n  }\n\n  withAngle(newAngle: number): Vector2 {\n    return Vector2.fromPolar(newAngle, this.magnitude);\n  }\n\n  rotate(byAngle: number): Vector2 {\n    return this.withAngle(this.angle + byAngle);\n  }\n\n  lerp(other: Vector2, n: number): Vector2 {\n    return new Vector2(lerp(this.x, other.x, n), lerp(this.y, other.y, n));\n  }\n}\n"],"names":["$64238d6eec795ec6$export$9099ad97b570f7c","x","y","key","concat","this","Math","sqrt","magnitudeSquared","atan2","polygon","isInside","currentIdx","previousIdx","length","_currentIdx","currentX","currentY","_previousIdx","previousX","previousY","other","param","dx","dy","sub","angle","$8pNpe","normalizeAngle","scale","scale1","floor","ceil","round","newMagnitude","fromPolar","withMagnitude","newAngle","magnitude","byAngle","withAngle","n","lerp","radius","cos","sin","points","reduce","memo","p","add","ZERO","div"],"version":3,"file":"index.d31a1ba6.js.map"}