import{A as o}from"./chunk_utils.H-tu124z.js";const h=class h{constructor(s,a,e,r){const i=3*s,c=3*(e-s)-i,u=3*a,n=3*(r-a)-u;this.ax=1-i-c,this.bx=c,this.cx=i,this.ay=1-u-n,this.by=n,this.cy=u}sampleCurveX(s){return((this.ax*s+this.bx)*s+this.cx)*s}sampleCurveY(s){return((this.ay*s+this.by)*s+this.cy)*s}sampleCurveDerivativeX(s){return(3*this.ax*s+2*this.bx)*s+this.cx}solveCurveX(s,a){let e=s;for(let c=0;c<h.NEWTON_METHOD_ITERATIONS;c++){const u=this.sampleCurveX(e);if(o(u,s,a))return e;const n=this.sampleCurveDerivativeX(e);if(o(n,0,1e-6))break;e-=(u-s)/n}let r=0,i=1;if(e=s,e<r)return r;if(e>i)return i;for(;r<i;){const c=this.sampleCurveX(e);if(o(c,s,a))return e;s>c?r=e:i=e,e=(i-r)/2+r}return e}solve(s,a=h.DEFAULT_EPSILON){return this.sampleCurveY(this.solveCurveX(s,a))}};h.NEWTON_METHOD_ITERATIONS=8,h.DEFAULT_EPSILON=1e-6;let l=h;const x=t=>s=>t(1-s),b=t=>t;b.cubicBezier="cubic-bezier(0.5, 0.5, 0.5, 0.5)";const v=t=>Math.sin(t*Math.PI*.5);v.cubicBezier="cubic-bezier(0.61, 1, 0.88, 1)";const E=t=>-1/2*(Math.cos(Math.PI*t)-1);E.cubicBezier="cubic-bezier(0.37, 0, 0.63, 1)";const T=(t=1.70158)=>s=>1*s*s*((t+1)*s-t),m=(t=1.70158)=>s=>(s=s-1,1*(s*s*((t+1)*s+t)+1));export{T as a,v as b,E as i,b as l,m as o,x as r};
