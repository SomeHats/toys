{"mappings":"8LAIgBA,EAAOC,EAAgBC,GAChCD,YALcC,GACnB,MAAM,IAAIC,MAAMD,GAKdE,CAAKF,GAAO,4VCSAG,EAAKC,EAAWC,EAAWC,UACjCD,EAAID,GAAKE,EAAIF,WA0KPG,EACdC,UAEOC,OAAOC,QAAQF,SC3LHG,mBAGFC,EAAeC,UACvB,IAAIF,EAAQE,EAASC,KAAKC,IAAIH,GAAQC,EAASC,KAAKE,IAAIJ,mBAGlDK,UACDA,EAAOC,QAAM,CAAEC,EAAMC,IAAMD,EAAKE,IAAID,IAAIT,EAAQW,MACjDC,IAAIN,EAAOO,+BAGHC,EAAGA,EAACC,EAAEA,WAClB,IAAIf,EAAQc,EAAGC,GAKxBC,4BACkBC,KAAOH,MAAIG,KAAOF,KAGhCG,mCACUJ,EAACG,KAAQH,EAACG,KAAQF,EAACE,KAAQF,EAGrCI,uBACKhB,KAAKiB,KAAIH,KAAMC,kBAGpBjB,mBACKE,KAAKkB,MAAKJ,KAAMF,EAACE,KAAOH,GAGjCQ,YAAYC,GAIV,MAAKT,EAAGA,EAACC,EAAEA,GAACE,KAEZ,IAAIO,GAAW,MAEb,IAAIC,EAAa,EAAGC,EAAcH,EAAQV,OAAS,EACnDY,EAAaF,EAAQV,OACrBa,EAAcD,IACd,CACA,MAAQX,EAAGa,EAAUZ,EAAGa,GAAaL,EAAQE,IACrCX,EAAGe,EAAWd,EAAGe,GAAcP,EAAQG,GAE7CE,EAAWb,GAAKe,EAAYf,GAC5BD,GACIe,EAAYF,IAAaZ,EAAIa,IAAcE,EAAYF,GACvDD,IAGJH,GAAYA,UAITA,EAGTO,OAAOC,iBACWA,GAAKf,KAAUH,IAAMkB,EAAMlB,GAACG,KAASF,IAAMiB,EAAMjB,EAGnEkB,YAAUnB,EAAGA,EAACC,EAAEA,IACd,MAAMmB,EAAKpB,EAACG,KAAQH,EACdqB,EAAKpB,EAACE,KAAQF,SACbZ,KAAKiB,KAAKc,EAAKA,EAAKC,EAAKA,GAGlCC,QAAQJ,UACCA,EAAMK,IAAGpB,MAAOhB,MAGzBqC,aAAaN,UDwHgB/B,ECtHzBE,KAAKkB,MAAMW,EAAMjB,EAAGiB,EAAMlB,GAAKX,KAAKkB,MAAKJ,KAAMF,EAACE,KAAOH,YDrD5ByB,EAAaC,EAAa7C,GACzD,MAAM8C,EAAOD,EAAMD,MACnB5C,GAAQ4C,EACD5C,EAAI,GACTA,GAAK8C,SAGAF,EADP5C,EAAQ8C,EAsKDC,EAAkBvC,KAAKwC,GAAIxC,KAAKwC,GAAI1C,OADdA,EClH7B2C,IAAIZ,eACUlB,EAAIkB,EAAMlB,EAACG,KAAQF,EAAIiB,EAAMjB,EAG3CH,IAAIiC,UACK,IAAI7C,EAAOiB,KAAMH,EAAI+B,EAAK5B,KAAOF,EAAI8B,GAG9CA,MAAMA,UACG,IAAI7C,EAAOiB,KAAMH,EAAI+B,EAAK5B,KAAOF,EAAI8B,GAG9CC,qBACcD,OAAM,GAGpBnC,KAAGI,EAAGA,EAACC,EAAEA,WACA,IAAIf,EAAOiB,KAAMH,EAAIA,EAACG,KAAOF,EAAIA,GAG1CsB,KAAGvB,EAAGA,EAACC,EAAEA,WACA,IAAIf,EAAOiB,KAAMH,EAAIA,EAACG,KAAOF,EAAIA,GAG1CgC,eACS,IAAI/C,EAAQG,KAAK4C,MAAK9B,KAAMH,GAAIX,KAAK4C,MAAK9B,KAAMF,IAGzDiC,cACS,IAAIhD,EAAQG,KAAK6C,KAAI/B,KAAMH,GAAIX,KAAK6C,KAAI/B,KAAMF,IAGvDkC,eACS,IAAIjD,EAAQG,KAAK8C,MAAKhC,KAAMH,GAAIX,KAAK8C,MAAKhC,KAAMF,IAGzDmC,cAAcC,UACLnD,EAAQoD,UAASnC,KAAMhB,MAAOkD,GAGvCE,wBACcH,cAAc,GAG5BI,UAAUC,UACDvD,EAAQoD,UAAUG,EAAQtC,KAAOE,WAG1CqC,OAAOC,eACOH,UAASrC,KAAMhB,MAAQwD,GAGrCC,KAAK1B,EAAgBrC,UACZ,IAAIK,EAAQR,EAAIyB,KAAMH,EAAGkB,EAAMlB,EAAGnB,GAAIH,EAAIyB,KAAMF,EAAGiB,EAAMjB,EAAGpB,gBAvHzCmB,EAA2BC,QAA3BD,EAAAA,OAA2BC,EAAAA,GAhBpCf,EACHW,KAAO,IAAIX,EAAQ,EAAG,GCAxC,MACM2D,EAAe,IAAI3D,EAAQ,EAAG,GAG9B4D,EAA8B,IAAVzD,KAAKwC,SAuBlBkB,EAGJC,MAAMC,GACNA,QAKAC,iBAAgB,MAAGD,SACnBE,IAAIC,SAAS,EAAG,EAACjD,KAAOgD,IAAIE,OAAOC,MAAKnD,KAAOgD,IAAIE,OAAOE,cALxDJ,IAAIK,UAAU,EAAG,EAACrD,KAAOgD,IAAIE,OAAOC,MAAKnD,KAAOgD,IAAIE,OAAOE,QAQ7DE,iBACAN,IAAIM,YAGJC,QAAM1D,EAAGA,EAACC,EAAEA,SACZkD,IAAIO,OAAO1D,EAAGC,GAGd0D,QAAM3D,EAAGA,EAACC,EAAEA,SACZkD,IAAIQ,OAAO3D,EAAGC,GAGd2D,KAAG5D,EACNA,EAACC,EAAEA,GACLb,EACAyE,EACAC,EACAC,QAEKZ,IAAIS,IAAI5D,EAAGC,EAAGb,EAAQyE,EAAYC,EAAUC,GAG5CC,MAAMC,EAAaC,EAAa9E,QAChC+D,IAAIa,MAAMC,EAAGjE,EAAGiE,EAAGhE,EAAGiE,EAAGlE,EAAGkE,EAAGjE,EAAGb,GAGlC+E,oBAAkBC,YACvBA,EAAc,EAACC,OACfA,EAAMC,UACNA,EAAS,OAASC,WAClBA,EAAU,GAAAC,iBACVA,EAAmB,EAACC,WACpBA,EAAU,UAENJ,SACGlB,IAAIuB,UAAYN,OAChBjB,IAAIwB,YAAcN,OAClBlB,IAAIyB,QAAUN,OACdnB,IAAI0B,YAAYN,QAChBpB,IAAI2B,eAAiBN,OACrBrB,IAAI4B,SAAWN,GAIjBJ,OAAOW,GACRA,EAAQX,cACLF,mBAAmBa,QACnB7B,IAAIkB,UAINnB,kBAAgBD,KAAGA,IACpBA,IAAI9C,KACDgD,IAAI8B,UAAYhC,GAIlBA,KAAK+B,GACNA,EAAQ/B,YACLC,iBAAiB8B,QACjB7B,IAAIF,QAINiC,0BAA0BF,QAC1B9B,iBAAiB8B,QACjBb,mBAAmBa,GAGnBG,cAAcH,QACd/B,KAAK+B,QACLX,OAAOW,GAGPI,sBACLC,EAnHqB,kBAqHZhB,OAAQgB,EAAOjB,YAlHX,IAqHRkB,YAAYD,EAxHI,gBAyHhBhB,OAAMlE,KAAMiF,sBAAsBC,IAGlCE,SAASC,EAAcC,EAAmBT,EAAoB,SAC9D9B,iBAAiB8B,QACjB7B,IAAIoC,SAASC,EAAMC,EAASzF,EAAGyF,EAASxF,GAGxCyF,OACLC,EACAvG,EACA4F,QAEKvB,iBACAG,IAAI+B,EAAQvG,EAAQ,EAAG,EAAIC,KAAKwC,SAChCsD,cAAcH,GAGdY,QACLD,EACAE,EACAC,EACAd,QAEKvB,iBACAN,IAAIyC,QAAQD,EAAO3F,EAAG2F,EAAO1F,EAAG4F,EAASC,EAAS,EAAG,EAAa,EAAVzG,KAAKwC,SAC7DsD,cAAcH,GAGde,WACLC,EACAP,EACAJ,GAEIW,SACG9C,iBAAgB,CAAGD,KAAMoC,SACzBE,SAASS,EAAOP,EAAS7F,IAAIiD,KAI/BoD,YACLR,GAAiBJ,MACfA,EAnKmB,UAmKQW,MAAEA,GAAK,SAE/BD,WAAWC,EAAOP,EAAUJ,QAE5B5B,iBACAN,IAAIO,OACP+B,EAASzF,EAvKU,EAwKnByF,EAASxF,EAxKU,QA0KhBkD,IAAIQ,OACP8B,EAASzF,EA3KU,EA4KnByF,EAASxF,EA5KU,QA8KhBkD,IAAIO,OACP+B,EAASzF,EA/KU,EAgLnByF,EAASxF,EAhLU,QAkLhBkD,IAAIQ,OACP8B,EAASzF,EAnLU,EAoLnByF,EAASxF,EApLU,QAsLhBoE,OAAM,CAAGD,YArLD,GAqLwBC,OAAQgB,IAGxCa,YACLT,GAAiBJ,MACfA,EA7LmB,UA6LQW,MAAEA,GAAK,SAE/BD,WAAWC,EAAOP,EAAUJ,QAE5BK,OAAOD,EA/LS,EA+LiB,CACpCrB,YA/LW,GAgMXC,OAAQgB,IAILc,WACLC,EACAC,GAAYhB,MACVA,EA1MmB,UA0MQW,MAAEA,GAAK,SAE/BD,WAAWC,EAAO9G,EAAQoH,QAAO,CAAEF,EAAOC,IAAOhB,QAEjDlC,IAAIM,iBACJC,OAAO0C,QACPzC,OAAO0C,GAEZ,MAAME,EAASF,EAAI9E,IAAI6E,GACjBI,EAAiBD,EACpB7D,QAAQI,GACRV,cAhNkB,GAiNlBxC,IAAIyG,GACDI,EAAkBF,EACrB7D,QAAQI,GACRV,cApNkB,GAqNlBxC,IAAIyG,QAEF3C,OAAO8C,QACP7C,OAAO0C,QACP1C,OAAO8C,QACPpC,OAAM,CAAGD,YA5ND,GA4NwBC,OAAQgB,IAGxCqB,mBACLH,EACAI,EACA3B,QAEKmB,WAAWQ,EAAMA,EAAK/G,IAAI2G,GAASvB,GAGnCvE,QACLA,EACAuE,EAA6B,SAExBvB,iBACAC,OAAOjD,EAAQA,EAAQV,OAAS,QAChC,MAAM6G,KAASnG,EAAON,KACpBwD,OAAOiD,QAETzB,cAAcH,GAGd6B,SAASrH,EAAgCwF,EAAsB,SAC/DvB,iBACAC,OAAOlE,EAAO,QACd,IAAIsH,EAAI,EAAGA,EAAItH,EAAOO,OAAQ+G,IAAC3G,KAC7BwD,OAAOnE,EAAOsH,SAEhBzC,OAAOW,GAGP+B,aACLtG,GAA+B4E,MAC7BA,EAjQmB,UAiQQW,MAAEA,GAAK,SAE/BD,WAAWC,EAAOvF,EAAQ,GAAI4E,QAC9B5E,QAAQA,EAAON,KAAOiF,sBAAsBC,IAG5C2B,cACLH,GAAgCxB,MAC9BA,EAzQmB,UAyQQW,MAAEA,GAAK,SAE/BD,WAAWC,EAAOa,EAAS,GAAIxB,QAC/BwB,SAASA,EAAQ1G,KAAOiF,sBAAsBC,IAG9C4B,KACLA,EACAC,GAEIA,EAAKC,OAAKhH,KACP4F,WACHmB,EAAKC,MAAMnB,MACXiB,EAAKG,OACLF,EAAKC,MAAM9B,OAvRM,gBA0RhBlC,IAAIM,iBACJN,IAAIkE,KAAKJ,EAAKK,KAAML,EAAKM,IAAKN,EAAK3D,MAAO2D,EAAK1D,aAC/C4B,cAAc+B,eAhQQ/D,QAAAA,IAAAA,SC7BVqE,gCAEjBF,EACAC,EACAE,EACAC,UAEO,IAAIF,EACT,IAAItI,EAAQoI,EAAMC,GAClB,IAAIrI,EAAQuI,EAAQH,EAAMI,EAASH,IAQvCI,UAAQ3H,EAAGA,EAACC,EAAEA,gBAELqH,MAAQtH,GAAKA,GAACG,KAASsH,OAAKtH,KAASoH,KAAOtH,GAAKA,GAACE,KAASuH,OAIpEE,WAAW1G,gBAEFuG,MAAQvG,EAAMoG,MAAInH,KAClBmH,KAAOpG,EAAMuG,OAAKtH,KAClBuH,OAASxG,EAAMqG,KAAGpH,KAClBoH,IAAMrG,EAAMwG,QAIrBG,wBACcT,OAAOxH,IAAGO,KAAMwB,KAAKI,MAAM,KAGrCuF,uBACUF,OAAOpH,EAGjByH,wBACUL,OAAOpH,EAACG,KAAQwB,KAAK3B,EAG/BuH,sBACUH,OAAOnH,EAGjByH,yBACUN,OAAOnH,EAACE,KAAQwB,KAAK1B,EAG/BqD,wBACU3B,KAAK3B,EAGfuD,yBACU5B,KAAK1B,cA5CSmH,EAAiCzF,QAAjCyF,OAAAA,OAAiCzF,KAAAA,EAC3D3C,OAAO8I,OAAM3H,aChBL4H,GAAAA,EAAAC,IAAAA,EAAO,KAAPD,EACa,wBAAG,GAAC,0BADjBA,EAAAA,EAEL,MAAG,GAAC,QAFCA,EAAAA,EAGM,iBAAG,GAAC,mBAHVA,EAAAA,EAIP,IAAG,GAAC,MAJGA,EAAAA,EAKL,MAAG,IAAE,QALAA,EAAAA,EAML,MAAG,IAAE,QANAA,EAAAA,EAOL,MAAG,IAAE,QAPAA,EAAAA,EAQN,KAAG,IAAE,OARCA,EAAAA,EASP,IAAG,IAAE,MATEA,EAAAA,EAUC,YAAG,IAAE,cAVNA,EAAAA,EAWD,UAAG,IAAE,YAXJA,EAAAA,EAYJ,OAAG,IAAE,SAZDA,EAAAA,EAaL,MAAG,IAAE,QAbAA,EAAAA,EAcH,QAAG,IAAE,UAdFA,EAAAA,EAeD,UAAG,IAAE,YAfJA,EAAAA,EAgBP,IAAG,IAAE,MAhBEA,EAAAA,EAiBN,KAAG,IAAE,OAjBCA,EAAAA,EAkBA,WAAG,IAAE,aAlBLA,EAAAA,EAmBF,SAAG,IAAE,WAnBHA,EAAAA,EAoBC,YAAG,IAAE,cApBNA,EAAAA,EAqBA,WAAG,IAAE,aArBLA,EAAAA,EAsBJ,OAAG,IAAE,SAtBDA,EAAAA,EAuBL,MAAG,IAAE,QAvBAA,EAAAA,EAwBH,QAAG,IAAE,UAxBFA,EAAAA,EAyBE,aAAG,IAAE,eAzBPA,EAAAA,EA0BJ,OAAG,IAAE,SA1BDA,EAAAA,EA2BJ,OAAG,IAAE,SA3BDA,EAAAA,EA4BN,KAAG,IAAE,OA5BCA,EAAAA,EA6BH,QAAG,IAAE,UA7BFA,EAAAA,EA8BH,QAAG,IAAE,UA9BFA,EAAAA,EA+BH,QAAG,IAAE,UA/BFA,EAAAA,EAgCH,QAAG,IAAE,UAhCFA,EAAAA,EAiCH,QAAG,IAAE,UAjCFA,EAAAA,EAkCH,QAAG,IAAE,UAlCFA,EAAAA,EAmCH,QAAG,IAAE,UAnCFA,EAAAA,EAoCH,QAAG,IAAE,UApCFA,EAAAA,EAqCH,QAAG,IAAE,UArCFA,EAAAA,EAsCH,QAAG,IAAE,UAtCFA,EAAAA,EAuCL,MAAG,IAAE,QAvCAA,EAAAA,EAwCD,UAAG,IAAE,YAxCJA,EAAAA,EAyCT,EAAG,IAAE,IAzCIA,EAAAA,EA0CT,EAAG,IAAE,IA1CIA,EAAAA,EA2CT,EAAG,IAAE,IA3CIA,EAAAA,EA4CT,EAAG,IAAE,IA5CIA,EAAAA,EA6CT,EAAG,IAAE,IA7CIA,EAAAA,EA8CT,EAAG,IAAE,IA9CIA,EAAAA,EA+CT,EAAG,IAAE,IA/CIA,EAAAA,EAgDT,EAAG,IAAE,IAhDIA,EAAAA,EAiDT,EAAG,IAAE,IAjDIA,EAAAA,EAkDT,EAAG,IAAE,IAlDIA,EAAAA,EAmDT,EAAG,IAAE,IAnDIA,EAAAA,EAoDT,EAAG,IAAE,IApDIA,EAAAA,EAqDT,EAAG,IAAE,IArDIA,EAAAA,EAsDT,EAAG,IAAE,IAtDIA,EAAAA,EAuDT,EAAG,IAAE,IAvDIA,EAAAA,EAwDT,EAAG,IAAE,IAxDIA,EAAAA,EAyDT,EAAG,IAAE,IAzDIA,EAAAA,EA0DT,EAAG,IAAE,IA1DIA,EAAAA,EA2DT,EAAG,IAAE,IA3DIA,EAAAA,EA4DT,EAAG,IAAE,IA5DIA,EAAAA,EA6DT,EAAG,IAAE,IA7DIA,EAAAA,EA8DT,EAAG,IAAE,IA9DIA,EAAAA,EA+DT,EAAG,IAAE,IA/DIA,EAAAA,EAgET,EAAG,IAAE,IAhEIA,EAAAA,EAiET,EAAG,IAAE,IAjEIA,EAAAA,EAkET,EAAG,IAAE,IAlEIA,EAAAA,EAmEF,SAAG,IAAE,WAnEHA,EAAAA,EAoEF,SAAG,IAAE,WApEHA,EAAAA,EAqEF,SAAG,IAAE,WArEHA,EAAAA,EAsEF,SAAG,IAAE,WAtEHA,EAAAA,EAuEF,SAAG,KAAG,WAvEJA,EAAAA,EAwEF,SAAG,KAAG,WAxEJA,EAAAA,EAyEF,SAAG,KAAG,WAzEJA,EAAAA,EA0EF,SAAG,KAAG,WA1EJA,EAAAA,EA2EF,SAAG,KAAG,WA3EJA,EAAAA,EA4EF,SAAG,KAAG,WA5EJA,EAAAA,EA6EK,gBAAG,KAAG,kBA7EXA,EAAAA,EA8EA,WAAG,KAAG,aA9ENA,EAAAA,EA+EG,cAAG,KAAG,gBA/ETA,EAAAA,EAgFK,gBAAG,KAAG,kBAhFXA,EAAAA,EAiFR,GAAG,KAAG,KAjFEA,EAAAA,EAkFR,GAAG,KAAG,KAlFEA,EAAAA,EAmFR,GAAG,KAAG,KAnFEA,EAAAA,EAoFR,GAAG,KAAG,KApFEA,EAAAA,EAqFR,GAAG,KAAG,KArFEA,EAAAA,EAsFR,GAAG,KAAG,KAtFEA,EAAAA,EAuFR,GAAG,KAAG,KAvFEA,EAAAA,EAwFR,GAAG,KAAG,KAxFEA,EAAAA,EAyFR,GAAG,KAAG,KAzFEA,EAAAA,EA0FP,IAAG,KAAG,MA1FCA,EAAAA,EA2FP,IAAG,KAAG,MA3FCA,EAAAA,EA4FP,IAAG,KAAG,MA5FCA,EAAAA,EA6FP,IAAG,KAAG,MA7FCA,EAAAA,EA8FP,IAAG,KAAG,MA9FCA,EAAAA,EA+FP,IAAG,KAAG,MA/FCA,EAAAA,EAgGP,IAAG,KAAG,MAhGCA,EAAAA,EAiGP,IAAG,KAAG,MAjGCA,EAAAA,EAkGP,IAAG,KAAG,MAlGCA,EAAAA,EAmGP,IAAG,KAAG,MAnGCA,EAAAA,EAoGP,IAAG,KAAG,MApGCA,EAAAA,EAqGP,IAAG,KAAG,MArGCA,EAAAA,EAsGP,IAAG,KAAG,MAtGCA,EAAAA,EAuGP,IAAG,KAAG,MAvGCA,EAAAA,EAwGP,IAAG,KAAG,MAxGCA,EAAAA,EAyGP,IAAG,KAAG,MAzGCA,EAAAA,EA0GP,IAAG,KAAG,MA1GCA,EAAAA,EA2GP,IAAG,KAAG,MA3GCA,EAAAA,EA4GP,IAAG,KAAG,MA5GCA,EAAAA,EA6GP,IAAG,KAAG,MA7GCA,EAAAA,EA8GP,IAAG,KAAG,MA9GCA,EAAAA,EA+GP,IAAG,KAAG,MA/GCA,EAAAA,EAgHP,IAAG,KAAG,MAhHCA,EAAAA,EAiHF,SAAG,KAAG,WAjHJA,EAAAA,EAkHC,YAAG,KAAG,cAlHPA,EAAAA,EAmHG,cAAG,KAAG,gBAnHTA,EAAAA,EAoHG,cAAG,KAAG,gBApHTA,EAAAA,EAqHE,aAAG,KAAG,eArHRA,EAAAA,EAsHF,SAAG,KAAG,WAtHJA,EAAAA,EAuHA,WAAG,KAAG,aAvHNA,EAAAA,EAwHA,WAAG,KAAG,aAxHNA,EAAAA,EAyHL,MAAG,KAAG,QAzHDA,EAAAA,EA0HN,KAAG,KAAG,OA1HAA,EAAAA,EA2HJ,OAAG,KAAG,SA3HFA,EAAAA,EA4HG,cAAG,KAAG,gBA5HTA,EAAAA,EA6HE,aAAG,KAAG,eA7HRA,EAAAA,EA8HE,aAAG,KAAG,eA9HRA,EAAAA,EA+HA,WAAG,KAAG,aA/HNA,EAAAA,EAgIG,cAAG,KAAG,gBAhITA,EAAAA,EAiIE,aAAG,KAAG,qBC9HUE,EAM5BC,YAEAC,eAAeC,IAEfC,mBAAmBD,IAEnBE,aAAaC,IAEbC,OAAOD,IAEPE,YAAYF,IAEZG,WAAWvF,EAA+BwF,IAE1CC,KAAKzF,EAA+BwF,IAEpCE,UAAU1F,EAA+BwF,IAEzCG,uBACcC,OAAOD,uBAvBTC,QACLA,OAASA,GCHlB,MAAMC,EAAmB,SCAJC,UAA0BhB,EAQ7CiB,2BACcC,eAAchJ,KAAM4I,oBAPhCA,EACQI,GAERC,MAAML,QAFEI,eAAAA,SCAkBE,EAe5BP,kBACEzK,EAAM8B,KAAMiI,MAAK,0BACLA,MAGdkB,gBAAgBlB,QACTA,MAAQA,EAIfmB,sBAAsBnB,QACfA,MAAQ,KAIfE,aAAaC,IAGbE,YAAYF,IAGZG,WAAWvF,EAA+BwF,IAG1CE,UAAU1F,EAA+BwF,uBArCjCP,MAAsB,KAG5B/J,EAAM8B,KACCqJ,cAAgBH,EAAW,0DAGlChL,EAXc,4BAWR8B,KACEqJ,YAAoBC,WAA2B,uEAV7BJ,EACrBI,WAHS,gCCMZC,UAAwBL,EAK5BC,gBAAgBlB,GACdgB,MAAME,gBAAgBlB,QACjBuB,UAAY,IAAI5G,EAAUqF,EAAMjF,MAPnCuG,EACGD,WAAU,iCAUUJ,EAK3BC,gBAAgBlB,GACdgB,MAAME,gBAAgBlB,QACjBuB,UAAY,IAAI5G,EAAUqF,EAAMjF,KAGvC0F,gBATOY,WAAU,4BAYbG,UAAsB3B,EAQ1B4B,UAAUzC,QACH9I,MAAQ,IAAIkJ,EAAKJ,EAAMjH,KAAO7B,MAAMqD,MAG3C+G,WAAWvF,EAA+BwF,GACxCxF,EAAI2G,OACJ3G,EAAI4G,UAAS5J,KAAM7B,MAAMgJ,KAAInH,KAAO7B,MAAMiJ,KAE5CsB,UAAU1F,EAA+BwF,GACvCxF,EAAI6G,sBAdMjB,EAAgBzK,GAC1B8K,MAAML,QACDzK,MAAQA,GA6DjB,MAAM2L,EAAQ,UC/DR3G,wBACUD,OAAOC,MAAKnD,KAAQ+J,aAG9B3G,yBACUF,OAAOE,OAAMpD,KAAQ+J,aAG/BC,8BACUD,aAGVE,uBAC0B,YAAhBC,aAAoBlK,KAASmK,WAGvCF,cAAUG,GACZlM,EACuB,OADjB8B,KACCkK,YAAoB,mDAGtBC,WAAaC,EAGhBC,2BACUC,UAGdC,SAASC,GACPA,EAAQC,YAAWzK,KAAMkD,QAG3BwH,UAAUC,eACIC,eAAeC,IAAIF,GAGjCG,UAAiCH,GAC/B,MAAMI,EAAM/K,KAAQ4K,eAAeI,IAAIL,UACvCzM,EAAO6M,EAAM,WAAaJ,EAAWrB,wBACrCpL,EAAO6M,aAAkBJ,EAAU,iCAC5BI,EAGTE,UAAUF,GACR7M,GAAM8B,KACE0K,UAAUK,EAAO1B,aAAW,6CAG/BuB,eAAeM,IAAIH,EAAO1B,YAAoB0B,GACnDA,EAAO5B,gBAAenJ,MAGxBmL,aAAaR,GACC3K,KAAQ8K,UAAUH,GACvBvB,sBAAqBpJ,WACvB4K,eAAeQ,OAAOT,GAG7BU,SAASC,QACFhB,UAAUiB,KAAKD,GACpBA,EAAMtD,eAAchI,MAGtBwL,eAAeC,EAA0BC,GACvC,MAAMC,EAAK3L,KAAQsK,UAAUsB,QAAQH,GACrCvN,GAAiB,IAAVyN,EAAY,qCAEdE,gBAAgBF,EAAOD,GAG9BI,cAAcL,EAA0BC,GACtC,MAAMC,EAAK3L,KAAQsK,UAAUsB,QAAQH,GACrCvN,GAAiB,IAAVyN,EAAY,qCAEdE,gBAAgBF,EAAQ,EAAGD,GAGlCG,gBAAgBF,EAAeL,QACxBhB,UAAUyB,OAAOJ,EAAO,EAAGL,GAChCA,EAAMtD,eAAchI,MAGtBgM,YAAYV,GACV,MAAMK,EAAK3L,KAAQsK,UAAUsB,QAAQN,GACrC,OAAc,IAAVK,SAECM,mBAAmBN,IACjB,GAGTM,mBAAmBN,GACjB,MAAML,EAAKtL,KAAQsK,UAAUqB,eACxBrB,UAAUyB,OAAOJ,EAAO,GAC7BL,EAAMpD,qBACCoD,EAGTjD,OAAOD,OACA,IAAIzB,EAAI,EAAGA,EAjIC,EAiIiBA,IAAK,KAChC,MAAMoE,KAAM/K,KAAS4K,eAAesB,SACvCnB,EAAO5C,aAAaC,QAEjBkC,UAAU6B,SAASb,GAAUA,EAAMjD,OAAOD,SAC1C,MAAMgE,KAAMpM,KAAS4K,eAAesB,SACvCE,EAAO9D,YAAYF,IAKzBK,KAAK4D,QACErJ,IAAI2G,YACJ3G,IAAIpB,MAAK5B,KAAM+J,aAAY/J,KAAO+J,mBAClC/G,IAAIK,UAAU,EAAG,EAACrD,KAAOmD,MAAKnD,KAAOoD,YAErC,MAAM2H,KAAM/K,KAAS4K,eAAesB,SACvCnB,EAAOxC,WAAUvI,KAAMgD,IAAKqJ,QAEzB/B,UACFgC,MAAI,CAAE9N,EAAGC,IAAMD,EAAEuK,eAAiBtK,EAAEsK,iBACpCoD,SAASb,GAAUA,EAAM7C,KAAIzI,KAAMgD,IAAKqJ,SACtC,MAAMD,KAAMpM,KAAS4K,eAAesB,SACvCE,EAAO1D,UAAS1I,KAAMgD,IAAKqJ,QAGxBrJ,IAAI6G,UAGX5D,aACOkE,YAAa,OACbD,YAAcqC,OAAOC,sBAAqBxM,KAAMyM,OAGvDC,OAC2B,OAAvB1M,KAAOkK,cACPqC,OAAOI,qBAAoB3M,KAAMkK,kBAC5BA,YAAc,WAEhBC,YAAa,OACbyC,gBAAkB,KAkBzBC,wBACE,IAAIC,GAAgB,EACpBC,SAASC,iBAAgB,oBAAmB,KACtCD,SAASE,QAAMjN,KAASiK,YAC1B6C,GAAgB,OACXJ,QAEHI,IAAkBC,SAASE,SAC7BH,GAAgB,OACX7G,wBAnLC9C,EAAeC,EAAgB4G,EAAsB,QANzDM,UAAS,QACTH,YAAsB,OACtBD,YAA6B,UAC7B0C,gBAAiC,UACjChC,eAAiB,IAAIsC,SA6J7BT,MAASJ,IACPA,GA/KU,EAgLV,MAAMO,EAAe5M,KAAQ4M,gBAC7B,GAAwB,OAApBA,EAA0B,CAC5B,MAAMO,EAAYd,EAAcO,EAC9B5M,KAAOiK,iBACF5B,OAAO8E,QACP1E,KAAK4D,SAITO,gBAAkBP,OAClBnC,YAAcqC,OAAOC,sBAAqBxM,KAAMyM,aAtKhDvJ,OAAS6J,SAASK,cAAa,eAC/BlK,OAAOC,MAAQA,EAAQ6G,OACvB9G,OAAOE,OAASA,EAAS4G,OACzB9G,OAAOmK,MAAMlK,MAAK,GAAMA,WACxBD,OAAOmK,MAAMjK,OAAM,GAAMA,MAC9B,MAAMJ,EAAGhD,KAAQkD,OAAOoK,WAAU,MAClCpP,EAAO8E,EAAG,YACLA,IAAMA,OACN+G,aA3BK,EA2BUC,OAEf6C,0BDkEe,IAAK,IAAKN,OAAOgB,kBACzCzD,EAAMmB,UAAU,IAAI1B,GAEpB,MAAMiE,EAAS,wBHzFbC,kBACwB,YAAVxF,MAGdU,kBACEzK,EAAM8B,KAAMiI,MAAK,8BACLA,MAGdQ,KAAKzF,EAA+BqJ,IACpChE,OAAOD,IAEPsF,MAAMzF,UACJA,EAAMoD,SAAQrL,WAIhBgI,eAAeC,QACRA,MAAQA,EAGfC,0BACOD,MAAQ,KAGfc,sBACS,gBAnCO,IAAI4E,OAMpBC,IANoBD,EAMK3N,KAAMqJ,YAAYsE,KALtC9E,EAAoB8E,KAAO9E,EAAoB8E,GAAQ,MAClDA,KAAQ9E,EAAoB8E,aAK9B1F,MAAsB,OKK9B4F,aACEC,KACGC,GAEH7P,GAAM8B,KACEgO,mBAAmBnD,IAAIiD,GAAS,sBAChBA,EAAUH,uBAElC,MAAMM,EAAW,IAAIH,EAAS9N,QAAU+N,eACnCC,mBAAmB9C,IAAI4C,EAAWG,GAChCA,EAGTC,aACEJ,eAEYE,mBAAmBnD,IAAIiD,GAGrCK,aAAkCL,GAChC,MAAMG,EAAQjO,KAAQgO,mBAAmBhD,IAAI8C,UAC7C5P,EAAO+P,EAAQ,mBAAqBH,EAAUH,eAC9CzP,EAAO+P,aAAoBH,EAAS,uBAC7BG,EAGTG,gBAAqCN,GACnC,MAAMG,EAAQjO,KAAQmO,aAAaL,eAC9BE,mBAAmB5C,OAAO0C,GAC/BG,EAASlG,WACFkG,EAGTxF,KAAKzF,EAA+BqJ,OAC7B,MAAMyB,KAAS9N,KAASgO,mBAAmB9B,SAC9C4B,EAAUvF,WAAWvF,EAAKqJ,OAEvB,MAAMgC,KAASrO,KAASgO,mBAAmB9B,SAC9CmC,EAAU5F,KAAKzF,EAAKqJ,OAEjB,MAAMiC,KAAStO,KAASgO,mBAAmB9B,SAC9CoC,EAAU5F,UAAU1F,EAAKqJ,GAG7BhE,OAAOD,OACA,MAAM0F,KAAS9N,KAASgO,mBAAmB9B,SAC9C4B,EAAU3F,aAAaC,OAEpB,MAAMiG,KAASrO,KAASgO,mBAAmB9B,SAC9CmC,EAAUhG,OAAOD,OAEd,MAAMkG,KAAStO,KAASgO,mBAAmB9B,SAC9CoC,EAAUhG,YAAYF,GAI1BJ,eAAeC,GACbgB,MAAMjB,eAAeC,OAChB,MAAM6F,KAAS9N,KAASgO,mBAAmB9B,SAC9C4B,EAAU9F,eAAeC,GAI7BC,qBACE,MAAMD,EAAKjI,KAAQ2I,WACnBM,MAAMf,yBACD,MAAM4F,KAAS9N,KAASgO,mBAAmB9B,SAC9C4B,EAAU5F,mBAAmBD,GAIjCc,eACE,OAAE/I,KAAOkO,aAAapF,GAAiB9I,KACzBmO,aAAarF,GAAmBC,eAErCE,MAAMF,kDAhFTiF,mBAAqB,IAAId,MF4FnCM,EAAOK,aACLpE,EACA,IAAIpC,EAAK,IAAItI,EAAQ,IAAK,KAAM,IAAIA,EAAQ,GAAI,MAElDyO,EAAOK,2BArDoB/F,EAKzByG,sBACc3F,OAAOuF,aAAa1E,GAAetL,MAGjDsK,KAAKzF,QACE2F,WACFmC,UAAUvB,GACVC,UAAU1C,KAAK,IAAIO,EAAKtI,EAAQW,KAAIM,KAAOuO,UAAU/M,MAAIxB,KAAQ+G,kBAX1DyH,EAAuBzH,GACjCkC,MAAMuF,QAD2BzH,KAAAA,IAoDL,CAC9BjE,KAAI,OACJoB,OAAM,QACND,YAAa,IAEfuJ,EAAOK,2BA1CwB/F,EAS7BO,OAAOD,GACL,MAAMqG,EAAazO,KAAQ4I,OAAOuF,aAAa1E,GAC/C,IAAIxC,EAASwH,EAActQ,MAAM8I,OAC/BjH,KAAO0O,SAASC,OAAM,UACtB1H,EAASA,EAAO7F,IAAI,IAAIrC,EAAOiB,KAAM4O,UAAYxG,EAAO,KAExDpI,KAAO0O,SAASC,OAAM,WACtB1H,EAASA,EAAOxH,IAAI,IAAIV,EAAOiB,KAAM4O,UAAYxG,EAAO,KAGxDpI,KAAO0O,SAASC,OAAM,UACtB1H,EAASA,EAAO7F,IAAI,IAAIrC,EAAQ,EAACiB,KAAO4O,UAAYxG,KAEpDpI,KAAO0O,SAASC,OAAM,UACtB1H,EAASA,EAAOxH,IAAI,IAAIV,EAAQ,EAACiB,KAAO4O,UAAYxG,KAEtDqG,EAAc/E,UAAUzC,eAvBxB4H,EACgBD,EACAF,GAEhBzF,MAAM4F,QAHUD,UAAAA,OACAF,SAAAA,IAwClB,GACA,UG7DAC,OAAOG,eACOC,cAAcD,GAAQH,OAGpCK,OAAOF,EAAiBG,eACVF,cAAcD,GAAQI,UAAUC,OAAOF,GAGrDG,KAAKN,EAAiBG,eACRF,cAAcD,GAAQO,QAAQF,OAAOF,GAG3CK,gCAAgCC,GACtC,MAAMT,EAAM9O,KAAQwP,gBAAgBxE,IAAIuE,GACxC,OAAKT,OAGOC,cAAcD,GAFjB,KAKHC,cAAcD,GACpB,MAAMW,EAAUzP,KAAQyP,WAAWzE,IAAI8D,UACvC5Q,EAAOuR,GACAA,cA7DGC,GACV,MAAMF,EAAkB,IAAItC,IACtBuC,EAAa,IAAIvC,QAElB,MAAO4B,EAAQa,KAAahR,EAAQ+Q,GAAiB,KACnD,MAAMH,KAAWI,EACpBH,EAAgBtE,IAAIqE,EAAST,GAE/BW,EAAWvE,IAAI4D,EAAM,CACnBI,UAAW,IAAIU,EAAAC,QACfR,QAAS,IAAIO,EAAAC,QACblB,QAAQ,SAIPa,gBAAkBA,OAClBC,WAAaA,EAElB1C,SAASC,iBAAgB,WAAa8C,IACpC,MAAMC,EAAU/P,KAAQsP,gCAAgCQ,EAAMP,SACzDQ,IAILA,EAAWpB,QAAS,EACpBoB,EAAWb,UAAUc,WAEvBjD,SAASC,iBAAgB,SAAW8C,IAClC,MAAMC,EAAU/P,KAAQsP,gCAAgCQ,EAAMP,SACzDQ,IAILA,EAAWpB,QAAS,EACpBoB,EAAWV,QAAQW,aHiEN,CACf7I,KAAI,CAAGU,EAAQoI,EAAGpI,EAAQqI,YAC1B5I,MAAK,CAAGO,EAAQsI,EAAGtI,EAAQuI,aAC3BC,KAAI,CAAGxI,EAAQyI,EAAGzI,EAAQ0I,SAAU1I,EAAQ2I,OAC5CC,KAAI,CAAG5I,EAAQ6I,MAGnB5G,EAAMuB,SAASmC,GAEf1D,EAAMS,SAASwC,SAAS4D,eAAc,SACtC7G,EAAM7D,QAEN2K,QAAQC,IAAI/G","sources":["src/lib/assert.ts","src/lib/utils.ts","src/lib/geom/Vector2.ts","src/lib/DebugDraw.ts","src/lib/geom/AABB.ts","src/lib/KeyCode.tsx","src/lib/scene/Component.ts","src/lib/scene/SceneObject.ts","src/lib/scene/SortOrderProvider.ts","src/lib/scene/SceneSystem.ts","src/platformer/platformer-main.tsx","src/lib/scene/Scene.ts","src/lib/scene/Entity.ts","src/lib/ButtonMapping.tsx"],"sourcesContent":["export function fail(message: string): never {\n  throw new Error(message);\n}\n\nexport function assert(value: unknown, message?: string): asserts value {\n  if (!value) {\n    fail(message || 'Assertion Error');\n  }\n}\n","export type TimeoutId = ReturnType<typeof setTimeout>;\nexport type IntervalId = ReturnType<typeof setInterval>;\n\nexport type ReadonlyRecord<K extends keyof any, T> = {\n  readonly [P in K]: T;\n};\n\nexport function times<T>(n: number, fn: (idx: number) => T): Array<T> {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(fn(i));\n  }\n  return result;\n}\n\nexport function lerp(a: number, b: number, n: number): number {\n  return (b - a) * n + a;\n}\n\nexport function invLerp(a: number, b: number, n: number): number {\n  return (n - a) / (b - a);\n}\n\nexport function constrain(min: number, max: number, n: number): number {\n  return Math.min(max, Math.max(min, n));\n}\n\nexport function constrainWrapped(min: number, max: number, n: number): number {\n  const size = max - min;\n  n = n - min;\n  while (n < 0) {\n    n += size;\n  }\n  n = n % size;\n  return min + n;\n}\n\nexport function mapRange(\n  a1: number,\n  b1: number,\n  a2: number,\n  b2: number,\n  n: number,\n): number {\n  return lerp(a2, b2, invLerp(a1, b1, n));\n}\n\nexport function random(a: number, b?: number) {\n  if (typeof b === 'number') {\n    return lerp(a, b, Math.random());\n  }\n  return lerp(0, a, Math.random());\n}\n\nexport function randomInt(a: number, b?: number) {\n  return Math.floor(random(a, b));\n}\n\nexport function varyAbsolute(base: number, amount: number): number {\n  return random(base - amount, base + amount);\n}\n\nexport function varyRelative(base: number, amount: number): number {\n  return varyAbsolute(base, base * amount);\n}\n\nexport function sample<T>(arr: ReadonlyArray<T>): T {\n  return arr[Math.floor(random(arr.length))];\n}\n\nexport function flatten<T>(arr: ReadonlyArray<ReadonlyArray<T>>): Array<T> {\n  return arr.reduce<Array<T>>((a, b) => a.concat(b), []);\n}\n\nexport function uniq<T>(arr: T[]): Array<T> {\n  return Array.from(new Set(arr));\n}\n\nexport function intersection<T>(a1: T[], a2: T[]): T[] {\n  const a1Items = new Set(a1);\n  const result = new Set<T>();\n  for (const item of a2) {\n    if (a1Items.has(item)) {\n      result.add(item);\n    }\n  }\n  return Array.from(result);\n}\n\nexport function groupBy<T, Key>(\n  items: ReadonlyArray<T>,\n  getKey: (item: T) => Key,\n): Map<Key, Array<T>> {\n  const groups = new Map<Key, T[]>();\n  for (const item of items) {\n    const key = getKey(item);\n    const existing = groups.get(key);\n    if (existing) {\n      existing.push(item);\n    } else {\n      groups.set(key, [item]);\n    }\n  }\n\n  return groups;\n}\n\nexport function sortBy<T, Key extends number | string>(\n  items: ReadonlyArray<T>,\n  getKey: (item: T) => Key,\n): Array<T> {\n  return items.slice().sort((a, b) => (getKey(a) < getKey(b) ? -1 : 1));\n}\n\nexport function partition<T>(\n  items: ReadonlyArray<T>,\n  condition: (item: T) => boolean,\n): [T[], T[]] {\n  const pass = [];\n  const fail = [];\n  for (const item of items) {\n    if (condition(item)) {\n      pass.push(item);\n    } else {\n      fail.push(item);\n    }\n  }\n  return [pass, fail];\n}\n\nexport function randomColor(): string {\n  return `rgb(${Math.floor(random(256))},${Math.floor(\n    random(256),\n  )},${Math.floor(random(256))})`;\n}\n\nexport function removeFromArray<T>(array: Array<T>, item: T) {\n  const idx = array.indexOf(item);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n}\n\nexport function frame(): Promise<number> {\n  return new Promise((resolve) => {\n    window.requestAnimationFrame((time) => resolve(time));\n  });\n}\n\nexport function wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(() => resolve(), ms));\n}\n\nexport async function frameLoop(\n  cb: (time: number, cancel: () => void) => void,\n) {\n  let shouldCancel = false;\n  const cancel = () => {\n    shouldCancel = true;\n  };\n  while (true) {\n    cb(await frame(), cancel);\n    if (shouldCancel) {\n      return;\n    }\n  }\n}\n\nexport function fromEntries<K extends PropertyKey, V>(\n  entries: ReadonlyArray<[K, V]>,\n): Record<K, V> {\n  const result = {} as Record<K, V>;\n  for (const [key, value] of entries) {\n    result[key] = value;\n  }\n  return result;\n}\n\nexport function keys<K extends string, V>(object: Record<K, V>): Array<K> {\n  return Object.keys(object) as K[];\n}\n\nexport function values<K extends string, V>(object: Record<K, V>): Array<V> {\n  return Object.values(object) as V[];\n}\n\nexport function entries<K extends string, V>(\n  object: Record<K, V>,\n): Array<[K, V]> {\n  return Object.entries(object) as [K, V][];\n}\n\nexport function compact<T>(arr: ReadonlyArray<T>): Array<NonNullable<T>> {\n  return arr.filter(\n    (item): item is NonNullable<T> => item !== null && item !== undefined,\n  );\n}\n\nexport function normalizeAngle(angle: number): number {\n  return constrainWrapped(-Math.PI, Math.PI, angle);\n}\n\nexport function clamp(a: number, b: number, n: number): number {\n  return Math.max(Math.min(a, b), Math.min(Math.max(a, b), n));\n}\n\nexport function shuffle<T>(arr: ReadonlyArray<T>): Array<T> {\n  const newArr = arr.slice();\n  for (let i = newArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n  }\n  return newArr;\n}\n\nexport function getId(prefix = ''): string {\n  return `${prefix}${Math.random().toString(36).slice(1)}`;\n}\n\nexport function getLocalStorageItem(\n  key: string,\n  fallback: unknown = null,\n): unknown {\n  try {\n    // Get from local storage by key\n    const item = window.localStorage.getItem(key);\n    // Parse stored json or if none return initialValue\n    return item ? JSON.parse(item) : fallback;\n  } catch (error) {\n    // If error also return initialValue\n    console.log(error);\n    return fallback;\n  }\n}\n\nexport function setLocalStorageItem(key: string, value: unknown) {\n  const stringified = JSON.stringify(value);\n  try {\n    window.localStorage.setItem(key, stringified);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function debounce<Args extends Array<unknown>>(\n  ms: number,\n  fn: (...args: Args) => void,\n): (...args: Args) => void {\n  let timeoutHandle: TimeoutId | undefined;\n\n  return (...args: Args) => {\n    if (timeoutHandle !== undefined) {\n      clearTimeout(timeoutHandle);\n    }\n    timeoutHandle = setTimeout(() => fn(...args), ms);\n  };\n}\n\nexport function exhaustiveSwitchError(value: never): never {\n  throw new Error(`Unknown switch case ${value}`);\n}\n\nexport function has(obj: object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function get<K extends string, V>(\n  obj: Partial<Record<K, V>>,\n  key: K,\n): V | undefined;\nexport function get(obj: object, key: string): unknown;\nexport function get(obj: object, key: string): unknown {\n  if (!has(obj, key)) {\n    return undefined;\n  }\n  return (obj as any)[key];\n}\n\nexport function approxEq(a: number, b: number, epsilon: number): boolean {\n  return Math.abs(a - b) < epsilon;\n}\n\nexport function queueMicrotask(callback: () => void): () => void {\n  let isCancelled = false;\n  Promise.resolve()\n    .then(() => {\n      if (isCancelled) {\n        return;\n      }\n      callback();\n    })\n    .catch((e) =>\n      setTimeout(() => {\n        throw e;\n      }),\n    );\n  return () => {\n    isCancelled = true;\n  };\n}\n\nexport function promiseFromEvents<T>(\n  setupResolve: (resolve: (value: T) => void) => void,\n  setupReject: (reject: (error: unknown) => void) => void,\n): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    setupResolve(resolve);\n    setupReject(reject);\n  });\n}\n\nexport function mapObjectValues<K extends string, V, U>(\n  object: Record<K, V>,\n  fn: (value: V, key: K, obj: Record<K, V>) => U,\n): Record<K, U> {\n  const result = {} as Record<K, U>;\n  for (const [k, v] of entries(object)) {\n    result[k] = fn(v, k, object);\n  }\n  return result;\n}\n","import { normalizeAngle, lerp } from '../utils';\n\nexport default class Vector2 {\n  static readonly ZERO = new Vector2(0, 0);\n\n  static fromPolar(angle: number, radius: number) {\n    return new Vector2(radius * Math.cos(angle), radius * Math.sin(angle));\n  }\n\n  static average(points: ReadonlyArray<Vector2>): Vector2 {\n    const sum = points.reduce((memo, p) => memo.add(p), Vector2.ZERO);\n    return sum.div(points.length);\n  }\n\n  static fromVectorLike({ x, y }: { x: number; y: number }): Vector2 {\n    return new Vector2(x, y);\n  }\n\n  constructor(public readonly x: number, public readonly y: number) {}\n\n  toString(): string {\n    return `Vector2(${this.x}, ${this.y})`;\n  }\n\n  get magnitudeSquared(): number {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  get magnitude(): number {\n    return Math.sqrt(this.magnitudeSquared);\n  }\n\n  get angle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  isInPolygon(polygon: ReadonlyArray<Vector2>): boolean {\n    // ray-casting algorithm based on\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n    const { x, y } = this;\n\n    let isInside = false;\n    for (\n      let currentIdx = 0, previousIdx = polygon.length - 1;\n      currentIdx < polygon.length;\n      previousIdx = currentIdx++\n    ) {\n      const { x: currentX, y: currentY } = polygon[currentIdx];\n      const { x: previousX, y: previousY } = polygon[previousIdx];\n      const doesIntersect =\n        currentY > y != previousY > y &&\n        x <\n          ((previousX - currentX) * (y - currentY)) / (previousY - currentY) +\n            currentX;\n\n      if (doesIntersect) {\n        isInside = !isInside;\n      }\n    }\n\n    return isInside;\n  }\n\n  equals(other: Vector2) {\n    return this === other || (this.x === other.x && this.y === other.y);\n  }\n\n  distanceTo({ x, y }: Vector2): number {\n    const dx = x - this.x;\n    const dy = y - this.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  angleTo(other: Vector2): number {\n    return other.sub(this).angle;\n  }\n\n  angleBetween(other: Vector2): number {\n    return normalizeAngle(\n      Math.atan2(other.y, other.x) - Math.atan2(this.y, this.x),\n    );\n  }\n\n  dot(other: Vector2): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  div(scale: number): Vector2 {\n    return new Vector2(this.x / scale, this.y / scale);\n  }\n\n  scale(scale: number): Vector2 {\n    return new Vector2(this.x * scale, this.y * scale);\n  }\n\n  negate(): Vector2 {\n    return this.scale(-1);\n  }\n\n  add({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x + x, this.y + y);\n  }\n\n  sub({ x, y }: Vector2): Vector2 {\n    return new Vector2(this.x - x, this.y - y);\n  }\n\n  floor(): Vector2 {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y));\n  }\n\n  ceil(): Vector2 {\n    return new Vector2(Math.ceil(this.x), Math.ceil(this.y));\n  }\n\n  round(): Vector2 {\n    return new Vector2(Math.round(this.x), Math.round(this.y));\n  }\n\n  withMagnitude(newMagnitude: number): Vector2 {\n    return Vector2.fromPolar(this.angle, newMagnitude);\n  }\n\n  normalize(): Vector2 {\n    return this.withMagnitude(1);\n  }\n\n  withAngle(newAngle: number): Vector2 {\n    return Vector2.fromPolar(newAngle, this.magnitude);\n  }\n\n  rotate(byAngle: number): Vector2 {\n    return this.withAngle(this.angle + byAngle);\n  }\n\n  lerp(other: Vector2, n: number): Vector2 {\n    return new Vector2(lerp(this.x, other.x, n), lerp(this.y, other.y, n));\n  }\n}\n","import AABB from './geom/AABB';\nimport Vector2 from './geom/Vector2';\n\nconst DEFAULT_DEBUG_COLOR = 'magenta';\nconst LABEL_OFFSET = new Vector2(5, 0);\nconst DEBUG_POINT_SIZE = 3;\nconst HAIRLINE = 0.5;\nconst DEBUG_ARROW_ANGLE = Math.PI * 0.75;\nconst DEBUG_ARROW_SIZE = 5;\n\nexport type StrokeOptions = {\n  strokeWidth?: number;\n  stroke?: string;\n  strokeCap?: 'butt' | 'round' | 'square';\n  strokeDash?: number[];\n  strokeDashOffset?: number;\n  strokeJoin?: 'bevel' | 'round' | 'miter';\n};\n\nexport type FillOptions = {\n  fill?: string;\n};\n\nexport type DebugOptions = {\n  color?: string;\n  label?: string;\n};\n\nexport type StrokeAndFillOptions = StrokeOptions & FillOptions;\n\nexport class DebugDraw {\n  constructor(private readonly ctx: CanvasRenderingContext2D) {}\n\n  public clear(fill?: string) {\n    if (!fill) {\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n      return;\n    }\n\n    this.applyFillOptions({ fill });\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n\n  public beginPath() {\n    this.ctx.beginPath();\n  }\n\n  public moveTo({ x, y }: Vector2) {\n    this.ctx.moveTo(x, y);\n  }\n\n  public lineTo({ x, y }: Vector2) {\n    this.ctx.lineTo(x, y);\n  }\n\n  public arc(\n    { x, y }: Vector2,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n    anticlockwise?: boolean,\n  ) {\n    this.ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n  }\n\n  public arcTo(p1: Vector2, p2: Vector2, radius: number) {\n    this.ctx.arcTo(p1.x, p1.y, p2.x, p2.y, radius);\n  }\n\n  public applyStrokeOptions({\n    strokeWidth = 1,\n    stroke = undefined,\n    strokeCap = 'butt',\n    strokeDash = [],\n    strokeDashOffset = 0,\n    strokeJoin = 'round',\n  }: StrokeOptions) {\n    if (stroke) {\n      this.ctx.lineWidth = strokeWidth;\n      this.ctx.strokeStyle = stroke;\n      this.ctx.lineCap = strokeCap;\n      this.ctx.setLineDash(strokeDash);\n      this.ctx.lineDashOffset = strokeDashOffset;\n      this.ctx.lineJoin = strokeJoin;\n    }\n  }\n\n  public stroke(options: StrokeOptions) {\n    if (options.stroke) {\n      this.applyStrokeOptions(options);\n      this.ctx.stroke();\n    }\n  }\n\n  public applyFillOptions({ fill = undefined }: FillOptions) {\n    if (fill) {\n      this.ctx.fillStyle = fill;\n    }\n  }\n\n  public fill(options: FillOptions) {\n    if (options.fill) {\n      this.applyFillOptions(options);\n      this.ctx.fill();\n    }\n  }\n\n  public applyStrokeAndFillOptions(options: StrokeAndFillOptions) {\n    this.applyFillOptions(options);\n    this.applyStrokeOptions(options);\n  }\n\n  public strokeAndFill(options: StrokeAndFillOptions) {\n    this.fill(options);\n    this.stroke(options);\n  }\n\n  public getDebugStrokeOptions(\n    color: string = DEFAULT_DEBUG_COLOR,\n  ): StrokeOptions {\n    return { stroke: color, strokeWidth: HAIRLINE };\n  }\n\n  public debugStroke(color: string = DEFAULT_DEBUG_COLOR) {\n    this.stroke(this.getDebugStrokeOptions(color));\n  }\n\n  public fillText(text: string, position: Vector2, options: FillOptions = {}) {\n    this.applyFillOptions(options);\n    this.ctx.fillText(text, position.x, position.y);\n  }\n\n  public circle(\n    center: Vector2,\n    radius: number,\n    options: StrokeAndFillOptions,\n  ) {\n    this.beginPath();\n    this.arc(center, radius, 0, 2 * Math.PI);\n    this.strokeAndFill(options);\n  }\n\n  public ellipse(\n    center: Vector2,\n    radiusX: number,\n    radiusY: number,\n    options: StrokeAndFillOptions,\n  ) {\n    this.beginPath();\n    this.ctx.ellipse(center.x, center.y, radiusX, radiusY, 0, 0, Math.PI * 2);\n    this.strokeAndFill(options);\n  }\n\n  public debugLabel(\n    label: string | undefined,\n    position: Vector2,\n    color: string,\n  ) {\n    if (label) {\n      this.applyFillOptions({ fill: color });\n      this.fillText(label, position.add(LABEL_OFFSET));\n    }\n  }\n\n  public debugPointX(\n    position: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, position, color);\n\n    this.beginPath();\n    this.ctx.moveTo(\n      position.x - DEBUG_POINT_SIZE,\n      position.y - DEBUG_POINT_SIZE,\n    );\n    this.ctx.lineTo(\n      position.x + DEBUG_POINT_SIZE,\n      position.y + DEBUG_POINT_SIZE,\n    );\n    this.ctx.moveTo(\n      position.x + DEBUG_POINT_SIZE,\n      position.y - DEBUG_POINT_SIZE,\n    );\n    this.ctx.lineTo(\n      position.x - DEBUG_POINT_SIZE,\n      position.y + DEBUG_POINT_SIZE,\n    );\n    this.stroke({ strokeWidth: HAIRLINE, stroke: color });\n  }\n\n  public debugPointO(\n    position: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, position, color);\n\n    this.circle(position, DEBUG_POINT_SIZE, {\n      strokeWidth: HAIRLINE,\n      stroke: color,\n    });\n  }\n\n  public debugArrow(\n    start: Vector2,\n    end: Vector2,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, Vector2.average([start, end]), color);\n\n    this.ctx.beginPath();\n    this.moveTo(start);\n    this.lineTo(end);\n\n    const vector = end.sub(start);\n    const arrowLeftPoint = vector\n      .rotate(-DEBUG_ARROW_ANGLE)\n      .withMagnitude(DEBUG_ARROW_SIZE)\n      .add(end);\n    const arrowRightPoint = vector\n      .rotate(+DEBUG_ARROW_ANGLE)\n      .withMagnitude(DEBUG_ARROW_SIZE)\n      .add(end);\n\n    this.moveTo(arrowLeftPoint);\n    this.lineTo(end);\n    this.lineTo(arrowRightPoint);\n    this.stroke({ strokeWidth: HAIRLINE, stroke: color });\n  }\n\n  public debugVectorAtPoint(\n    vector: Vector2,\n    base: Vector2,\n    options?: DebugOptions,\n  ) {\n    this.debugArrow(base, base.add(vector), options);\n  }\n\n  public polygon(\n    polygon: ReadonlyArray<Vector2>,\n    options: StrokeAndFillOptions = {},\n  ) {\n    this.beginPath();\n    this.moveTo(polygon[polygon.length - 1]);\n    for (const point of polygon) {\n      this.lineTo(point);\n    }\n    this.strokeAndFill(options);\n  }\n\n  public polyLine(points: ReadonlyArray<Vector2>, options: StrokeOptions = {}) {\n    this.beginPath();\n    this.moveTo(points[0]);\n    for (let i = 1; i < points.length; i++) {\n      this.lineTo(points[i]);\n    }\n    this.stroke(options);\n  }\n\n  public debugPolygon(\n    polygon: ReadonlyArray<Vector2>,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, polygon[0], color);\n    this.polygon(polygon, this.getDebugStrokeOptions(color));\n  }\n\n  public debugPolyLine(\n    polyLine: ReadonlyArray<Vector2>,\n    { color = DEFAULT_DEBUG_COLOR, label = undefined }: DebugOptions = {},\n  ) {\n    this.debugLabel(label, polyLine[0], color);\n    this.polyLine(polyLine, this.getDebugStrokeOptions(color));\n  }\n\n  public aabb(\n    aabb: AABB,\n    opts: StrokeAndFillOptions & { debug?: DebugOptions },\n  ) {\n    if (opts.debug) {\n      this.debugLabel(\n        opts.debug.label,\n        aabb.origin,\n        opts.debug.color || DEFAULT_DEBUG_COLOR,\n      );\n    }\n    this.ctx.beginPath();\n    this.ctx.rect(aabb.left, aabb.top, aabb.width, aabb.height);\n    this.strokeAndFill(opts);\n  }\n}\n","import Vector2 from './Vector2';\n\nexport default class AABB {\n  static fromLeftTopRightBottom(\n    left: number,\n    top: number,\n    right: number,\n    bottom: number,\n  ): AABB {\n    return new AABB(\n      new Vector2(left, top),\n      new Vector2(right - left, bottom - top),\n    );\n  }\n\n  constructor(public readonly origin: Vector2, public readonly size: Vector2) {\n    Object.freeze(this);\n  }\n\n  contains({ x, y }: Vector2): boolean {\n    return (\n      this.left <= x && x <= this.right && this.top <= y && y <= this.bottom\n    );\n  }\n\n  intersects(other: AABB): boolean {\n    return !(\n      this.right < other.left ||\n      this.left > other.right ||\n      this.bottom < other.top ||\n      this.top > other.bottom\n    );\n  }\n\n  getCenter(): Vector2 {\n    return this.origin.add(this.size.scale(0.5));\n  }\n\n  get left(): number {\n    return this.origin.x;\n  }\n\n  get right(): number {\n    return this.origin.x + this.size.x;\n  }\n\n  get top(): number {\n    return this.origin.y;\n  }\n\n  get bottom(): number {\n    return this.origin.y + this.size.y;\n  }\n\n  get width(): number {\n    return this.size.x;\n  }\n\n  get height(): number {\n    return this.size.y;\n  }\n}\n","export enum KeyCode {\n  THAT_KEY_HAS_NO_KEYCODE = 0,\n  BREAK = 3,\n  BACKSPACE_DELETE = 8,\n  TAB = 9,\n  CLEAR = 12,\n  ENTER = 13,\n  SHIFT = 16,\n  CTRL = 17,\n  ALT = 18,\n  PAUSE_BREAK = 19,\n  CAPS_LOCK = 20,\n  ESCAPE = 27,\n  SPACE = 32,\n  PAGE_UP = 33,\n  PAGE_DOWN = 34,\n  END = 35,\n  HOME = 36,\n  LEFT_ARROW = 37,\n  UP_ARROW = 38,\n  RIGHT_ARROW = 39,\n  DOWN_ARROW = 40,\n  SELECT = 41,\n  PRINT = 42,\n  EXECUTE = 43,\n  PRINT_SCREEN = 44,\n  INSERT = 45,\n  DELETE = 46,\n  HELP = 47,\n  DIGIT_0 = 48,\n  DIGIT_1 = 49,\n  DIGIT_2 = 50,\n  DIGIT_3 = 51,\n  DIGIT_4 = 52,\n  DIGIT_5 = 53,\n  DIGIT_6 = 54,\n  DIGIT_7 = 55,\n  DIGIT_8 = 56,\n  DIGIT_9 = 57,\n  COLON = 58,\n  LESS_THAN = 60,\n  A = 65,\n  B = 66,\n  C = 67,\n  D = 68,\n  E = 69,\n  F = 70,\n  G = 71,\n  H = 72,\n  I = 73,\n  J = 74,\n  K = 75,\n  L = 76,\n  M = 77,\n  N = 78,\n  O = 79,\n  P = 80,\n  Q = 81,\n  R = 82,\n  S = 83,\n  T = 84,\n  U = 85,\n  V = 86,\n  W = 87,\n  X = 88,\n  Y = 89,\n  Z = 90,\n  NUMPAD_0 = 96,\n  NUMPAD_1 = 97,\n  NUMPAD_2 = 98,\n  NUMPAD_3 = 99,\n  NUMPAD_4 = 100,\n  NUMPAD_5 = 101,\n  NUMPAD_6 = 102,\n  NUMPAD_7 = 103,\n  NUMPAD_8 = 104,\n  NUMPAD_9 = 105,\n  NUMPAD_MULTIPLY = 106,\n  NUMPAD_ADD = 107,\n  NUMPAD_PERIOD = 108,\n  NUMPAD_SUBTRACT = 109,\n  F1 = 112,\n  F2 = 113,\n  F3 = 114,\n  F4 = 115,\n  F5 = 116,\n  F6 = 117,\n  F7 = 118,\n  F8 = 119,\n  F9 = 120,\n  F10 = 121,\n  F11 = 122,\n  F12 = 123,\n  F13 = 124,\n  F14 = 125,\n  F15 = 126,\n  F16 = 127,\n  F17 = 128,\n  F18 = 129,\n  F19 = 130,\n  F20 = 131,\n  F21 = 132,\n  F22 = 133,\n  F23 = 134,\n  F24 = 135,\n  F25 = 136,\n  F26 = 137,\n  F27 = 138,\n  F28 = 139,\n  F29 = 140,\n  F30 = 141,\n  F31 = 142,\n  F32 = 143,\n  NUM_LOCK = 144,\n  SCROLL_LOCK = 145,\n  AIRPLANE_MODE = 151,\n  PAGE_BACKWARD = 166,\n  PAGE_FORWARD = 167,\n  HOME_KEY = 172,\n  SEMI_COLON = 186,\n  EQUAL_SIGN = 187,\n  COMMA = 188,\n  DASH = 189,\n  PERIOD = 190,\n  FORWARD_SLASH = 191,\n  GRAVE_ACCENT = 192,\n  OPEN_BRACKET = 219,\n  BACK_SLASH = 220,\n  CLOSE_BRACKET = 221,\n  SINGLE_QUOTE = 222,\n}\n","import Entity from './Entity';\nimport Scene from './Scene';\n\nexport default abstract class Component {\n  readonly entity: Entity;\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  onRemove() {}\n\n  onAddedToScene(scene: Scene) {}\n\n  onRemovedFromScene(scene: Scene) {}\n\n  beforeUpdate(delta: number) {}\n\n  update(delta: number) {}\n\n  afterUpdate(delta: number) {}\n\n  beforeDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  draw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  afterDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  getScene(): Scene {\n    return this.entity.getScene();\n  }\n}\n","import { assert } from '../assert';\nimport Scene from './Scene';\n\nconst constructorIdCounts = {} as Record<string, number>;\n\nconst getNextCount = (name: string): string => {\n  if (!constructorIdCounts[name]) constructorIdCounts[name] = 0;\n  return `${name}@${constructorIdCounts[name]++}`;\n};\n\nexport default abstract class SceneObject {\n  id: string = getNextCount(this.constructor.name);\n  private scene: Scene | null = null;\n\n  hasScene(): boolean {\n    return this.scene !== null;\n  }\n\n  getScene(): Scene {\n    assert(this.scene, 'scene must be present');\n    return this.scene;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, elapsedTime: number): void {}\n  update(delta: number): void {}\n\n  addTo(scene: Scene): this {\n    scene.addChild(this);\n    return this;\n  }\n\n  onAddedToScene(scene: Scene) {\n    this.scene = scene;\n  }\n\n  onRemovedFromScene() {\n    this.scene = null;\n  }\n\n  getSortOrder(): number {\n    return 0;\n  }\n}\n","import Component from './Component';\nimport Entity from './Entity';\n\nexport default class SortOrderProvider extends Component {\n  constructor(\n    entity: Entity,\n    private getSortOrderFn: (entity: Entity) => number,\n  ) {\n    super(entity);\n  }\n\n  getSortOrder(): number {\n    return this.getSortOrderFn(this.entity);\n  }\n}\n","// @flow\nimport { assert } from '../assert';\nimport Scene from './Scene';\n\nconst DEFAULT_NAME = '$$AbstractSceneSystem$$';\n\nexport default abstract class SceneSystem {\n  static systemName = DEFAULT_NAME;\n  private scene: Scene | null = null;\n\n  constructor() {\n    assert(\n      this.constructor !== SceneSystem,\n      'SceneSystem is an abstract class that must be extended',\n    );\n    assert(\n      (this.constructor as any).systemName !== DEFAULT_NAME,\n      'classes extending SceneSystem must override SceneSystem.systemName',\n    );\n  }\n\n  getScene(): Scene {\n    assert(this.scene, 'scene is required');\n    return this.scene;\n  }\n\n  afterAddToScene(scene: Scene) {\n    this.scene = scene;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  beforeRemoveFromScene(scene: Scene) {\n    this.scene = null;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  beforeUpdate(delta: number) {}\n\n  // eslint-disable-next-line no-unused-vars\n  afterUpdate(delta: number) {}\n\n  // eslint-disable-next-line no-unused-vars\n  beforeDraw(ctx: CanvasRenderingContext2D, time: number) {}\n\n  // eslint-disable-next-line no-unused-vars\n  afterDraw(ctx: CanvasRenderingContext2D, time: number) {}\n}\n","import { ButtonMapping } from '../lib/ButtonMapping';\nimport { DebugDraw, StrokeAndFillOptions } from '../lib/DebugDraw';\nimport AABB from '../lib/geom/AABB';\nimport Vector2 from '../lib/geom/Vector2';\nimport { KeyCode } from '../lib/KeyCode';\nimport Component from '../lib/scene/Component';\nimport Entity from '../lib/scene/Entity';\nimport Scene from '../lib/scene/Scene';\nimport SceneSystem from '../lib/scene/SceneSystem';\n\nclass DebugDrawSystem extends SceneSystem {\n  static systemName = 'DebugDragSystem';\n\n  debugDraw!: DebugDraw;\n\n  afterAddToScene(scene: Scene) {\n    super.afterAddToScene(scene);\n    this.debugDraw = new DebugDraw(scene.ctx);\n  }\n}\n\nclass AABBDrawSystem extends SceneSystem {\n  static systemName = 'AABBDebugDrawSystem';\n\n  debugDraw!: DebugDraw;\n\n  afterAddToScene(scene: Scene) {\n    super.afterAddToScene(scene);\n    this.debugDraw = new DebugDraw(scene.ctx);\n  }\n\n  afterDraw() {}\n}\n\nclass AABBComponent extends Component {\n  public value: AABB;\n\n  constructor(entity: Entity, value: AABB) {\n    super(entity);\n    this.value = value;\n  }\n\n  setOrigin(origin: Vector2) {\n    this.value = new AABB(origin, this.value.size);\n  }\n\n  beforeDraw(ctx: CanvasRenderingContext2D, time: number) {\n    ctx.save();\n    ctx.translate(this.value.left, this.value.top);\n  }\n  afterDraw(ctx: CanvasRenderingContext2D, time: number) {\n    ctx.restore();\n  }\n}\n\nclass AABBRenderer extends Component {\n  constructor(entity: Entity, public opts: StrokeAndFillOptions) {\n    super(entity);\n  }\n\n  getAABB(): AABB {\n    return this.entity.getComponent(AABBComponent).value;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    this.getScene()\n      .getSystem(DebugDrawSystem)\n      .debugDraw.aabb(new AABB(Vector2.ZERO, this.getAABB().size), this.opts);\n  }\n}\n\nclass PlayerController extends Component {\n  constructor(\n    entity: Entity,\n    public readonly moveSpeed: number,\n    public readonly controls: ButtonMapping<'left' | 'right' | 'jump' | 'down'>,\n  ) {\n    super(entity);\n  }\n\n  update(delta: number) {\n    const aabbComponent = this.entity.getComponent(AABBComponent);\n    let origin = aabbComponent.value.origin;\n    if (this.controls.isDown('left')) {\n      origin = origin.sub(new Vector2(this.moveSpeed * delta, 0));\n    }\n    if (this.controls.isDown('right')) {\n      origin = origin.add(new Vector2(this.moveSpeed * delta, 0));\n    }\n\n    if (this.controls.isDown('jump')) {\n      origin = origin.sub(new Vector2(0, this.moveSpeed * delta));\n    }\n    if (this.controls.isDown('down')) {\n      origin = origin.add(new Vector2(0, this.moveSpeed * delta));\n    }\n    aabbComponent.setOrigin(origin);\n  }\n}\n\nconst scene = new Scene(800, 600, window.devicePixelRatio);\nscene.addSystem(new DebugDrawSystem());\n\nconst player = new Entity();\nplayer.addComponent(\n  AABBComponent,\n  new AABB(new Vector2(200, 200), new Vector2(20, 30)),\n);\nplayer.addComponent(AABBRenderer, {\n  fill: 'lime',\n  stroke: 'black',\n  strokeWidth: 1,\n});\nplayer.addComponent(\n  PlayerController,\n  0.4,\n  new ButtonMapping({\n    left: [KeyCode.A, KeyCode.LEFT_ARROW],\n    right: [KeyCode.D, KeyCode.RIGHT_ARROW],\n    jump: [KeyCode.W, KeyCode.UP_ARROW, KeyCode.SPACE],\n    down: [KeyCode.S],\n  }),\n);\nscene.addChild(player);\n\nscene.appendTo(document.getElementById('root')!);\nscene.start();\n\nconsole.log(scene);\n","import { assert } from '../assert';\nimport SceneObject from './SceneObject';\nimport SceneSystem from './SceneSystem';\n\nconst speed = 1;\nconst scale = 1;\nconst repeatUpdate = 1;\n\ntype SystemClass<T extends SceneSystem = SceneSystem> = {\n  systemName: string;\n  new (): T;\n};\n\nexport default class Scene {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  private _scaleFactor: number;\n  private _children: SceneObject[] = [];\n  private _isPlaying: boolean = false;\n  private frameHandle: number | null = null;\n  private lastElapsedTime: number | null = null;\n  private systemsByClass = new Map<SystemClass<SceneSystem>, SceneSystem>();\n\n  constructor(width: number, height: number, scaleFactor: number = 1) {\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = width * scaleFactor;\n    this.canvas.height = height * scaleFactor;\n    this.canvas.style.width = `${width}px`;\n    this.canvas.style.height = `${height}px`;\n    const ctx = this.canvas.getContext('2d');\n    assert(ctx, 'ctx');\n    this.ctx = ctx;\n    this._scaleFactor = scaleFactor * scale;\n\n    this._setupVisiblityChange();\n  }\n\n  get width(): number {\n    return this.canvas.width / this._scaleFactor;\n  }\n\n  get height(): number {\n    return this.canvas.height / this._scaleFactor;\n  }\n\n  get scaleFactor(): number {\n    return this._scaleFactor;\n  }\n\n  get isPlaying(): boolean {\n    return this.frameHandle !== null && this._isPlaying;\n  }\n\n  set isPlaying(newValue: boolean) {\n    assert(\n      this.frameHandle !== null,\n      'cannot set isPlaying without calling start',\n    );\n    this._isPlaying = newValue;\n  }\n\n  get children(): SceneObject[] {\n    return this._children;\n  }\n\n  appendTo(element: HTMLElement) {\n    element.appendChild(this.canvas);\n  }\n\n  hasSystem(systemType: SystemClass): boolean {\n    return this.systemsByClass.has(systemType);\n  }\n\n  getSystem<T extends SceneSystem>(systemType: SystemClass<T>): T {\n    const system = this.systemsByClass.get(systemType);\n    assert(system, `system, ${systemType.systemName} not found`);\n    assert(system instanceof systemType, 'system is wrong instance type');\n    return system;\n  }\n\n  addSystem(system: SceneSystem) {\n    assert(\n      !this.hasSystem(system.constructor as any),\n      'only one system of each type allowed',\n    );\n    this.systemsByClass.set(system.constructor as any, system);\n    system.afterAddToScene(this);\n  }\n\n  removeSystem(systemType: SystemClass) {\n    const system = this.getSystem(systemType);\n    system.beforeRemoveFromScene(this);\n    this.systemsByClass.delete(systemType);\n  }\n\n  addChild(child: SceneObject) {\n    this._children.push(child);\n    child.onAddedToScene(this);\n  }\n\n  addChildBefore(targetChild: SceneObject, newChild: SceneObject) {\n    const index = this._children.indexOf(targetChild);\n    assert(index !== -1, 'target child must be present');\n\n    this.addChildAtIndex(index, newChild);\n  }\n\n  addChildAfter(targetChild: SceneObject, newChild: SceneObject) {\n    const index = this._children.indexOf(targetChild);\n    assert(index !== -1, 'target child must be present');\n\n    this.addChildAtIndex(index + 1, newChild);\n  }\n\n  addChildAtIndex(index: number, child: SceneObject) {\n    this._children.splice(index, 0, child);\n    child.onAddedToScene(this);\n  }\n\n  removeChild(child: SceneObject): boolean {\n    const index = this._children.indexOf(child);\n    if (index === -1) return false;\n\n    this.removeChildAtIndex(index);\n    return true;\n  }\n\n  removeChildAtIndex(index: number): SceneObject {\n    const child = this._children[index];\n    this._children.splice(index, 1);\n    child.onRemovedFromScene();\n    return child;\n  }\n\n  update(delta: number) {\n    for (let i = 0; i < repeatUpdate; i++) {\n      for (const system of this.systemsByClass.values()) {\n        system.beforeUpdate(delta);\n      }\n      this._children.forEach((child) => child.update(delta));\n      for (const system of this.systemsByClass.values()) {\n        system.afterUpdate(delta);\n      }\n    }\n  }\n\n  draw(elapsedTime: number) {\n    this.ctx.save();\n    this.ctx.scale(this._scaleFactor, this._scaleFactor);\n    this.ctx.clearRect(0, 0, this.width, this.height);\n\n    for (const system of this.systemsByClass.values()) {\n      system.beforeDraw(this.ctx, elapsedTime);\n    }\n    this._children\n      .sort((a, b) => a.getSortOrder() - b.getSortOrder())\n      .forEach((child) => child.draw(this.ctx, elapsedTime));\n    for (const system of this.systemsByClass.values()) {\n      system.afterDraw(this.ctx, elapsedTime);\n    }\n\n    this.ctx.restore();\n  }\n\n  start() {\n    this._isPlaying = true;\n    this.frameHandle = window.requestAnimationFrame(this._tick);\n  }\n\n  stop() {\n    if (this.frameHandle !== null) {\n      window.cancelAnimationFrame(this.frameHandle);\n      this.frameHandle = null;\n    }\n    this._isPlaying = false;\n    this.lastElapsedTime = null;\n  }\n\n  _tick = (elapsedTime: number) => {\n    elapsedTime = elapsedTime * speed;\n    const lastElapsedTime = this.lastElapsedTime;\n    if (lastElapsedTime !== null) {\n      const deltaTime = elapsedTime - lastElapsedTime;\n      if (this.isPlaying) {\n        this.update(deltaTime);\n        this.draw(elapsedTime);\n      }\n    }\n\n    this.lastElapsedTime = elapsedTime;\n    this.frameHandle = window.requestAnimationFrame(this._tick);\n  };\n\n  _setupVisiblityChange() {\n    let playOnVisible = false;\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden && this.isPlaying) {\n        playOnVisible = true;\n        this.stop();\n      }\n      if (playOnVisible && !document.hidden) {\n        playOnVisible = false;\n        this.start();\n      }\n    });\n  }\n}\n","import SceneObject from './SceneObject';\nimport Component from './Component';\nimport { assert } from '../assert';\nimport SortOrderProvider from './SortOrderProvider';\nimport Scene from './Scene';\n\ntype ComponentClass<T extends Component, Args extends unknown[]> = {\n  name: string;\n  new (entity: Entity, ...args: Args): T;\n};\n\nexport default class Entity extends SceneObject {\n  private componentInstances = new Map<\n    ComponentClass<Component, any>,\n    Component\n  >();\n\n  addComponent<T extends Component, Args extends unknown[]>(\n    component: ComponentClass<T, Args>,\n    ...args: Args\n  ): T {\n    assert(\n      !this.componentInstances.has(component),\n      `component instance ${component.name} already exists`,\n    );\n    const instance = new component(this, ...args);\n    this.componentInstances.set(component, instance);\n    return instance;\n  }\n\n  hasComponent<T extends Component>(\n    component: ComponentClass<T, any[]>,\n  ): boolean {\n    return this.componentInstances.has(component);\n  }\n\n  getComponent<T extends Component>(component: ComponentClass<T, any[]>): T {\n    const instance = this.componentInstances.get(component);\n    assert(instance, `no instance for ${component.name} exists`);\n    assert(instance instanceof component, 'wrong instance type');\n    return instance;\n  }\n\n  removeComponent<T extends Component>(component: ComponentClass<T, any[]>): T {\n    const instance = this.getComponent(component);\n    this.componentInstances.delete(component);\n    instance.onRemove();\n    return instance;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, elapsedTime: number): void {\n    for (const component of this.componentInstances.values()) {\n      component.beforeDraw(ctx, elapsedTime);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.draw(ctx, elapsedTime);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.afterDraw(ctx, elapsedTime);\n    }\n  }\n  update(delta: number): void {\n    for (const component of this.componentInstances.values()) {\n      component.beforeUpdate(delta);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.update(delta);\n    }\n    for (const component of this.componentInstances.values()) {\n      component.afterUpdate(delta);\n    }\n  }\n\n  onAddedToScene(scene: Scene) {\n    super.onAddedToScene(scene);\n    for (const component of this.componentInstances.values()) {\n      component.onAddedToScene(scene);\n    }\n  }\n\n  onRemovedFromScene() {\n    const scene = this.getScene();\n    super.onRemovedFromScene();\n    for (const component of this.componentInstances.values()) {\n      component.onRemovedFromScene(scene);\n    }\n  }\n\n  getSortOrder() {\n    if (this.hasComponent(SortOrderProvider)) {\n      return this.getComponent(SortOrderProvider).getSortOrder();\n    } else {\n      return super.getSortOrder();\n    }\n  }\n}\n","import { Key } from 'readline';\nimport { AnimationActionLoopStyles } from 'three';\nimport { assert } from './assert';\nimport EventEmitter, { Unsubscribe } from './EventEmitter';\nimport { KeyCode } from './KeyCode';\nimport { entries } from './utils';\n\ntype ActionInfo = {\n  downEvent: EventEmitter<void>;\n  upEvent: EventEmitter<void>;\n  isDown: boolean;\n};\n\nexport class ButtonMapping<Actions extends string> {\n  private readonly keyCodeToAction: ReadonlyMap<KeyCode, Actions>;\n  private readonly actionInfo: ReadonlyMap<Actions, ActionInfo>;\n\n  constructor(actionMappings: Record<Actions, Array<KeyCode>>) {\n    const keyCodeToAction = new Map<KeyCode, Actions>();\n    const actionInfo = new Map<Actions, ActionInfo>();\n\n    for (const [action, keyCodes] of entries(actionMappings)) {\n      for (const keyCode of keyCodes) {\n        keyCodeToAction.set(keyCode, action);\n      }\n      actionInfo.set(action, {\n        downEvent: new EventEmitter(),\n        upEvent: new EventEmitter(),\n        isDown: false,\n      });\n    }\n\n    this.keyCodeToAction = keyCodeToAction;\n    this.actionInfo = actionInfo;\n\n    document.addEventListener('keydown', (event) => {\n      const actionInfo = this.getActionInfoForKeyCodeIfExists(event.keyCode);\n      if (!actionInfo) {\n        return;\n      }\n\n      actionInfo.isDown = true;\n      actionInfo.downEvent.emit();\n    });\n    document.addEventListener('keyup', (event) => {\n      const actionInfo = this.getActionInfoForKeyCodeIfExists(event.keyCode);\n      if (!actionInfo) {\n        return;\n      }\n\n      actionInfo.isDown = false;\n      actionInfo.upEvent.emit();\n    });\n  }\n\n  isDown(action: Actions): boolean {\n    return this.getActionInfo(action).isDown;\n  }\n\n  onDown(action: Actions, cb: () => void): Unsubscribe {\n    return this.getActionInfo(action).downEvent.listen(cb);\n  }\n\n  onUp(action: Actions, cb: () => void): Unsubscribe {\n    return this.getActionInfo(action).upEvent.listen(cb);\n  }\n\n  private getActionInfoForKeyCodeIfExists(keyCode: number): ActionInfo | null {\n    const action = this.keyCodeToAction.get(keyCode);\n    if (!action) {\n      return null;\n    }\n    return this.getActionInfo(action);\n  }\n\n  private getActionInfo(action: Actions): ActionInfo {\n    const actionInfo = this.actionInfo.get(action);\n    assert(actionInfo);\n    return actionInfo;\n  }\n}\n"],"names":["$25418d05f9b26617$export$b8795f4f643ce74f","value","message","Error","$25418d05f9b26617$export$62d771998a1345d1","$f2b3fa9969eed8fe$export$45ca8e7f50ccf2e0","a","b","n","$f2b3fa9969eed8fe$export$81a1504436b4693c","object","Object","entries","$b33d7521dbc247e4$export$9099ad97b570f7c","angle","radius","Math","cos","sin","points","reduce","memo","p","add","ZERO","div","length","x","y","toString","this","magnitudeSquared","magnitude","sqrt","atan2","isInPolygon","polygon","isInside","currentIdx","previousIdx","currentX","currentY","previousX","previousY","equals","other","distanceTo","dx","dy","angleTo","sub","angleBetween","min","max","size","$f2b3fa9969eed8fe$export$412d6621f9b9540a","PI","dot","scale","negate","floor","ceil","round","withMagnitude","newMagnitude","fromPolar","normalize","withAngle","newAngle","rotate","byAngle","lerp","$4e69c769edcf1c3b$var$LABEL_OFFSET","$4e69c769edcf1c3b$var$DEBUG_ARROW_ANGLE","$4e69c769edcf1c3b$export$13037e9c80189b76","clear","fill","applyFillOptions","ctx","fillRect","canvas","width","height","clearRect","beginPath","moveTo","lineTo","arc","startAngle","endAngle","anticlockwise","arcTo","p1","p2","applyStrokeOptions","strokeWidth","stroke","strokeCap","strokeDash","strokeDashOffset","strokeJoin","lineWidth","strokeStyle","lineCap","setLineDash","lineDashOffset","lineJoin","options","fillStyle","applyStrokeAndFillOptions","strokeAndFill","getDebugStrokeOptions","color","debugStroke","fillText","text","position","circle","center","ellipse","radiusX","radiusY","debugLabel","label","debugPointX","debugPointO","debugArrow","start","end","average","vector","arrowLeftPoint","arrowRightPoint","debugVectorAtPoint","base","point","polyLine","i","debugPolygon","debugPolyLine","aabb","opts","debug","origin","rect","left","top","$c6aaf09eac67e66a$export$9099ad97b570f7c","right","bottom","contains","intersects","getCenter","freeze","KeyCode","$d97a09d0d5e816f3$export$8e47cb5eebeb6e59","$ce4d8978209ce2ae$export$9099ad97b570f7c","onRemove","onAddedToScene","scene","onRemovedFromScene","beforeUpdate","delta","update","afterUpdate","beforeDraw","time","draw","afterDraw","getScene","entity","$83bf66e14d730e78$var$constructorIdCounts","$3f847b092ae83168$export$9099ad97b570f7c","getSortOrder","getSortOrderFn","super","$a07b9228bda8e081$export$9099ad97b570f7c","afterAddToScene","beforeRemoveFromScene","constructor","systemName","$364eecbb31b9073e$var$DebugDrawSystem","debugDraw","$364eecbb31b9073e$var$AABBComponent","setOrigin","save","translate","restore","$364eecbb31b9073e$var$scene","_scaleFactor","scaleFactor","isPlaying","frameHandle","_isPlaying","newValue","children","_children","appendTo","element","appendChild","hasSystem","systemType","systemsByClass","has","getSystem","system","get","addSystem","set","removeSystem","delete","addChild","child","push","addChildBefore","targetChild","newChild","index","indexOf","addChildAtIndex","addChildAfter","splice","removeChild","removeChildAtIndex","values","forEach","system1","elapsedTime","sort","window","requestAnimationFrame","_tick","stop","cancelAnimationFrame","lastElapsedTime","_setupVisiblityChange","playOnVisible","document","addEventListener","hidden","Map","deltaTime","createElement","style","getContext","devicePixelRatio","$364eecbb31b9073e$var$player","hasScene","addTo","name","id","addComponent","component","args","componentInstances","instance","hasComponent","getComponent","removeComponent","component1","component2","getAABB","entity1","aabbComponent","controls","isDown","moveSpeed","entity2","action","getActionInfo","onDown","cb","downEvent","listen","onUp","upEvent","getActionInfoForKeyCodeIfExists","keyCode","keyCodeToAction","actionInfo","actionMappings","keyCodes","$1oGkl","default","event","actionInfo1","emit","A","LEFT_ARROW","D","RIGHT_ARROW","jump","W","UP_ARROW","SPACE","down","S","getElementById","console","log"],"version":3,"file":"index.8a7ed5bc.js.map"}